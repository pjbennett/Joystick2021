
JS20-Test01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a960  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  0800ab00  0800ab00  0001ab00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b39c  0800b39c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b39c  0800b39c  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b39c  0800b39c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b39c  0800b39c  0001b39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3a0  0800b3a0  0001b3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800b3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a8  200000a0  0800b440  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a48  0800b440  00021a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a545  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f3  00000000  00000000  0003a611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0003dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003f1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e9c  00000000  00000000  00040628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b250  00000000  00000000  000644c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db18e  00000000  00000000  0007f714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a8a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006130  00000000  00000000  0015a8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aae8 	.word	0x0800aae8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800aae8 	.word	0x0800aae8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr
 8000a5c:	0000      	movs	r0, r0
	...

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f004 f84f 	bl	8004b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f001 f883 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f001 fb8f 	bl	8002190 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a72:	f001 fb6f 	bl	8002154 <MX_DMA_Init>
  MX_SPI2_Init();
 8000a76:	f001 f981 	bl	8001d7c <MX_SPI2_Init>
  MX_ADC2_Init();
 8000a7a:	f001 f8e9 	bl	8001c50 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000a7e:	f001 fb13 	bl	80020a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a82:	f001 fa13 	bl	8001eac <MX_TIM2_Init>
  MX_TIM8_Init();
 8000a86:	f001 fab5 	bl	8001ff4 <MX_TIM8_Init>
  MX_TIM3_Init();
 8000a8a:	f001 fa5d 	bl	8001f48 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000a8e:	f001 f9b3 	bl	8001df8 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8000a92:	f001 fb39 	bl	8002108 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000a96:	2064      	movs	r0, #100	; 0x64
 8000a98:	f004 f89c 	bl	8004bd4 <HAL_Delay>
  ssd1306_Init();
 8000a9c:	f003 fae8 	bl	8004070 <ssd1306_Init>
  //ssd1306_TestAll();

  ssd1306_Fill(Black);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f003 fb3f 	bl	8004124 <ssd1306_Fill>
  ssd1306_SetCursor(2, 0);
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f003 fc95 	bl	80043d8 <ssd1306_SetCursor>
  ssd1306_WriteString("SUPRACAM - CAMERA OP", Font_6x8, White);
 8000aae:	4a9a      	ldr	r2, [pc, #616]	; (8000d18 <main+0x2b8>)
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	ca06      	ldmia	r2, {r1, r2}
 8000ab4:	4899      	ldr	r0, [pc, #612]	; (8000d1c <main+0x2bc>)
 8000ab6:	f003 fc69 	bl	800438c <ssd1306_WriteString>
  ssd1306_SetCursor(2, 10);
 8000aba:	210a      	movs	r1, #10
 8000abc:	2002      	movs	r0, #2
 8000abe:	f003 fc8b 	bl	80043d8 <ssd1306_SetCursor>
  ssd1306_WriteString("CONTROL PANEL", Font_6x8, White);
 8000ac2:	4a95      	ldr	r2, [pc, #596]	; (8000d18 <main+0x2b8>)
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	ca06      	ldmia	r2, {r1, r2}
 8000ac8:	4895      	ldr	r0, [pc, #596]	; (8000d20 <main+0x2c0>)
 8000aca:	f003 fc5f 	bl	800438c <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 8000ace:	2114      	movs	r1, #20
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f003 fc81 	bl	80043d8 <ssd1306_SetCursor>
  ssd1306_WriteString("VERSION 1.14", Font_6x8, White);
 8000ad6:	4a90      	ldr	r2, [pc, #576]	; (8000d18 <main+0x2b8>)
 8000ad8:	2301      	movs	r3, #1
 8000ada:	ca06      	ldmia	r2, {r1, r2}
 8000adc:	4891      	ldr	r0, [pc, #580]	; (8000d24 <main+0x2c4>)
 8000ade:	f003 fc55 	bl	800438c <ssd1306_WriteString>

  ssd1306_DrawRectangle(8,40,112,50,White);
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2332      	movs	r3, #50	; 0x32
 8000ae8:	2270      	movs	r2, #112	; 0x70
 8000aea:	2128      	movs	r1, #40	; 0x28
 8000aec:	2008      	movs	r0, #8
 8000aee:	f003 fcf7 	bl	80044e0 <ssd1306_DrawRectangle>
  ssd1306_DrawRectangle(8,53,112,63,White);
 8000af2:	2301      	movs	r3, #1
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	233f      	movs	r3, #63	; 0x3f
 8000af8:	2270      	movs	r2, #112	; 0x70
 8000afa:	2135      	movs	r1, #53	; 0x35
 8000afc:	2008      	movs	r0, #8
 8000afe:	f003 fcef 	bl	80044e0 <ssd1306_DrawRectangle>

  ssd1306_UpdateScreen();
 8000b02:	f003 fb33 	bl	800416c <ssd1306_UpdateScreen>

  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0a:	4987      	ldr	r1, [pc, #540]	; (8000d28 <main+0x2c8>)
 8000b0c:	4887      	ldr	r0, [pc, #540]	; (8000d2c <main+0x2cc>)
 8000b0e:	f004 fa93 	bl	8005038 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000b12:	4887      	ldr	r0, [pc, #540]	; (8000d30 <main+0x2d0>)
 8000b14:	f007 fea0 	bl	8008858 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000b18:	213c      	movs	r1, #60	; 0x3c
 8000b1a:	4886      	ldr	r0, [pc, #536]	; (8000d34 <main+0x2d4>)
 8000b1c:	f007 ffb2 	bl	8008a84 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000b20:	213c      	movs	r1, #60	; 0x3c
 8000b22:	4885      	ldr	r0, [pc, #532]	; (8000d38 <main+0x2d8>)
 8000b24:	f007 ffae 	bl	8008a84 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b28:	213c      	movs	r1, #60	; 0x3c
 8000b2a:	4884      	ldr	r0, [pc, #528]	; (8000d3c <main+0x2dc>)
 8000b2c:	f007 ffaa 	bl	8008a84 <HAL_TIM_Encoder_Start>

  headData[FOCUS] = 2500;
 8000b30:	4b83      	ldr	r3, [pc, #524]	; (8000d40 <main+0x2e0>)
 8000b32:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000b36:	801a      	strh	r2, [r3, #0]
  headData[ZOOM] = 2048;
 8000b38:	4b81      	ldr	r3, [pc, #516]	; (8000d40 <main+0x2e0>)
 8000b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b3e:	805a      	strh	r2, [r3, #2]
  headData[PAN] = 1024;
 8000b40:	4b7f      	ldr	r3, [pc, #508]	; (8000d40 <main+0x2e0>)
 8000b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b46:	809a      	strh	r2, [r3, #4]
  headData[TILT] = 1024;
 8000b48:	4b7d      	ldr	r3, [pc, #500]	; (8000d40 <main+0x2e0>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4e:	80da      	strh	r2, [r3, #6]
  headData[ROLL] = 1024;
 8000b50:	4b7b      	ldr	r3, [pc, #492]	; (8000d40 <main+0x2e0>)
 8000b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b56:	811a      	strh	r2, [r3, #8]

  gainSetting = 10;
 8000b58:	4b7a      	ldr	r3, [pc, #488]	; (8000d44 <main+0x2e4>)
 8000b5a:	220a      	movs	r2, #10
 8000b5c:	701a      	strb	r2, [r3, #0]
  TIM1->CNT = 40;
 8000b5e:	4b7a      	ldr	r3, [pc, #488]	; (8000d48 <main+0x2e8>)
 8000b60:	2228      	movs	r2, #40	; 0x28
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24

  //read calibration from EEPROM
  configData.panOffset = (int32_t) *(uint32_t*)flashAddr;
 8000b64:	4b79      	ldr	r3, [pc, #484]	; (8000d4c <main+0x2ec>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b78      	ldr	r3, [pc, #480]	; (8000d50 <main+0x2f0>)
 8000b6e:	601a      	str	r2, [r3, #0]
  configData.panDBsize = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000b70:	4b76      	ldr	r3, [pc, #472]	; (8000d4c <main+0x2ec>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3304      	adds	r3, #4
 8000b76:	4a75      	ldr	r2, [pc, #468]	; (8000d4c <main+0x2ec>)
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	4b74      	ldr	r3, [pc, #464]	; (8000d4c <main+0x2ec>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b73      	ldr	r3, [pc, #460]	; (8000d50 <main+0x2f0>)
 8000b84:	605a      	str	r2, [r3, #4]
  configData.panDBcenter = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000b86:	4b71      	ldr	r3, [pc, #452]	; (8000d4c <main+0x2ec>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	4a6f      	ldr	r2, [pc, #444]	; (8000d4c <main+0x2ec>)
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b6e      	ldr	r3, [pc, #440]	; (8000d4c <main+0x2ec>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b6d      	ldr	r3, [pc, #436]	; (8000d50 <main+0x2f0>)
 8000b9a:	609a      	str	r2, [r3, #8]
  configData.panSense = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000b9c:	4b6b      	ldr	r3, [pc, #428]	; (8000d4c <main+0x2ec>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	4a6a      	ldr	r2, [pc, #424]	; (8000d4c <main+0x2ec>)
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	4b69      	ldr	r3, [pc, #420]	; (8000d4c <main+0x2ec>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <main+0x2f0>)
 8000bb0:	60da      	str	r2, [r3, #12]
  configData.tiltOffset = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000bb2:	4b66      	ldr	r3, [pc, #408]	; (8000d4c <main+0x2ec>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	4a64      	ldr	r2, [pc, #400]	; (8000d4c <main+0x2ec>)
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b63      	ldr	r3, [pc, #396]	; (8000d4c <main+0x2ec>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b62      	ldr	r3, [pc, #392]	; (8000d50 <main+0x2f0>)
 8000bc6:	611a      	str	r2, [r3, #16]
  configData.tiltDBsize = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000bc8:	4b60      	ldr	r3, [pc, #384]	; (8000d4c <main+0x2ec>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	4a5f      	ldr	r2, [pc, #380]	; (8000d4c <main+0x2ec>)
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	4b5e      	ldr	r3, [pc, #376]	; (8000d4c <main+0x2ec>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b5d      	ldr	r3, [pc, #372]	; (8000d50 <main+0x2f0>)
 8000bdc:	615a      	str	r2, [r3, #20]
  configData.tiltDBcenter = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000bde:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <main+0x2ec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3304      	adds	r3, #4
 8000be4:	4a59      	ldr	r2, [pc, #356]	; (8000d4c <main+0x2ec>)
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <main+0x2ec>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b57      	ldr	r3, [pc, #348]	; (8000d50 <main+0x2f0>)
 8000bf2:	619a      	str	r2, [r3, #24]
  configData.tiltSense = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000bf4:	4b55      	ldr	r3, [pc, #340]	; (8000d4c <main+0x2ec>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	4a54      	ldr	r2, [pc, #336]	; (8000d4c <main+0x2ec>)
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	4b53      	ldr	r3, [pc, #332]	; (8000d4c <main+0x2ec>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b52      	ldr	r3, [pc, #328]	; (8000d50 <main+0x2f0>)
 8000c08:	61da      	str	r2, [r3, #28]
  configData.rollOffset = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000c0a:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <main+0x2ec>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	4a4e      	ldr	r2, [pc, #312]	; (8000d4c <main+0x2ec>)
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <main+0x2ec>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <main+0x2f0>)
 8000c1e:	621a      	str	r2, [r3, #32]
  configData.rollDBsize = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000c20:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <main+0x2ec>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3304      	adds	r3, #4
 8000c26:	4a49      	ldr	r2, [pc, #292]	; (8000d4c <main+0x2ec>)
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <main+0x2ec>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <main+0x2f0>)
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  configData.rollDBcenter = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <main+0x2ec>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <main+0x2ec>)
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <main+0x2ec>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <main+0x2f0>)
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  configData.rollSense = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000c4c:	4b3f      	ldr	r3, [pc, #252]	; (8000d4c <main+0x2ec>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	3304      	adds	r3, #4
 8000c52:	4a3e      	ldr	r2, [pc, #248]	; (8000d4c <main+0x2ec>)
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	4b3d      	ldr	r3, [pc, #244]	; (8000d4c <main+0x2ec>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <main+0x2f0>)
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
  configData.zoomOffset = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000c62:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <main+0x2ec>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3304      	adds	r3, #4
 8000c68:	4a38      	ldr	r2, [pc, #224]	; (8000d4c <main+0x2ec>)
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <main+0x2ec>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <main+0x2f0>)
 8000c76:	631a      	str	r2, [r3, #48]	; 0x30
  configData.zoomDBsize = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <main+0x2ec>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <main+0x2ec>)
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <main+0x2ec>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <main+0x2f0>)
 8000c8c:	635a      	str	r2, [r3, #52]	; 0x34
  configData.zoomDBcenter = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <main+0x2ec>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3304      	adds	r3, #4
 8000c94:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <main+0x2ec>)
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <main+0x2ec>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <main+0x2f0>)
 8000ca2:	639a      	str	r2, [r3, #56]	; 0x38
  configData.zoomSense = (int32_t) *(uint32_t*)(flashAddr+=4);
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <main+0x2ec>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <main+0x2ec>)
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <main+0x2ec>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <main+0x2f0>)
 8000cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  if (configData.tiltDBcenter < 1800)
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <main+0x2f0>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000cc2:	da03      	bge.n	8000ccc <main+0x26c>
	  configData.tiltDBcenter = 1980;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <main+0x2f0>)
 8000cc6:	f240 72bc 	movw	r2, #1980	; 0x7bc
 8000cca:	619a      	str	r2, [r3, #24]
  if (configData.tiltDBsize < 0)
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <main+0x2f0>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da02      	bge.n	8000cda <main+0x27a>
	  configData.tiltDBsize = 5;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <main+0x2f0>)
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	615a      	str	r2, [r3, #20]
  if (configData.tiltOffset < 0)
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <main+0x2f0>)
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	da02      	bge.n	8000ce8 <main+0x288>
	  configData.tiltOffset = 0;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <main+0x2f0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	updatePanEncoder();
 8000ce8:	f001 fcfa 	bl	80026e0 <updatePanEncoder>
	updateTiltEncoder();
 8000cec:	f001 fafc 	bl	80022e8 <updateTiltEncoder>
	updateRollEncoder();
 8000cf0:	f001 fe0a 	bl	8002908 <updateRollEncoder>
	updateZoomEncoder();
 8000cf4:	f001 fbc4 	bl	8002480 <updateZoomEncoder>

	//ADC oversampling
	channel1 = 0;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <main+0x2f4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
	channel2 = 0;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <main+0x2f8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
	channel3 = 0;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <main+0x2fc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
	channel4 = 0;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <main+0x300>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
	channel5 = 0;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <main+0x304>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e027      	b.n	8000d68 <main+0x308>
 8000d18:	20000024 	.word	0x20000024
 8000d1c:	0800ab00 	.word	0x0800ab00
 8000d20:	0800ab18 	.word	0x0800ab18
 8000d24:	0800ab28 	.word	0x0800ab28
 8000d28:	20000b34 	.word	0x20000b34
 8000d2c:	200005c0 	.word	0x200005c0
 8000d30:	20001308 	.word	0x20001308
 8000d34:	20000ac0 	.word	0x20000ac0
 8000d38:	2000056c 	.word	0x2000056c
 8000d3c:	200007d4 	.word	0x200007d4
 8000d40:	20000618 	.word	0x20000618
 8000d44:	200009d6 	.word	0x200009d6
 8000d48:	40012c00 	.word	0x40012c00
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	2000135c 	.word	0x2000135c
 8000d54:	200000c4 	.word	0x200000c4
 8000d58:	200000c8 	.word	0x200000c8
 8000d5c:	200000cc 	.word	0x200000cc
 8000d60:	200000d0 	.word	0x200000d0
 8000d64:	200000d4 	.word	0x200000d4
	channel6 = 0;
 8000d68:	4b95      	ldr	r3, [pc, #596]	; (8000fc0 <main+0x560>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]

	samplingCount = ADC_BUF_LEN/5; //make sure ADC_BUF_LEN is a multiple of 5 (channels)
 8000d6e:	4b95      	ldr	r3, [pc, #596]	; (8000fc4 <main+0x564>)
 8000d70:	22c8      	movs	r2, #200	; 0xc8
 8000d72:	801a      	strh	r2, [r3, #0]
	uint16_t j,k;
	k = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	82bb      	strh	r3, [r7, #20]
	for (j=0; j<samplingCount; j++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	82fb      	strh	r3, [r7, #22]
 8000d7c:	e03b      	b.n	8000df6 <main+0x396>
	{
		channel1 += adc_buf[k];
 8000d7e:	8abb      	ldrh	r3, [r7, #20]
 8000d80:	4a91      	ldr	r2, [pc, #580]	; (8000fc8 <main+0x568>)
 8000d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b90      	ldr	r3, [pc, #576]	; (8000fcc <main+0x56c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a8f      	ldr	r2, [pc, #572]	; (8000fcc <main+0x56c>)
 8000d90:	6013      	str	r3, [r2, #0]
		channel2 += adc_buf[k+1];
 8000d92:	8abb      	ldrh	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a8c      	ldr	r2, [pc, #560]	; (8000fc8 <main+0x568>)
 8000d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b8c      	ldr	r3, [pc, #560]	; (8000fd0 <main+0x570>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a8a      	ldr	r2, [pc, #552]	; (8000fd0 <main+0x570>)
 8000da6:	6013      	str	r3, [r2, #0]
		channel3 += adc_buf[k+2];
 8000da8:	8abb      	ldrh	r3, [r7, #20]
 8000daa:	3302      	adds	r3, #2
 8000dac:	4a86      	ldr	r2, [pc, #536]	; (8000fc8 <main+0x568>)
 8000dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b87      	ldr	r3, [pc, #540]	; (8000fd4 <main+0x574>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a86      	ldr	r2, [pc, #536]	; (8000fd4 <main+0x574>)
 8000dbc:	6013      	str	r3, [r2, #0]
		channel4 += adc_buf[k+3];
 8000dbe:	8abb      	ldrh	r3, [r7, #20]
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	4a81      	ldr	r2, [pc, #516]	; (8000fc8 <main+0x568>)
 8000dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b83      	ldr	r3, [pc, #524]	; (8000fd8 <main+0x578>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a81      	ldr	r2, [pc, #516]	; (8000fd8 <main+0x578>)
 8000dd2:	6013      	str	r3, [r2, #0]
		channel5 += adc_buf[k+4];
 8000dd4:	8abb      	ldrh	r3, [r7, #20]
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	4a7b      	ldr	r2, [pc, #492]	; (8000fc8 <main+0x568>)
 8000dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b7e      	ldr	r3, [pc, #504]	; (8000fdc <main+0x57c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a7d      	ldr	r2, [pc, #500]	; (8000fdc <main+0x57c>)
 8000de8:	6013      	str	r3, [r2, #0]
		//channel6 += adc_buf[k+5];
		k+=5;
 8000dea:	8abb      	ldrh	r3, [r7, #20]
 8000dec:	3305      	adds	r3, #5
 8000dee:	82bb      	strh	r3, [r7, #20]
	for (j=0; j<samplingCount; j++)
 8000df0:	8afb      	ldrh	r3, [r7, #22]
 8000df2:	3301      	adds	r3, #1
 8000df4:	82fb      	strh	r3, [r7, #22]
 8000df6:	4b73      	ldr	r3, [pc, #460]	; (8000fc4 <main+0x564>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	8afa      	ldrh	r2, [r7, #22]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d3be      	bcc.n	8000d7e <main+0x31e>
	}

	channel1 /= samplingCount;
 8000e00:	4b72      	ldr	r3, [pc, #456]	; (8000fcc <main+0x56c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a6f      	ldr	r2, [pc, #444]	; (8000fc4 <main+0x564>)
 8000e06:	8812      	ldrh	r2, [r2, #0]
 8000e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e0c:	4a6f      	ldr	r2, [pc, #444]	; (8000fcc <main+0x56c>)
 8000e0e:	6013      	str	r3, [r2, #0]
	channel2 /= samplingCount;
 8000e10:	4b6f      	ldr	r3, [pc, #444]	; (8000fd0 <main+0x570>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a6b      	ldr	r2, [pc, #428]	; (8000fc4 <main+0x564>)
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e1c:	4a6c      	ldr	r2, [pc, #432]	; (8000fd0 <main+0x570>)
 8000e1e:	6013      	str	r3, [r2, #0]
	channel3 /= samplingCount;
 8000e20:	4b6c      	ldr	r3, [pc, #432]	; (8000fd4 <main+0x574>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a67      	ldr	r2, [pc, #412]	; (8000fc4 <main+0x564>)
 8000e26:	8812      	ldrh	r2, [r2, #0]
 8000e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e2c:	4a69      	ldr	r2, [pc, #420]	; (8000fd4 <main+0x574>)
 8000e2e:	6013      	str	r3, [r2, #0]
	channel4 /= samplingCount;
 8000e30:	4b69      	ldr	r3, [pc, #420]	; (8000fd8 <main+0x578>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a63      	ldr	r2, [pc, #396]	; (8000fc4 <main+0x564>)
 8000e36:	8812      	ldrh	r2, [r2, #0]
 8000e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e3c:	4a66      	ldr	r2, [pc, #408]	; (8000fd8 <main+0x578>)
 8000e3e:	6013      	str	r3, [r2, #0]
	channel5 /= samplingCount;
 8000e40:	4b66      	ldr	r3, [pc, #408]	; (8000fdc <main+0x57c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a5f      	ldr	r2, [pc, #380]	; (8000fc4 <main+0x564>)
 8000e46:	8812      	ldrh	r2, [r2, #0]
 8000e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e4c:	4a63      	ldr	r2, [pc, #396]	; (8000fdc <main+0x57c>)
 8000e4e:	6013      	str	r3, [r2, #0]
	//channel6 /= samplingCount;


	//--- FOCUS ---
	focusRawValue = adcValue[4];
 8000e50:	4b63      	ldr	r3, [pc, #396]	; (8000fe0 <main+0x580>)
 8000e52:	891a      	ldrh	r2, [r3, #8]
 8000e54:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <main+0x584>)
 8000e56:	801a      	strh	r2, [r3, #0]
	//focusSamplingValue = (uint16_t)(channel5>>1); //divide by 2 for a range of 0 to 2000ish
	focusSamplingValue = (uint16_t)((float)channel5/1.9); //get to a range of 0 to 2100ish
 8000e58:	4b60      	ldr	r3, [pc, #384]	; (8000fdc <main+0x57c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	ee07 3a90 	vmov	s15, r3
 8000e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e64:	ee17 0a90 	vmov	r0, s15
 8000e68:	f7ff fb6e 	bl	8000548 <__aeabi_f2d>
 8000e6c:	a352      	add	r3, pc, #328	; (adr r3, 8000fb8 <main+0x558>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fceb 	bl	800084c <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f7ff fdcd 	bl	8000a1c <__aeabi_d2uiz>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	4b58      	ldr	r3, [pc, #352]	; (8000fe8 <main+0x588>)
 8000e88:	801a      	strh	r2, [r3, #0]

	avgFocusData[count_focus] = focusSamplingValue;
 8000e8a:	4b58      	ldr	r3, [pc, #352]	; (8000fec <main+0x58c>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b55      	ldr	r3, [pc, #340]	; (8000fe8 <main+0x588>)
 8000e92:	8819      	ldrh	r1, [r3, #0]
 8000e94:	4b56      	ldr	r3, [pc, #344]	; (8000ff0 <main+0x590>)
 8000e96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	count_focus++;
 8000e9a:	4b54      	ldr	r3, [pc, #336]	; (8000fec <main+0x58c>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b52      	ldr	r3, [pc, #328]	; (8000fec <main+0x58c>)
 8000ea4:	801a      	strh	r2, [r3, #0]
	if (count_focus >= AVG_FOCUS)
 8000ea6:	4b51      	ldr	r3, [pc, #324]	; (8000fec <main+0x58c>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	2b63      	cmp	r3, #99	; 0x63
 8000eac:	d902      	bls.n	8000eb4 <main+0x454>
		count_focus = 0;
 8000eae:	4b4f      	ldr	r3, [pc, #316]	; (8000fec <main+0x58c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	801a      	strh	r2, [r3, #0]

	focusAvgValue = 0;
 8000eb4:	4b4f      	ldr	r3, [pc, #316]	; (8000ff4 <main+0x594>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<AVG_FOCUS; i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	e00c      	b.n	8000eda <main+0x47a>
	{
		focusAvgValue = focusAvgValue + avgFocusData[i];
 8000ec0:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <main+0x590>)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b4a      	ldr	r3, [pc, #296]	; (8000ff4 <main+0x594>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <main+0x594>)
 8000ed2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i<AVG_FOCUS; i++)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b63      	cmp	r3, #99	; 0x63
 8000ede:	ddef      	ble.n	8000ec0 <main+0x460>
	}
	focusAvgValue = focusAvgValue/AVG_FOCUS;
 8000ee0:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <main+0x594>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a44      	ldr	r2, [pc, #272]	; (8000ff8 <main+0x598>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	4a41      	ldr	r2, [pc, #260]	; (8000ff4 <main+0x594>)
 8000eee:	6013      	str	r3, [r2, #0]
	focusAvgDisplay = (int16_t)focusAvgValue;
 8000ef0:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <main+0x594>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <main+0x59c>)
 8000ef8:	801a      	strh	r2, [r3, #0]

	if (focusAvgValue > 2100) //limit top end of the range
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <main+0x594>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f640 0234 	movw	r2, #2100	; 0x834
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d903      	bls.n	8000f0e <main+0x4ae>
		focusAvgValue = 2100;
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <main+0x594>)
 8000f08:	f640 0234 	movw	r2, #2100	; 0x834
 8000f0c:	601a      	str	r2, [r3, #0]

	focusCalValue = focusAvgValue; //calibrated range is 0 to 2100
 8000f0e:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <main+0x594>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <main+0x5a0>)
 8000f16:	801a      	strh	r2, [r3, #0]
	focusDisplayValue = focusCalValue;
 8000f18:	4b39      	ldr	r3, [pc, #228]	; (8001000 <main+0x5a0>)
 8000f1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <main+0x5a4>)
 8000f20:	801a      	strh	r2, [r3, #0]

	//test display support
	rawTick[tickCount] = focusRawValue;
 8000f22:	4b39      	ldr	r3, [pc, #228]	; (8001008 <main+0x5a8>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <main+0x584>)
 8000f2a:	8819      	ldrh	r1, [r3, #0]
 8000f2c:	4b37      	ldr	r3, [pc, #220]	; (800100c <main+0x5ac>)
 8000f2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	avgTick[tickCount] = focusAvgValue;
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <main+0x594>)
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <main+0x5a8>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	b289      	uxth	r1, r1
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <main+0x5b0>)
 8000f40:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	tickCount++;
 8000f44:	4b30      	ldr	r3, [pc, #192]	; (8001008 <main+0x5a8>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <main+0x5a8>)
 8000f4e:	701a      	strb	r2, [r3, #0]
	if (tickCount > NUM_TICK)
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <main+0x5a8>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b19      	cmp	r3, #25
 8000f56:	d902      	bls.n	8000f5e <main+0x4fe>
		tickCount = 0;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <main+0x5a8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]

	headData[FOCUS] = focusAvgValue + 1024; //range is 1024 to 3124 (extra 100 is to ensure full range)
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <main+0x594>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <main+0x5b4>)
 8000f6c:	801a      	strh	r2, [r3, #0]

	//--- ZOOM ---
	zoomRawValue = adcValue[1];
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <main+0x580>)
 8000f70:	885a      	ldrh	r2, [r3, #2]
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <main+0x5b8>)
 8000f74:	801a      	strh	r2, [r3, #0]
	zoomSamplingValue = (uint16_t)(channel2);
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <main+0x570>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b27      	ldr	r3, [pc, #156]	; (800101c <main+0x5bc>)
 8000f7e:	801a      	strh	r2, [r3, #0]
	avgZoomData[count_zoom] = zoomSamplingValue;
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <main+0x5c0>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <main+0x5bc>)
 8000f88:	8819      	ldrh	r1, [r3, #0]
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <main+0x5c4>)
 8000f8c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	count_zoom++;
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <main+0x5c0>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <main+0x5c0>)
 8000f9a:	801a      	strh	r2, [r3, #0]
	if (count_zoom >= AVG_ZOOM)
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <main+0x5c0>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	2b63      	cmp	r3, #99	; 0x63
 8000fa2:	d902      	bls.n	8000faa <main+0x54a>
		count_zoom = 0;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <main+0x5c0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	801a      	strh	r2, [r3, #0]
	zoomAvgValue = 0;
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <main+0x5c8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<AVG_ZOOM; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e047      	b.n	8001046 <main+0x5e6>
 8000fb6:	bf00      	nop
 8000fb8:	66666666 	.word	0x66666666
 8000fbc:	3ffe6666 	.word	0x3ffe6666
 8000fc0:	200000d8 	.word	0x200000d8
 8000fc4:	200000dc 	.word	0x200000dc
 8000fc8:	20000b34 	.word	0x20000b34
 8000fcc:	200000c4 	.word	0x200000c4
 8000fd0:	200000c8 	.word	0x200000c8
 8000fd4:	200000cc 	.word	0x200000cc
 8000fd8:	200000d0 	.word	0x200000d0
 8000fdc:	200000d4 	.word	0x200000d4
 8000fe0:	20001904 	.word	0x20001904
 8000fe4:	20000566 	.word	0x20000566
 8000fe8:	20000b18 	.word	0x20000b18
 8000fec:	2000147a 	.word	0x2000147a
 8000ff0:	20001918 	.word	0x20001918
 8000ff4:	20000700 	.word	0x20000700
 8000ff8:	51eb851f 	.word	0x51eb851f
 8000ffc:	20000b24 	.word	0x20000b24
 8001000:	200006fc 	.word	0x200006fc
 8001004:	200005bc 	.word	0x200005bc
 8001008:	20000abc 	.word	0x20000abc
 800100c:	200009f4 	.word	0x200009f4
 8001010:	20001484 	.word	0x20001484
 8001014:	20000618 	.word	0x20000618
 8001018:	200005ba 	.word	0x200005ba
 800101c:	20001480 	.word	0x20001480
 8001020:	200009d8 	.word	0x200009d8
 8001024:	20000824 	.word	0x20000824
 8001028:	200007cc 	.word	0x200007cc
	{
		zoomAvgValue = zoomAvgValue + avgZoomData[i];
 800102c:	4a56      	ldr	r2, [pc, #344]	; (8001188 <main+0x728>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001034:	461a      	mov	r2, r3
 8001036:	4b55      	ldr	r3, [pc, #340]	; (800118c <main+0x72c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a53      	ldr	r2, [pc, #332]	; (800118c <main+0x72c>)
 800103e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i<AVG_ZOOM; i++)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b63      	cmp	r3, #99	; 0x63
 800104a:	ddef      	ble.n	800102c <main+0x5cc>
	}
	zoomAvgValue = zoomAvgValue/AVG_ZOOM;
 800104c:	4b4f      	ldr	r3, [pc, #316]	; (800118c <main+0x72c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <main+0x730>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	4a4c      	ldr	r2, [pc, #304]	; (800118c <main+0x72c>)
 800105a:	6013      	str	r3, [r2, #0]
	zoomAvgDisplay = (int16_t)zoomAvgValue;
 800105c:	4b4b      	ldr	r3, [pc, #300]	; (800118c <main+0x72c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <main+0x734>)
 8001064:	801a      	strh	r2, [r3, #0]

	//ZOOM CALIBRATION - DEADBAND
	zoomCalValue = 0;
 8001066:	4b4c      	ldr	r3, [pc, #304]	; (8001198 <main+0x738>)
 8001068:	2200      	movs	r2, #0
 800106a:	801a      	strh	r2, [r3, #0]
	if (zoomAvgValue > (configData.zoomDBcenter + configData.zoomDBsize))
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <main+0x73c>)
 800106e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001070:	4b4a      	ldr	r3, [pc, #296]	; (800119c <main+0x73c>)
 8001072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001074:	4413      	add	r3, r2
 8001076:	461a      	mov	r2, r3
 8001078:	4b44      	ldr	r3, [pc, #272]	; (800118c <main+0x72c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d20f      	bcs.n	80010a0 <main+0x640>
	{
		zoomCalValue = zoomAvgValue - (configData.zoomDBcenter + configData.zoomDBsize);
 8001080:	4b42      	ldr	r3, [pc, #264]	; (800118c <main+0x72c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b45      	ldr	r3, [pc, #276]	; (800119c <main+0x73c>)
 8001088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108a:	b299      	uxth	r1, r3
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <main+0x73c>)
 800108e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001090:	b29b      	uxth	r3, r3
 8001092:	440b      	add	r3, r1
 8001094:	b29b      	uxth	r3, r3
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <main+0x738>)
 800109e:	801a      	strh	r2, [r3, #0]
	}
	if (zoomAvgValue < (configData.zoomDBcenter - configData.zoomDBsize))
 80010a0:	4b3e      	ldr	r3, [pc, #248]	; (800119c <main+0x73c>)
 80010a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <main+0x73c>)
 80010a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b37      	ldr	r3, [pc, #220]	; (800118c <main+0x72c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d90f      	bls.n	80010d4 <main+0x674>
	{
		zoomCalValue = zoomAvgValue - (configData.zoomDBcenter - configData.zoomDBsize);
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <main+0x72c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <main+0x73c>)
 80010bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010be:	b299      	uxth	r1, r3
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <main+0x73c>)
 80010c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	1acb      	subs	r3, r1, r3
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <main+0x738>)
 80010d2:	801a      	strh	r2, [r3, #0]
	}
	if (zoomCalValue > 500)
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <main+0x738>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010de:	dd03      	ble.n	80010e8 <main+0x688>
		zoomCalValue = 500;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <main+0x738>)
 80010e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010e6:	801a      	strh	r2, [r3, #0]
	if (zoomCalValue < -500)
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <main+0x738>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 80010f2:	da03      	bge.n	80010fc <main+0x69c>
		zoomCalValue = -500;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <main+0x738>)
 80010f6:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80010fa:	801a      	strh	r2, [r3, #0]

	if (configData.zoomSense == REVERSE)
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <main+0x73c>)
 80010fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001100:	2b01      	cmp	r3, #1
 8001102:	d108      	bne.n	8001116 <main+0x6b6>
	{
		zoomCalValue = zoomCalValue *-1; //airplane - stick up is tilt down
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <main+0x738>)
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	b29b      	uxth	r3, r3
 800110c:	425b      	negs	r3, r3
 800110e:	b29b      	uxth	r3, r3
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <main+0x738>)
 8001114:	801a      	strh	r2, [r3, #0]
	}

	headData[ZOOM] = (zoomCalValue*2)+2048+configData.zoomOffset;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <main+0x738>)
 8001118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001120:	b29b      	uxth	r3, r3
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <main+0x73c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	b29b      	uxth	r3, r3
 800112c:	4413      	add	r3, r2
 800112e:	b29a      	uxth	r2, r3
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <main+0x740>)
 8001132:	805a      	strh	r2, [r3, #2]
	zoomDisplayValue = zoomCalValue;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <main+0x738>)
 8001136:	f9b3 2000 	ldrsh.w	r2, [r3]
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <main+0x744>)
 800113c:	801a      	strh	r2, [r3, #0]


	//--- PAN ---
	panRawValue = adcValue[2];
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <main+0x748>)
 8001140:	889a      	ldrh	r2, [r3, #4]
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <main+0x74c>)
 8001144:	801a      	strh	r2, [r3, #0]
	panSamplingValue = (uint16_t)(channel3);
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <main+0x750>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <main+0x754>)
 800114e:	801a      	strh	r2, [r3, #0]
	avgPanData[count_pan] = panSamplingValue;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <main+0x758>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <main+0x754>)
 8001158:	8819      	ldrh	r1, [r3, #0]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <main+0x75c>)
 800115c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	count_pan++;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <main+0x758>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <main+0x758>)
 800116a:	801a      	strh	r2, [r3, #0]
	if (count_pan >= AVG_PAN)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <main+0x758>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	2b63      	cmp	r3, #99	; 0x63
 8001172:	d902      	bls.n	800117a <main+0x71a>
		count_pan = 0;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <main+0x758>)
 8001176:	2200      	movs	r2, #0
 8001178:	801a      	strh	r2, [r3, #0]
	panAvgValue = 0;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <main+0x760>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<AVG_PAN; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	e02b      	b.n	80011de <main+0x77e>
 8001186:	bf00      	nop
 8001188:	20000824 	.word	0x20000824
 800118c:	200007cc 	.word	0x200007cc
 8001190:	51eb851f 	.word	0x51eb851f
 8001194:	2000062e 	.word	0x2000062e
 8001198:	20000b22 	.word	0x20000b22
 800119c:	2000135c 	.word	0x2000135c
 80011a0:	20000618 	.word	0x20000618
 80011a4:	200009c8 	.word	0x200009c8
 80011a8:	20001904 	.word	0x20001904
 80011ac:	20000b30 	.word	0x20000b30
 80011b0:	200000cc 	.word	0x200000cc
 80011b4:	20001358 	.word	0x20001358
 80011b8:	200009f0 	.word	0x200009f0
 80011bc:	20000704 	.word	0x20000704
 80011c0:	2000147c 	.word	0x2000147c
	{
		panAvgValue = panAvgValue + avgPanData[i];
 80011c4:	4a5c      	ldr	r2, [pc, #368]	; (8001338 <main+0x8d8>)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <main+0x8dc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a59      	ldr	r2, [pc, #356]	; (800133c <main+0x8dc>)
 80011d6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i<AVG_PAN; i++)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3301      	adds	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b63      	cmp	r3, #99	; 0x63
 80011e2:	ddef      	ble.n	80011c4 <main+0x764>
	}
	panAvgValue = panAvgValue/AVG_PAN;
 80011e4:	4b55      	ldr	r3, [pc, #340]	; (800133c <main+0x8dc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a55      	ldr	r2, [pc, #340]	; (8001340 <main+0x8e0>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <main+0x8dc>)
 80011f2:	6013      	str	r3, [r2, #0]
	panAvgDisplay = (int16_t)panAvgValue;
 80011f4:	4b51      	ldr	r3, [pc, #324]	; (800133c <main+0x8dc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b52      	ldr	r3, [pc, #328]	; (8001344 <main+0x8e4>)
 80011fc:	801a      	strh	r2, [r3, #0]

	//PAN CALIBRATION - DEADBAND
	panCalValue = 0;
 80011fe:	4b52      	ldr	r3, [pc, #328]	; (8001348 <main+0x8e8>)
 8001200:	2200      	movs	r2, #0
 8001202:	801a      	strh	r2, [r3, #0]
	if (panAvgValue > (configData.panDBcenter + configData.panDBsize))
 8001204:	4b51      	ldr	r3, [pc, #324]	; (800134c <main+0x8ec>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	4b50      	ldr	r3, [pc, #320]	; (800134c <main+0x8ec>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4413      	add	r3, r2
 800120e:	461a      	mov	r2, r3
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <main+0x8dc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d20f      	bcs.n	8001238 <main+0x7d8>
	{
		panCalValue = panAvgValue - (configData.panDBcenter + configData.panDBsize);
 8001218:	4b48      	ldr	r3, [pc, #288]	; (800133c <main+0x8dc>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b4b      	ldr	r3, [pc, #300]	; (800134c <main+0x8ec>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	b299      	uxth	r1, r3
 8001224:	4b49      	ldr	r3, [pc, #292]	; (800134c <main+0x8ec>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	b29b      	uxth	r3, r3
 800122a:	440b      	add	r3, r1
 800122c:	b29b      	uxth	r3, r3
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b29b      	uxth	r3, r3
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b44      	ldr	r3, [pc, #272]	; (8001348 <main+0x8e8>)
 8001236:	801a      	strh	r2, [r3, #0]
	}
	if (panAvgValue < (configData.panDBcenter - configData.panDBsize))
 8001238:	4b44      	ldr	r3, [pc, #272]	; (800134c <main+0x8ec>)
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	4b43      	ldr	r3, [pc, #268]	; (800134c <main+0x8ec>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	461a      	mov	r2, r3
 8001244:	4b3d      	ldr	r3, [pc, #244]	; (800133c <main+0x8dc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d90f      	bls.n	800126c <main+0x80c>
	{
		panCalValue = panAvgValue - (configData.panDBcenter - configData.panDBsize);
 800124c:	4b3b      	ldr	r3, [pc, #236]	; (800133c <main+0x8dc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <main+0x8ec>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	b299      	uxth	r1, r3
 8001258:	4b3c      	ldr	r3, [pc, #240]	; (800134c <main+0x8ec>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	b29b      	uxth	r3, r3
 800125e:	1acb      	subs	r3, r1, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	4413      	add	r3, r2
 8001264:	b29b      	uxth	r3, r3
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b37      	ldr	r3, [pc, #220]	; (8001348 <main+0x8e8>)
 800126a:	801a      	strh	r2, [r3, #0]
	}
	if (panCalValue > 500)
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <main+0x8e8>)
 800126e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001272:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001276:	dd03      	ble.n	8001280 <main+0x820>
		panCalValue = 500;
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <main+0x8e8>)
 800127a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800127e:	801a      	strh	r2, [r3, #0]
	if (panCalValue < -500)
 8001280:	4b31      	ldr	r3, [pc, #196]	; (8001348 <main+0x8e8>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800128a:	da03      	bge.n	8001294 <main+0x834>
		panCalValue = -500;
 800128c:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <main+0x8e8>)
 800128e:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 8001292:	801a      	strh	r2, [r3, #0]

	if (configData.panSense == REVERSE)
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <main+0x8ec>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <main+0x84e>
	{
		panCalValue = panCalValue *-1; //airplane - stick up is tilt down
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <main+0x8e8>)
 800129e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	425b      	negs	r3, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <main+0x8e8>)
 80012ac:	801a      	strh	r2, [r3, #0]
	}

	headData[PAN] = (int16_t)((float)panCalValue*PTRgain)+1024+configData.panOffset;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <main+0x8e8>)
 80012b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <main+0x8f0>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ca:	ee17 3a90 	vmov	r3, s15
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <main+0x8ec>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	b29b      	uxth	r3, r3
 80012dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <main+0x8f4>)
 80012e4:	809a      	strh	r2, [r3, #4]
	panDisplayValue = panCalValue;
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <main+0x8e8>)
 80012e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <main+0x8f8>)
 80012ee:	801a      	strh	r2, [r3, #0]


	//--- TILT ---
	tiltRawValue = adcValue[3];
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <main+0x8fc>)
 80012f2:	88da      	ldrh	r2, [r3, #6]
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <main+0x900>)
 80012f6:	801a      	strh	r2, [r3, #0]
	tiltSamplingValue = (uint16_t)(channel4);
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <main+0x904>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <main+0x908>)
 8001300:	801a      	strh	r2, [r3, #0]
	avgTiltData[count_tilt] = tiltSamplingValue;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <main+0x90c>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <main+0x908>)
 800130a:	8819      	ldrh	r1, [r3, #0]
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <main+0x910>)
 800130e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	count_tilt++;
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <main+0x90c>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <main+0x90c>)
 800131c:	801a      	strh	r2, [r3, #0]
	if (count_tilt >= AVG_TILT)
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <main+0x90c>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	2b63      	cmp	r3, #99	; 0x63
 8001324:	d902      	bls.n	800132c <main+0x8cc>
		count_tilt = 0;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <main+0x90c>)
 8001328:	2200      	movs	r2, #0
 800132a:	801a      	strh	r2, [r3, #0]
	tiltAvgValue = 0;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <main+0x914>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<AVG_TILT; i++)
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	e02c      	b.n	8001392 <main+0x932>
 8001338:	20000704 	.word	0x20000704
 800133c:	2000147c 	.word	0x2000147c
 8001340:	51eb851f 	.word	0x51eb851f
 8001344:	200008ee 	.word	0x200008ee
 8001348:	2000135a 	.word	0x2000135a
 800134c:	2000135c 	.word	0x2000135c
 8001350:	20000b10 	.word	0x20000b10
 8001354:	20000618 	.word	0x20000618
 8001358:	20000b32 	.word	0x20000b32
 800135c:	20001904 	.word	0x20001904
 8001360:	20000b0c 	.word	0x20000b0c
 8001364:	200000d0 	.word	0x200000d0
 8001368:	20000b26 	.word	0x20000b26
 800136c:	20001304 	.word	0x20001304
 8001370:	200008f4 	.word	0x200008f4
 8001374:	200009ec 	.word	0x200009ec
	{
		tiltAvgValue = tiltAvgValue + avgTiltData[i];
 8001378:	4a5c      	ldr	r2, [pc, #368]	; (80014ec <main+0xa8c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001380:	461a      	mov	r2, r3
 8001382:	4b5b      	ldr	r3, [pc, #364]	; (80014f0 <main+0xa90>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a59      	ldr	r2, [pc, #356]	; (80014f0 <main+0xa90>)
 800138a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i<AVG_TILT; i++)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b63      	cmp	r3, #99	; 0x63
 8001396:	ddef      	ble.n	8001378 <main+0x918>
	}
	tiltAvgValue = tiltAvgValue/AVG_TILT;
 8001398:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <main+0xa90>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a55      	ldr	r2, [pc, #340]	; (80014f4 <main+0xa94>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <main+0xa90>)
 80013a6:	6013      	str	r3, [r2, #0]
	tiltAvgDisplay = (int16_t)tiltAvgValue;
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <main+0xa90>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b52      	ldr	r3, [pc, #328]	; (80014f8 <main+0xa98>)
 80013b0:	801a      	strh	r2, [r3, #0]

	//TILT CALIBRATION - DEADBAND
	tiltCalValue = 0;
 80013b2:	4b52      	ldr	r3, [pc, #328]	; (80014fc <main+0xa9c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	801a      	strh	r2, [r3, #0]
	if (tiltAvgValue > (configData.tiltDBcenter + configData.tiltDBsize))
 80013b8:	4b51      	ldr	r3, [pc, #324]	; (8001500 <main+0xaa0>)
 80013ba:	699a      	ldr	r2, [r3, #24]
 80013bc:	4b50      	ldr	r3, [pc, #320]	; (8001500 <main+0xaa0>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <main+0xa90>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d20f      	bcs.n	80013ec <main+0x98c>
	{
		tiltCalValue = tiltAvgValue - (configData.tiltDBcenter + configData.tiltDBsize);
 80013cc:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <main+0xa90>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <main+0xaa0>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	b299      	uxth	r1, r3
 80013d8:	4b49      	ldr	r3, [pc, #292]	; (8001500 <main+0xaa0>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	440b      	add	r3, r1
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	4b44      	ldr	r3, [pc, #272]	; (80014fc <main+0xa9c>)
 80013ea:	801a      	strh	r2, [r3, #0]
	}
	if (tiltAvgValue < (configData.tiltDBcenter - configData.tiltDBsize))
 80013ec:	4b44      	ldr	r3, [pc, #272]	; (8001500 <main+0xaa0>)
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	4b43      	ldr	r3, [pc, #268]	; (8001500 <main+0xaa0>)
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <main+0xa90>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d90f      	bls.n	8001420 <main+0x9c0>
	{
		tiltCalValue = tiltAvgValue - (configData.tiltDBcenter - configData.tiltDBsize);
 8001400:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <main+0xa90>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <main+0xaa0>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	b299      	uxth	r1, r3
 800140c:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <main+0xaa0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	b29b      	uxth	r3, r3
 8001412:	1acb      	subs	r3, r1, r3
 8001414:	b29b      	uxth	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <main+0xa9c>)
 800141e:	801a      	strh	r2, [r3, #0]
	}
	if (tiltCalValue > 500)
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <main+0xa9c>)
 8001422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001426:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800142a:	dd03      	ble.n	8001434 <main+0x9d4>
		tiltCalValue = 500;
 800142c:	4b33      	ldr	r3, [pc, #204]	; (80014fc <main+0xa9c>)
 800142e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001432:	801a      	strh	r2, [r3, #0]
	if (tiltCalValue < -500)
 8001434:	4b31      	ldr	r3, [pc, #196]	; (80014fc <main+0xa9c>)
 8001436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800143e:	da03      	bge.n	8001448 <main+0x9e8>
		tiltCalValue = -500;
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <main+0xa9c>)
 8001442:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 8001446:	801a      	strh	r2, [r3, #0]

	if (configData.tiltSense == REVERSE)
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <main+0xaa0>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d108      	bne.n	8001462 <main+0xa02>
	{
		tiltCalValue = tiltCalValue *-1; //airplane - stick up is tilt down
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <main+0xa9c>)
 8001452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001456:	b29b      	uxth	r3, r3
 8001458:	425b      	negs	r3, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b27      	ldr	r3, [pc, #156]	; (80014fc <main+0xa9c>)
 8001460:	801a      	strh	r2, [r3, #0]
	}

	headData[TILT] = (int16_t)((float)tiltCalValue*PTRgain)+1024+configData.tiltOffset;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <main+0xa9c>)
 8001464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <main+0xaa4>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 3a90 	vmov	r3, s15
 8001482:	b21b      	sxth	r3, r3
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <main+0xaa0>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4413      	add	r3, r2
 800148e:	b29b      	uxth	r3, r3
 8001490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <main+0xaa8>)
 8001498:	80da      	strh	r2, [r3, #6]
	tiltDisplayValue = tiltCalValue;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <main+0xa9c>)
 800149c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <main+0xaac>)
 80014a2:	801a      	strh	r2, [r3, #0]


	//--- ROLL ---
	rollRawValue = adcValue[0];
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <main+0xab0>)
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <main+0xab4>)
 80014aa:	801a      	strh	r2, [r3, #0]
	rollSamplingValue = (uint16_t)(channel1);
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <main+0xab8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <main+0xabc>)
 80014b4:	801a      	strh	r2, [r3, #0]
	avgRollData[count_roll] = rollSamplingValue;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <main+0xac0>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <main+0xabc>)
 80014be:	8819      	ldrh	r1, [r3, #0]
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <main+0xac4>)
 80014c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	count_roll++;
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <main+0xac0>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <main+0xac0>)
 80014d0:	801a      	strh	r2, [r3, #0]
	if (count_roll >= AVG_ROLL)
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <main+0xac0>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	2b63      	cmp	r3, #99	; 0x63
 80014d8:	d902      	bls.n	80014e0 <main+0xa80>
		count_roll = 0;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <main+0xac0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	801a      	strh	r2, [r3, #0]
	rollAvgValue = 0;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <main+0xac8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<AVG_ROLL; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	e02c      	b.n	8001546 <main+0xae6>
 80014ec:	200008f4 	.word	0x200008f4
 80014f0:	200009ec 	.word	0x200009ec
 80014f4:	51eb851f 	.word	0x51eb851f
 80014f8:	20001354 	.word	0x20001354
 80014fc:	200009d2 	.word	0x200009d2
 8001500:	2000135c 	.word	0x2000135c
 8001504:	20000b10 	.word	0x20000b10
 8001508:	20000618 	.word	0x20000618
 800150c:	200019e0 	.word	0x200019e0
 8001510:	20001904 	.word	0x20001904
 8001514:	200009c6 	.word	0x200009c6
 8001518:	200000c4 	.word	0x200000c4
 800151c:	200008f2 	.word	0x200008f2
 8001520:	20000abe 	.word	0x20000abe
 8001524:	20001838 	.word	0x20001838
 8001528:	200009c0 	.word	0x200009c0
	{
		rollAvgValue = rollAvgValue + avgRollData[i];
 800152c:	4aa3      	ldr	r2, [pc, #652]	; (80017bc <main+0xd5c>)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001534:	461a      	mov	r2, r3
 8001536:	4ba2      	ldr	r3, [pc, #648]	; (80017c0 <main+0xd60>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4aa0      	ldr	r2, [pc, #640]	; (80017c0 <main+0xd60>)
 800153e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i<AVG_ROLL; i++)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2b63      	cmp	r3, #99	; 0x63
 800154a:	ddef      	ble.n	800152c <main+0xacc>
	}
	rollAvgValue = rollAvgValue/AVG_ROLL;
 800154c:	4b9c      	ldr	r3, [pc, #624]	; (80017c0 <main+0xd60>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a9c      	ldr	r2, [pc, #624]	; (80017c4 <main+0xd64>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	4a99      	ldr	r2, [pc, #612]	; (80017c0 <main+0xd60>)
 800155a:	6013      	str	r3, [r2, #0]
	rollAvgDisplay = (int16_t)rollAvgValue;
 800155c:	4b98      	ldr	r3, [pc, #608]	; (80017c0 <main+0xd60>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b21a      	sxth	r2, r3
 8001562:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <main+0xd68>)
 8001564:	801a      	strh	r2, [r3, #0]

	//ROLL CALIBRATION - DEADBAND
	rollCalValue = 0;
 8001566:	4b99      	ldr	r3, [pc, #612]	; (80017cc <main+0xd6c>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	if (rollAvgValue > (configData.rollDBcenter + configData.rollDBsize))
 800156c:	4b98      	ldr	r3, [pc, #608]	; (80017d0 <main+0xd70>)
 800156e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001570:	4b97      	ldr	r3, [pc, #604]	; (80017d0 <main+0xd70>)
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	4413      	add	r3, r2
 8001576:	461a      	mov	r2, r3
 8001578:	4b91      	ldr	r3, [pc, #580]	; (80017c0 <main+0xd60>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d20f      	bcs.n	80015a0 <main+0xb40>
	{
		rollCalValue = rollAvgValue - (configData.rollDBcenter + configData.rollDBsize);
 8001580:	4b8f      	ldr	r3, [pc, #572]	; (80017c0 <main+0xd60>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	b29a      	uxth	r2, r3
 8001586:	4b92      	ldr	r3, [pc, #584]	; (80017d0 <main+0xd70>)
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	b299      	uxth	r1, r3
 800158c:	4b90      	ldr	r3, [pc, #576]	; (80017d0 <main+0xd70>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	b29b      	uxth	r3, r3
 8001592:	440b      	add	r3, r1
 8001594:	b29b      	uxth	r3, r3
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b29b      	uxth	r3, r3
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b8b      	ldr	r3, [pc, #556]	; (80017cc <main+0xd6c>)
 800159e:	801a      	strh	r2, [r3, #0]
	}
	if (rollAvgValue < (configData.rollDBcenter - configData.rollDBsize))
 80015a0:	4b8b      	ldr	r3, [pc, #556]	; (80017d0 <main+0xd70>)
 80015a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a4:	4b8a      	ldr	r3, [pc, #552]	; (80017d0 <main+0xd70>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b84      	ldr	r3, [pc, #528]	; (80017c0 <main+0xd60>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d90f      	bls.n	80015d4 <main+0xb74>
	{
		rollCalValue = rollAvgValue - (configData.rollDBcenter - configData.rollDBsize);
 80015b4:	4b82      	ldr	r3, [pc, #520]	; (80017c0 <main+0xd60>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b85      	ldr	r3, [pc, #532]	; (80017d0 <main+0xd70>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	b299      	uxth	r1, r3
 80015c0:	4b83      	ldr	r3, [pc, #524]	; (80017d0 <main+0xd70>)
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	1acb      	subs	r3, r1, r3
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <main+0xd6c>)
 80015d2:	801a      	strh	r2, [r3, #0]
	}
	if (rollCalValue > 500)
 80015d4:	4b7d      	ldr	r3, [pc, #500]	; (80017cc <main+0xd6c>)
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015de:	dd03      	ble.n	80015e8 <main+0xb88>
		rollCalValue = 500;
 80015e0:	4b7a      	ldr	r3, [pc, #488]	; (80017cc <main+0xd6c>)
 80015e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015e6:	801a      	strh	r2, [r3, #0]
	if (rollCalValue < -500)
 80015e8:	4b78      	ldr	r3, [pc, #480]	; (80017cc <main+0xd6c>)
 80015ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ee:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 80015f2:	da03      	bge.n	80015fc <main+0xb9c>
		rollCalValue = -500;
 80015f4:	4b75      	ldr	r3, [pc, #468]	; (80017cc <main+0xd6c>)
 80015f6:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80015fa:	801a      	strh	r2, [r3, #0]

	if (configData.rollSense == REVERSE)
 80015fc:	4b74      	ldr	r3, [pc, #464]	; (80017d0 <main+0xd70>)
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d108      	bne.n	8001616 <main+0xbb6>
	{
		rollCalValue = rollCalValue *-1; //airplane - stick up is tilt down
 8001604:	4b71      	ldr	r3, [pc, #452]	; (80017cc <main+0xd6c>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	b29b      	uxth	r3, r3
 800160c:	425b      	negs	r3, r3
 800160e:	b29b      	uxth	r3, r3
 8001610:	b21a      	sxth	r2, r3
 8001612:	4b6e      	ldr	r3, [pc, #440]	; (80017cc <main+0xd6c>)
 8001614:	801a      	strh	r2, [r3, #0]
	}

	// check roll switch
	if (HAL_GPIO_ReadPin(SERVO_SW_GPIO_Port, SERVO_SW_Pin))
 8001616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161a:	486e      	ldr	r0, [pc, #440]	; (80017d4 <main+0xd74>)
 800161c:	f005 f8d6 	bl	80067cc <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <main+0xbd4>
	{
		rollStatus = 0;
 8001626:	4b6c      	ldr	r3, [pc, #432]	; (80017d8 <main+0xd78>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
		rollCalValue = 0;
 800162c:	4b67      	ldr	r3, [pc, #412]	; (80017cc <main+0xd6c>)
 800162e:	2200      	movs	r2, #0
 8001630:	801a      	strh	r2, [r3, #0]
 8001632:	e002      	b.n	800163a <main+0xbda>
	}
	else
	{
		rollStatus = 1;
 8001634:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <main+0xd78>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
	}

	headData[ROLL] = (int16_t)((float)rollCalValue*PTRgain)+1024+configData.rollOffset;
 800163a:	4b64      	ldr	r3, [pc, #400]	; (80017cc <main+0xd6c>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001648:	4b64      	ldr	r3, [pc, #400]	; (80017dc <main+0xd7c>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001656:	ee17 3a90 	vmov	r3, s15
 800165a:	b21b      	sxth	r3, r3
 800165c:	b29a      	uxth	r2, r3
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <main+0xd70>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4413      	add	r3, r2
 8001666:	b29b      	uxth	r3, r3
 8001668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b5c      	ldr	r3, [pc, #368]	; (80017e0 <main+0xd80>)
 8001670:	811a      	strh	r2, [r3, #8]
	rollDisplayValue = rollCalValue;
 8001672:	4b56      	ldr	r3, [pc, #344]	; (80017cc <main+0xd6c>)
 8001674:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001678:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <main+0xd84>)
 800167a:	801a      	strh	r2, [r3, #0]
	  	  TIM3->CNT = -80;
	  }
	  */

	  //PTR GAIN ADJUSTMENT
	  gainSetting = ((TIM1->CNT)>>2);
 800167c:	4b5a      	ldr	r3, [pc, #360]	; (80017e8 <main+0xd88>)
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	b25a      	sxtb	r2, r3
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <main+0xd8c>)
 8001686:	701a      	strb	r2, [r3, #0]
	  if (gainSetting > 10)
 8001688:	4b58      	ldr	r3, [pc, #352]	; (80017ec <main+0xd8c>)
 800168a:	f993 3000 	ldrsb.w	r3, [r3]
 800168e:	2b0a      	cmp	r3, #10
 8001690:	dd05      	ble.n	800169e <main+0xc3e>
	  {
		  gainSetting = 10;
 8001692:	4b56      	ldr	r3, [pc, #344]	; (80017ec <main+0xd8c>)
 8001694:	220a      	movs	r2, #10
 8001696:	701a      	strb	r2, [r3, #0]
		  TIM1->CNT = 40;
 8001698:	4b53      	ldr	r3, [pc, #332]	; (80017e8 <main+0xd88>)
 800169a:	2228      	movs	r2, #40	; 0x28
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
	  }
	  if (gainSetting < -9)
 800169e:	4b53      	ldr	r3, [pc, #332]	; (80017ec <main+0xd8c>)
 80016a0:	f993 3000 	ldrsb.w	r3, [r3]
 80016a4:	f113 0f09 	cmn.w	r3, #9
 80016a8:	da06      	bge.n	80016b8 <main+0xc58>
	  {
		  gainSetting = -9;
 80016aa:	4b50      	ldr	r3, [pc, #320]	; (80017ec <main+0xd8c>)
 80016ac:	22f7      	movs	r2, #247	; 0xf7
 80016ae:	701a      	strb	r2, [r3, #0]
	  	  TIM1->CNT = -36;
 80016b0:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <main+0xd88>)
 80016b2:	f06f 0223 	mvn.w	r2, #35	; 0x23
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  gainSetting += 10; //gain from 1 to 20
 80016b8:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <main+0xd8c>)
 80016ba:	f993 3000 	ldrsb.w	r3, [r3]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	330a      	adds	r3, #10
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	b25a      	sxtb	r2, r3
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <main+0xd8c>)
 80016c8:	701a      	strb	r2, [r3, #0]
	  PTRgain = (float)(gainSetting)/20.0; //sets actual gain range (twenty steps on encoder)
 80016ca:	4b48      	ldr	r3, [pc, #288]	; (80017ec <main+0xd8c>)
 80016cc:	f993 3000 	ldrsb.w	r3, [r3]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80016dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e0:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <main+0xd7c>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]



	//MENU SCREEN - RAW JOYSTICK DATA
	if ((HAL_GPIO_ReadPin(MENU_SW_GPIO_Port, MENU_SW_Pin) == 0) && (menuPressed == FALSE))
 80016e6:	2104      	movs	r1, #4
 80016e8:	4841      	ldr	r0, [pc, #260]	; (80017f0 <main+0xd90>)
 80016ea:	f005 f86f 	bl	80067cc <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d112      	bne.n	800171a <main+0xcba>
 80016f4:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <main+0xd94>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10e      	bne.n	800171a <main+0xcba>
	{
		menuPressed = TRUE;
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <main+0xd94>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
		if (menuPage == MENU_AUX)
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <main+0xd98>)
 8001704:	f993 3000 	ldrsb.w	r3, [r3]
 8001708:	2b06      	cmp	r3, #6
 800170a:	d103      	bne.n	8001714 <main+0xcb4>
			menuPage = MENU_OFF;
 800170c:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <main+0xd98>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	e002      	b.n	800171a <main+0xcba>
		else
		{
		 	 menuPage = MENU_AUX;
 8001714:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <main+0xd98>)
 8001716:	2206      	movs	r2, #6
 8001718:	701a      	strb	r2, [r3, #0]
		}
	}
	if (HAL_GPIO_ReadPin(MENU_SW_GPIO_Port, MENU_SW_Pin))
 800171a:	2104      	movs	r1, #4
 800171c:	4834      	ldr	r0, [pc, #208]	; (80017f0 <main+0xd90>)
 800171e:	f005 f855 	bl	80067cc <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <main+0xcce>
	{
		menuPressed = FALSE;
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <main+0xd94>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
	}


	//PAN SCREEN
	if ((HAL_GPIO_ReadPin(PAN_SW_GPIO_Port, PAN_SW_Pin) == 0) && (panPressed == FALSE))
 800172e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001732:	482f      	ldr	r0, [pc, #188]	; (80017f0 <main+0xd90>)
 8001734:	f005 f84a 	bl	80067cc <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 808c 	bne.w	8001858 <main+0xdf8>
 8001740:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <main+0xd9c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f040 8087 	bne.w	8001858 <main+0xdf8>
	{
		panPressed = TRUE;
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <main+0xd9c>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]

	 	if (menuPage == MENU_PAN)
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <main+0xd98>)
 8001752:	f993 3000 	ldrsb.w	r3, [r3]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d175      	bne.n	8001846 <main+0xde6>
	 	{
	 		if (menuItem == ITEM_PAN_DRIFT)
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <main+0xda0>)
 800175c:	f993 3000 	ldrsb.w	r3, [r3]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10b      	bne.n	800177c <main+0xd1c>
	 		{
	 			if (menuSetting == SET_PAN_INACTIVE)
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <main+0xda4>)
 8001766:	f993 3000 	ldrsb.w	r3, [r3]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <main+0xd16>
	 				menuSetting = SET_PAN_DRIFT;
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <main+0xda4>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e002      	b.n	800177c <main+0xd1c>
	 			else
	 				menuSetting = SET_PAN_INACTIVE;
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <main+0xda4>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_PAN_DB_SIZE)
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <main+0xda0>)
 800177e:	f993 3000 	ldrsb.w	r3, [r3]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d10b      	bne.n	800179e <main+0xd3e>
	 		{
	 			if (menuSetting == SET_PAN_INACTIVE)
 8001786:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <main+0xda4>)
 8001788:	f993 3000 	ldrsb.w	r3, [r3]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <main+0xd38>
	 				menuSetting = SET_PAN_DB_SIZE;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <main+0xda4>)
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e002      	b.n	800179e <main+0xd3e>
	 			else
	 				menuSetting = SET_PAN_INACTIVE;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <main+0xda4>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_PAN_DB_CENTER)
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <main+0xda0>)
 80017a0:	f993 3000 	ldrsb.w	r3, [r3]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d132      	bne.n	800180e <main+0xdae>
	 		{
	 			if (menuSetting == SET_PAN_INACTIVE)
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <main+0xda4>)
 80017aa:	f993 3000 	ldrsb.w	r3, [r3]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d12a      	bne.n	8001808 <main+0xda8>
	 				menuSetting = SET_PAN_DB_CENTER;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <main+0xda4>)
 80017b4:	2203      	movs	r2, #3
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e029      	b.n	800180e <main+0xdae>
 80017ba:	bf00      	nop
 80017bc:	20001838 	.word	0x20001838
 80017c0:	200009c0 	.word	0x200009c0
 80017c4:	51eb851f 	.word	0x51eb851f
 80017c8:	200009ce 	.word	0x200009ce
 80017cc:	20000616 	.word	0x20000616
 80017d0:	2000135c 	.word	0x2000135c
 80017d4:	48000800 	.word	0x48000800
 80017d8:	20000610 	.word	0x20000610
 80017dc:	20000b10 	.word	0x20000b10
 80017e0:	20000618 	.word	0x20000618
 80017e4:	20001900 	.word	0x20001900
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	200009d6 	.word	0x200009d6
 80017f0:	48000400 	.word	0x48000400
 80017f4:	200008ec 	.word	0x200008ec
 80017f8:	20001356 	.word	0x20001356
 80017fc:	20000568 	.word	0x20000568
 8001800:	20000611 	.word	0x20000611
 8001804:	20000820 	.word	0x20000820
	 			else
	 				menuSetting = SET_PAN_INACTIVE;
 8001808:	4bb1      	ldr	r3, [pc, #708]	; (8001ad0 <main+0x1070>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_PAN_SENSE)
 800180e:	4bb1      	ldr	r3, [pc, #708]	; (8001ad4 <main+0x1074>)
 8001810:	f993 3000 	ldrsb.w	r3, [r3]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d10b      	bne.n	8001830 <main+0xdd0>
	 		{
	 			if (menuSetting == SET_PAN_INACTIVE)
 8001818:	4bad      	ldr	r3, [pc, #692]	; (8001ad0 <main+0x1070>)
 800181a:	f993 3000 	ldrsb.w	r3, [r3]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <main+0xdca>
	 				menuSetting = SET_PAN_SENSE;
 8001822:	4bab      	ldr	r3, [pc, #684]	; (8001ad0 <main+0x1070>)
 8001824:	2204      	movs	r2, #4
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e002      	b.n	8001830 <main+0xdd0>
	 			else
	 				menuSetting = SET_PAN_INACTIVE;
 800182a:	4ba9      	ldr	r3, [pc, #676]	; (8001ad0 <main+0x1070>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_PAN_EXIT)
 8001830:	4ba8      	ldr	r3, [pc, #672]	; (8001ad4 <main+0x1074>)
 8001832:	f993 3000 	ldrsb.w	r3, [r3]
 8001836:	2b04      	cmp	r3, #4
 8001838:	d10e      	bne.n	8001858 <main+0xdf8>
	 		{
	 			saveConfigData();
 800183a:	f002 fa91 	bl	8003d60 <saveConfigData>
	 			menuPage = MENU_MAIN;
 800183e:	4ba6      	ldr	r3, [pc, #664]	; (8001ad8 <main+0x1078>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	e008      	b.n	8001858 <main+0xdf8>
	 		}
	 	}
	 	else
	 	{
	 		menuPage = MENU_PAN;
 8001846:	4ba4      	ldr	r3, [pc, #656]	; (8001ad8 <main+0x1078>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
	 		menuItem = ITEM_PAN_DRIFT;
 800184c:	4ba1      	ldr	r3, [pc, #644]	; (8001ad4 <main+0x1074>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
	 		menuSetting = SET_PAN_INACTIVE;
 8001852:	4b9f      	ldr	r3, [pc, #636]	; (8001ad0 <main+0x1070>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (HAL_GPIO_ReadPin(PAN_SW_GPIO_Port, PAN_SW_Pin))
 8001858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185c:	489f      	ldr	r0, [pc, #636]	; (8001adc <main+0x107c>)
 800185e:	f004 ffb5 	bl	80067cc <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <main+0xe0e>
	{
	 	panPressed = FALSE;
 8001868:	4b9d      	ldr	r3, [pc, #628]	; (8001ae0 <main+0x1080>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
	}
	// END PAN SCREEN

	//TILT SCREEN
	if ((HAL_GPIO_ReadPin(TILT_SW_GPIO_Port, TILT_SW_Pin) == 0) && (tiltPressed == FALSE))
 800186e:	2140      	movs	r1, #64	; 0x40
 8001870:	489a      	ldr	r0, [pc, #616]	; (8001adc <main+0x107c>)
 8001872:	f004 ffab 	bl	80067cc <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d163      	bne.n	8001944 <main+0xee4>
 800187c:	4b99      	ldr	r3, [pc, #612]	; (8001ae4 <main+0x1084>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d15f      	bne.n	8001944 <main+0xee4>
	{
		tiltPressed = TRUE;
 8001884:	4b97      	ldr	r3, [pc, #604]	; (8001ae4 <main+0x1084>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]

	 	if (menuPage == MENU_TILT)
 800188a:	4b93      	ldr	r3, [pc, #588]	; (8001ad8 <main+0x1078>)
 800188c:	f993 3000 	ldrsb.w	r3, [r3]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d14e      	bne.n	8001932 <main+0xed2>
	 	{
	 		if (menuItem == ITEM_TILT_DRIFT)
 8001894:	4b8f      	ldr	r3, [pc, #572]	; (8001ad4 <main+0x1074>)
 8001896:	f993 3000 	ldrsb.w	r3, [r3]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10b      	bne.n	80018b6 <main+0xe56>
	 		{
	 			if (menuSetting == SET_TILT_INACTIVE)
 800189e:	4b8c      	ldr	r3, [pc, #560]	; (8001ad0 <main+0x1070>)
 80018a0:	f993 3000 	ldrsb.w	r3, [r3]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d103      	bne.n	80018b0 <main+0xe50>
	 				menuSetting = SET_TILT_DRIFT;
 80018a8:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <main+0x1070>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e002      	b.n	80018b6 <main+0xe56>
	 			else
	 				menuSetting = SET_TILT_INACTIVE;
 80018b0:	4b87      	ldr	r3, [pc, #540]	; (8001ad0 <main+0x1070>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_TILT_DB_SIZE)
 80018b6:	4b87      	ldr	r3, [pc, #540]	; (8001ad4 <main+0x1074>)
 80018b8:	f993 3000 	ldrsb.w	r3, [r3]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10b      	bne.n	80018d8 <main+0xe78>
	 		{
	 			if (menuSetting == SET_TILT_INACTIVE)
 80018c0:	4b83      	ldr	r3, [pc, #524]	; (8001ad0 <main+0x1070>)
 80018c2:	f993 3000 	ldrsb.w	r3, [r3]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <main+0xe72>
	 				menuSetting = SET_TILT_DB_SIZE;
 80018ca:	4b81      	ldr	r3, [pc, #516]	; (8001ad0 <main+0x1070>)
 80018cc:	2202      	movs	r2, #2
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e002      	b.n	80018d8 <main+0xe78>
	 			else
	 				menuSetting = SET_TILT_INACTIVE;
 80018d2:	4b7f      	ldr	r3, [pc, #508]	; (8001ad0 <main+0x1070>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_TILT_DB_CENTER)
 80018d8:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <main+0x1074>)
 80018da:	f993 3000 	ldrsb.w	r3, [r3]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d10b      	bne.n	80018fa <main+0xe9a>
	 		{
	 			if (menuSetting == SET_TILT_INACTIVE)
 80018e2:	4b7b      	ldr	r3, [pc, #492]	; (8001ad0 <main+0x1070>)
 80018e4:	f993 3000 	ldrsb.w	r3, [r3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <main+0xe94>
	 				menuSetting = SET_TILT_DB_CENTER;
 80018ec:	4b78      	ldr	r3, [pc, #480]	; (8001ad0 <main+0x1070>)
 80018ee:	2203      	movs	r2, #3
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e002      	b.n	80018fa <main+0xe9a>
	 			else
	 				menuSetting = SET_TILT_INACTIVE;
 80018f4:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <main+0x1070>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_TILT_SENSE)
 80018fa:	4b76      	ldr	r3, [pc, #472]	; (8001ad4 <main+0x1074>)
 80018fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d10b      	bne.n	800191c <main+0xebc>
	 		{
	 			if (menuSetting == SET_TILT_INACTIVE)
 8001904:	4b72      	ldr	r3, [pc, #456]	; (8001ad0 <main+0x1070>)
 8001906:	f993 3000 	ldrsb.w	r3, [r3]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <main+0xeb6>
	 				menuSetting = SET_TILT_SENSE;
 800190e:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <main+0x1070>)
 8001910:	2204      	movs	r2, #4
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e002      	b.n	800191c <main+0xebc>
	 			else
	 				menuSetting = SET_TILT_INACTIVE;
 8001916:	4b6e      	ldr	r3, [pc, #440]	; (8001ad0 <main+0x1070>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_TILT_EXIT)
 800191c:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <main+0x1074>)
 800191e:	f993 3000 	ldrsb.w	r3, [r3]
 8001922:	2b04      	cmp	r3, #4
 8001924:	d10e      	bne.n	8001944 <main+0xee4>
	 		{
	 			saveConfigData();
 8001926:	f002 fa1b 	bl	8003d60 <saveConfigData>
	 			menuPage = MENU_MAIN;
 800192a:	4b6b      	ldr	r3, [pc, #428]	; (8001ad8 <main+0x1078>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	e008      	b.n	8001944 <main+0xee4>
	 		}
	 	}
	 	else
	 	{
	 		menuPage = MENU_TILT;
 8001932:	4b69      	ldr	r3, [pc, #420]	; (8001ad8 <main+0x1078>)
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
	 		menuItem = ITEM_TILT_DRIFT;
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <main+0x1074>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	 		menuSetting = SET_TILT_INACTIVE;
 800193e:	4b64      	ldr	r3, [pc, #400]	; (8001ad0 <main+0x1070>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
		}
	}

	if (HAL_GPIO_ReadPin(TILT_SW_GPIO_Port, TILT_SW_Pin))
 8001944:	2140      	movs	r1, #64	; 0x40
 8001946:	4865      	ldr	r0, [pc, #404]	; (8001adc <main+0x107c>)
 8001948:	f004 ff40 	bl	80067cc <HAL_GPIO_ReadPin>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <main+0xef8>
	{
	 	tiltPressed = FALSE;
 8001952:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <main+0x1084>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
	}
	// END TILT SCREEN


	//ROLL SCREEN
	if ((HAL_GPIO_ReadPin(ROLL_SW_GPIO_Port, ROLL_SW_Pin) == 0) && (rollPressed == FALSE))
 8001958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800195c:	4862      	ldr	r0, [pc, #392]	; (8001ae8 <main+0x1088>)
 800195e:	f004 ff35 	bl	80067cc <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d163      	bne.n	8001a30 <main+0xfd0>
 8001968:	4b60      	ldr	r3, [pc, #384]	; (8001aec <main+0x108c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d15f      	bne.n	8001a30 <main+0xfd0>
	{
		rollPressed = TRUE;
 8001970:	4b5e      	ldr	r3, [pc, #376]	; (8001aec <main+0x108c>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]

	 	if (menuPage == MENU_ROLL)
 8001976:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <main+0x1078>)
 8001978:	f993 3000 	ldrsb.w	r3, [r3]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d14e      	bne.n	8001a1e <main+0xfbe>
	 	{
	 		if (menuItem == ITEM_ROLL_DRIFT)
 8001980:	4b54      	ldr	r3, [pc, #336]	; (8001ad4 <main+0x1074>)
 8001982:	f993 3000 	ldrsb.w	r3, [r3]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10b      	bne.n	80019a2 <main+0xf42>
	 		{
	 			if (menuSetting == SET_ROLL_INACTIVE)
 800198a:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <main+0x1070>)
 800198c:	f993 3000 	ldrsb.w	r3, [r3]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d103      	bne.n	800199c <main+0xf3c>
	 				menuSetting = SET_ROLL_DRIFT;
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <main+0x1070>)
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e002      	b.n	80019a2 <main+0xf42>
	 			else
	 				menuSetting = SET_ROLL_INACTIVE;
 800199c:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <main+0x1070>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_ROLL_DB_SIZE)
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <main+0x1074>)
 80019a4:	f993 3000 	ldrsb.w	r3, [r3]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d10b      	bne.n	80019c4 <main+0xf64>
	 		{
	 			if (menuSetting == SET_ROLL_INACTIVE)
 80019ac:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <main+0x1070>)
 80019ae:	f993 3000 	ldrsb.w	r3, [r3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d103      	bne.n	80019be <main+0xf5e>
	 				menuSetting = SET_ROLL_DB_SIZE;
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <main+0x1070>)
 80019b8:	2202      	movs	r2, #2
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e002      	b.n	80019c4 <main+0xf64>
	 			else
	 				menuSetting = SET_ROLL_INACTIVE;
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <main+0x1070>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_ROLL_DB_CENTER)
 80019c4:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <main+0x1074>)
 80019c6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d10b      	bne.n	80019e6 <main+0xf86>
	 		{
	 			if (menuSetting == SET_ROLL_INACTIVE)
 80019ce:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <main+0x1070>)
 80019d0:	f993 3000 	ldrsb.w	r3, [r3]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d103      	bne.n	80019e0 <main+0xf80>
	 				menuSetting = SET_ROLL_DB_CENTER;
 80019d8:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <main+0x1070>)
 80019da:	2203      	movs	r2, #3
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e002      	b.n	80019e6 <main+0xf86>
	 			else
	 				menuSetting = SET_ROLL_INACTIVE;
 80019e0:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <main+0x1070>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_ROLL_SENSE)
 80019e6:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <main+0x1074>)
 80019e8:	f993 3000 	ldrsb.w	r3, [r3]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d10b      	bne.n	8001a08 <main+0xfa8>
	 		{
	 			if (menuSetting == SET_ROLL_INACTIVE)
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <main+0x1070>)
 80019f2:	f993 3000 	ldrsb.w	r3, [r3]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <main+0xfa2>
	 				menuSetting = SET_ROLL_SENSE;
 80019fa:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <main+0x1070>)
 80019fc:	2204      	movs	r2, #4
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e002      	b.n	8001a08 <main+0xfa8>
	 			else
	 				menuSetting = SET_ROLL_INACTIVE;
 8001a02:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <main+0x1070>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_ROLL_EXIT)
 8001a08:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <main+0x1074>)
 8001a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d10e      	bne.n	8001a30 <main+0xfd0>
	 		{
	 			saveConfigData();
 8001a12:	f002 f9a5 	bl	8003d60 <saveConfigData>
	 			menuPage = MENU_MAIN;
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <main+0x1078>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e008      	b.n	8001a30 <main+0xfd0>
	 		}
	 	}
	 	else
	 	{
	 		menuPage = MENU_ROLL;
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <main+0x1078>)
 8001a20:	2203      	movs	r2, #3
 8001a22:	701a      	strb	r2, [r3, #0]
	 		menuItem = ITEM_ROLL_DRIFT;
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <main+0x1074>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
	 		menuSetting = SET_ROLL_INACTIVE;
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <main+0x1070>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (HAL_GPIO_ReadPin(ROLL_SW_GPIO_Port, ROLL_SW_Pin))
 8001a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a34:	482c      	ldr	r0, [pc, #176]	; (8001ae8 <main+0x1088>)
 8001a36:	f004 fec9 	bl	80067cc <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <main+0xfe6>
	{
	 	rollPressed = FALSE;
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <main+0x108c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]




	//ZOOM SCREEN
	if ((HAL_GPIO_ReadPin(ZOOM_SW_GPIO_Port, ZOOM_SW_Pin) == 0) && (zoomPressed == FALSE))
 8001a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4a:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <main+0x1088>)
 8001a4c:	f004 febe 	bl	80067cc <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d176      	bne.n	8001b44 <main+0x10e4>
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <main+0x1090>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d172      	bne.n	8001b44 <main+0x10e4>
	{
		zoomPressed = TRUE;
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <main+0x1090>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]

	 	if (menuPage == MENU_ZOOM)
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <main+0x1078>)
 8001a66:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d161      	bne.n	8001b32 <main+0x10d2>
	 	{
	 		if (menuItem == ITEM_ZOOM_DRIFT)
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <main+0x1074>)
 8001a70:	f993 3000 	ldrsb.w	r3, [r3]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10b      	bne.n	8001a90 <main+0x1030>
	 		{
	 			if (menuSetting == SET_ZOOM_INACTIVE)
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <main+0x1070>)
 8001a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <main+0x102a>
	 				menuSetting = SET_ZOOM_DRIFT;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <main+0x1070>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e002      	b.n	8001a90 <main+0x1030>
	 			else
	 				menuSetting = SET_ZOOM_INACTIVE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <main+0x1070>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_ZOOM_DB_SIZE)
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <main+0x1074>)
 8001a92:	f993 3000 	ldrsb.w	r3, [r3]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10b      	bne.n	8001ab2 <main+0x1052>
	 		{
	 			if (menuSetting == SET_ZOOM_INACTIVE)
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <main+0x1070>)
 8001a9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d103      	bne.n	8001aac <main+0x104c>
	 				menuSetting = SET_ZOOM_DB_SIZE;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <main+0x1070>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e002      	b.n	8001ab2 <main+0x1052>
	 			else
	 				menuSetting = SET_ZOOM_INACTIVE;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <main+0x1070>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_ZOOM_DB_CENTER)
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <main+0x1074>)
 8001ab4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d11e      	bne.n	8001afa <main+0x109a>
	 		{
	 			if (menuSetting == SET_ZOOM_INACTIVE)
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <main+0x1070>)
 8001abe:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <main+0x1094>
	 				menuSetting = SET_ZOOM_DB_CENTER;
 8001ac6:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <main+0x1070>)
 8001ac8:	2203      	movs	r2, #3
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e015      	b.n	8001afa <main+0x109a>
 8001ace:	bf00      	nop
 8001ad0:	20000820 	.word	0x20000820
 8001ad4:	20000611 	.word	0x20000611
 8001ad8:	20001356 	.word	0x20001356
 8001adc:	48000400 	.word	0x48000400
 8001ae0:	20000568 	.word	0x20000568
 8001ae4:	200009bc 	.word	0x200009bc
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	20000631 	.word	0x20000631
 8001af0:	20001357 	.word	0x20001357
	 			else
	 				menuSetting = SET_ZOOM_INACTIVE;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <main+0x1100>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_ZOOM_SENSE)
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <main+0x1104>)
 8001afc:	f993 3000 	ldrsb.w	r3, [r3]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d10b      	bne.n	8001b1c <main+0x10bc>
	 		{
	 			if (menuSetting == SET_ZOOM_INACTIVE)
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <main+0x1100>)
 8001b06:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d103      	bne.n	8001b16 <main+0x10b6>
	 				menuSetting = SET_ZOOM_SENSE;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <main+0x1100>)
 8001b10:	2204      	movs	r2, #4
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e002      	b.n	8001b1c <main+0x10bc>
	 			else
	 				menuSetting = SET_ZOOM_INACTIVE;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <main+0x1100>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
	 		}
	 		if (menuItem == ITEM_ZOOM_EXIT)
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <main+0x1104>)
 8001b1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d10e      	bne.n	8001b44 <main+0x10e4>
	 		{
	 			saveConfigData();
 8001b26:	f002 f91b 	bl	8003d60 <saveConfigData>
	 			menuPage = MENU_MAIN;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <main+0x1108>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e008      	b.n	8001b44 <main+0x10e4>
	 		}
	 	}
	 	else
	 	{
	 		menuPage = MENU_ZOOM;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <main+0x1108>)
 8001b34:	2204      	movs	r2, #4
 8001b36:	701a      	strb	r2, [r3, #0]
	 		menuItem = ITEM_ZOOM_DRIFT;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <main+0x1104>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
	 		menuSetting = SET_ZOOM_INACTIVE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <main+0x1100>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (HAL_GPIO_ReadPin(ZOOM_SW_GPIO_Port, ZOOM_SW_Pin))
 8001b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b48:	4808      	ldr	r0, [pc, #32]	; (8001b6c <main+0x110c>)
 8001b4a:	f004 fe3f 	bl	80067cc <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f43f a8c9 	beq.w	8000ce8 <main+0x288>
	{
	 	zoomPressed = FALSE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <main+0x1110>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
  {
 8001b5c:	f7ff b8c4 	b.w	8000ce8 <main+0x288>
 8001b60:	20000820 	.word	0x20000820
 8001b64:	20000611 	.word	0x20000611
 8001b68:	20001356 	.word	0x20001356
 8001b6c:	48000800 	.word	0x48000800
 8001b70:	20001357 	.word	0x20001357

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0a6      	sub	sp, #152	; 0x98
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b7e:	2228      	movs	r2, #40	; 0x28
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f008 fb94 	bl	800a2b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2258      	movs	r2, #88	; 0x58
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f008 fb86 	bl	800a2b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bac:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001bc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 ff08 	bl	80069e8 <HAL_RCC_OscConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001bde:	f002 f9d3 	bl	8003f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be2:	230f      	movs	r3, #15
 8001be4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be6:	2302      	movs	r3, #2
 8001be8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bf8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f005 fe08 	bl	8007814 <HAL_RCC_ClockConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c0a:	f002 f9bd 	bl	8003f88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <SystemClock_Config+0xd8>)
 8001c10:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV4;
 8001c16:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001c1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c20:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	4618      	mov	r0, r3
 8001c36:	f006 f823 	bl	8007c80 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001c40:	f002 f9a2 	bl	8003f88 <Error_Handler>
  }
}
 8001c44:	bf00      	nop
 8001c46:	3798      	adds	r7, #152	; 0x98
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	00323082 	.word	0x00323082

08001c50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
 8001c64:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001c66:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001c68:	4a43      	ldr	r2, [pc, #268]	; (8001d78 <MX_ADC2_Init+0x128>)
 8001c6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c6c:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c72:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c78:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8001c9e:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001ca0:	2205      	movs	r2, #5
 8001ca2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001ca4:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001cae:	2204      	movs	r2, #4
 8001cb0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001cb2:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cbe:	482d      	ldr	r0, [pc, #180]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001cc0:	f002 ffc0 	bl	8004c44 <HAL_ADC_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001cca:	f002 f95d 	bl	8003f88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4822      	ldr	r0, [pc, #136]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001cec:	f003 fac0 	bl	8005270 <HAL_ADC_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001cf6:	f002 f947 	bl	8003f88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d02:	463b      	mov	r3, r7
 8001d04:	4619      	mov	r1, r3
 8001d06:	481b      	ldr	r0, [pc, #108]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001d08:	f003 fab2 	bl	8005270 <HAL_ADC_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8001d12:	f002 f939 	bl	8003f88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d16:	2303      	movs	r3, #3
 8001d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4619      	mov	r1, r3
 8001d22:	4814      	ldr	r0, [pc, #80]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001d24:	f003 faa4 	bl	8005270 <HAL_ADC_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8001d2e:	f002 f92b 	bl	8003f88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d32:	2304      	movs	r3, #4
 8001d34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d36:	2304      	movs	r3, #4
 8001d38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001d40:	f003 fa96 	bl	8005270 <HAL_ADC_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 8001d4a:	f002 f91d 	bl	8003f88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d4e:	2305      	movs	r3, #5
 8001d50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d52:	2305      	movs	r3, #5
 8001d54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <MX_ADC2_Init+0x124>)
 8001d5c:	f003 fa88 	bl	8005270 <HAL_ADC_ConfigChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 8001d66:	f002 f90f 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200005c0 	.word	0x200005c0
 8001d78:	50000100 	.word	0x50000100

08001d7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001d82:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <MX_SPI2_Init+0x78>)
 8001d84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001d96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001db2:	2208      	movs	r2, #8
 8001db4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001dca:	2207      	movs	r2, #7
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_SPI2_Init+0x74>)
 8001ddc:	f006 f96e 	bl	80080bc <HAL_SPI_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001de6:	f002 f8cf 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000500 	.word	0x20000500
 8001df4:	40003800 	.word	0x40003800

08001df8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	2224      	movs	r2, #36	; 0x24
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f008 fa52 	bl	800a2b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <MX_TIM1_Init+0xac>)
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <MX_TIM1_Init+0xb0>)
 8001e1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MX_TIM1_Init+0xac>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <MX_TIM1_Init+0xac>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <MX_TIM1_Init+0xac>)
 8001e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_TIM1_Init+0xac>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <MX_TIM1_Init+0xac>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_TIM1_Init+0xac>)
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e42:	2303      	movs	r3, #3
 8001e44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e52:	230a      	movs	r3, #10
 8001e54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001e62:	230a      	movs	r3, #10
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_TIM1_Init+0xac>)
 8001e6e:	f006 fd63 	bl	8008938 <HAL_TIM_Encoder_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001e78:	f002 f886 	bl	8003f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_TIM1_Init+0xac>)
 8001e8e:	f007 f9fd 	bl	800928c <HAL_TIMEx_MasterConfigSynchronization>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001e98:	f002 f876 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3730      	adds	r7, #48	; 0x30
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000ac0 	.word	0x20000ac0
 8001ea8:	40012c00 	.word	0x40012c00

08001eac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ed4:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ee2:	2221      	movs	r2, #33	; 0x21
 8001ee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef2:	4814      	ldr	r0, [pc, #80]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ef4:	f006 fc58 	bl	80087a8 <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001efe:	f002 f843 	bl	8003f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480d      	ldr	r0, [pc, #52]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001f10:	f006 ff65 	bl	8008dde <HAL_TIM_ConfigClockSource>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f1a:	f002 f835 	bl	8003f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001f2c:	f007 f9ae 	bl	800928c <HAL_TIMEx_MasterConfigSynchronization>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f36:	f002 f827 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20001308 	.word	0x20001308

08001f48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	2224      	movs	r2, #36	; 0x24
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f008 f9aa 	bl	800a2b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <MX_TIM3_Init+0xa4>)
 8001f68:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <MX_TIM3_Init+0xa8>)
 8001f6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <MX_TIM3_Init+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <MX_TIM3_Init+0xa4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f78:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <MX_TIM3_Init+0xa4>)
 8001f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <MX_TIM3_Init+0xa4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <MX_TIM3_Init+0xa4>)
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f94:	2301      	movs	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001f9c:	230a      	movs	r3, #10
 8001f9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001fac:	230a      	movs	r3, #10
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480d      	ldr	r0, [pc, #52]	; (8001fec <MX_TIM3_Init+0xa4>)
 8001fb8:	f006 fcbe 	bl	8008938 <HAL_TIM_Encoder_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001fc2:	f001 ffe1 	bl	8003f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fce:	463b      	mov	r3, r7
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4806      	ldr	r0, [pc, #24]	; (8001fec <MX_TIM3_Init+0xa4>)
 8001fd4:	f007 f95a 	bl	800928c <HAL_TIMEx_MasterConfigSynchronization>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001fde:	f001 ffd3 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	3730      	adds	r7, #48	; 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200007d4 	.word	0x200007d4
 8001ff0:	40000400 	.word	0x40000400

08001ff4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2224      	movs	r2, #36	; 0x24
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f008 f954 	bl	800a2b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <MX_TIM8_Init+0xac>)
 8002014:	4a23      	ldr	r2, [pc, #140]	; (80020a4 <MX_TIM8_Init+0xb0>)
 8002016:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <MX_TIM8_Init+0xac>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <MX_TIM8_Init+0xac>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <MX_TIM8_Init+0xac>)
 8002026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <MX_TIM8_Init+0xac>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_TIM8_Init+0xac>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <MX_TIM8_Init+0xac>)
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800203e:	2303      	movs	r3, #3
 8002040:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002046:	2301      	movs	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800204e:	230a      	movs	r3, #10
 8002050:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002056:	2301      	movs	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800205e:	230a      	movs	r3, #10
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	4619      	mov	r1, r3
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <MX_TIM8_Init+0xac>)
 800206a:	f006 fc65 	bl	8008938 <HAL_TIM_Encoder_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002074:	f001 ff88 	bl	8003f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002084:	463b      	mov	r3, r7
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_TIM8_Init+0xac>)
 800208a:	f007 f8ff 	bl	800928c <HAL_TIMEx_MasterConfigSynchronization>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002094:	f001 ff78 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	3730      	adds	r7, #48	; 0x30
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	2000056c 	.word	0x2000056c
 80020a4:	40013400 	.word	0x40013400

080020a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020ae:	4a15      	ldr	r2, [pc, #84]	; (8002104 <MX_USART2_UART_Init+0x5c>)
 80020b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020ce:	220c      	movs	r2, #12
 80020d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <MX_USART2_UART_Init+0x58>)
 80020ec:	f007 f978 	bl	80093e0 <HAL_UART_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020f6:	f001 ff47 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200013b0 	.word	0x200013b0
 8002104:	40004400 	.word	0x40004400

08002108 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_USB_PCD_Init+0x44>)
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <MX_USB_PCD_Init+0x48>)
 8002110:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USB_PCD_Init+0x44>)
 8002114:	2208      	movs	r2, #8
 8002116:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USB_PCD_Init+0x44>)
 800211a:	2202      	movs	r2, #2
 800211c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_USB_PCD_Init+0x44>)
 8002120:	2202      	movs	r2, #2
 8002122:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USB_PCD_Init+0x44>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_USB_PCD_Init+0x44>)
 800212c:	2200      	movs	r2, #0
 800212e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USB_PCD_Init+0x44>)
 8002132:	2200      	movs	r2, #0
 8002134:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_USB_PCD_Init+0x44>)
 8002138:	f004 fb78 	bl	800682c <HAL_PCD_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8002142:	f001 ff21 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000154c 	.word	0x2000154c
 8002150:	40005c00 	.word	0x40005c00

08002154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_DMA_Init+0x38>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <MX_DMA_Init+0x38>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6153      	str	r3, [r2, #20]
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_DMA_Init+0x38>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2038      	movs	r0, #56	; 0x38
 8002178:	f003 fd65 	bl	8005c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800217c:	2038      	movs	r0, #56	; 0x38
 800217e:	f003 fd7e 	bl	8005c7e <HAL_NVIC_EnableIRQ>

}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000

08002190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a6:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <MX_GPIO_Init+0x108>)
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <MX_GPIO_Init+0x108>)
 80021ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021b0:	6153      	str	r3, [r2, #20]
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <MX_GPIO_Init+0x108>)
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <MX_GPIO_Init+0x108>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	4a35      	ldr	r2, [pc, #212]	; (8002298 <MX_GPIO_Init+0x108>)
 80021c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c8:	6153      	str	r3, [r2, #20]
 80021ca:	4b33      	ldr	r3, [pc, #204]	; (8002298 <MX_GPIO_Init+0x108>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	4b30      	ldr	r3, [pc, #192]	; (8002298 <MX_GPIO_Init+0x108>)
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	4a2f      	ldr	r2, [pc, #188]	; (8002298 <MX_GPIO_Init+0x108>)
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	6153      	str	r3, [r2, #20]
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <MX_GPIO_Init+0x108>)
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <MX_GPIO_Init+0x108>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4a29      	ldr	r2, [pc, #164]	; (8002298 <MX_GPIO_Init+0x108>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6153      	str	r3, [r2, #20]
 80021fa:	4b27      	ldr	r3, [pc, #156]	; (8002298 <MX_GPIO_Init+0x108>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STAT_GPIO_Port, LED_STAT_Pin, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220c:	4823      	ldr	r0, [pc, #140]	; (800229c <MX_GPIO_Init+0x10c>)
 800220e:	f004 faf5 	bl	80067fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SERVO_Pin|OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8002218:	4821      	ldr	r0, [pc, #132]	; (80022a0 <MX_GPIO_Init+0x110>)
 800221a:	f004 faef 	bl	80067fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STAT_Pin */
  GPIO_InitStruct.Pin = LED_STAT_Pin;
 800221e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_STAT_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	4819      	ldr	r0, [pc, #100]	; (800229c <MX_GPIO_Init+0x10c>)
 8002238:	f004 f93e 	bl	80064b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUX_SW_Pin ZOOM_SW_Pin SERVO_SW_Pin ROLL_A_Pin
                           ROLL_B_Pin ROLL_SW_Pin */
  GPIO_InitStruct.Pin = AUX_SW_Pin|ZOOM_SW_Pin|SERVO_SW_Pin|ROLL_A_Pin
 800223c:	f641 7304 	movw	r3, #7940	; 0x1f04
 8002240:	617b      	str	r3, [r7, #20]
                          |ROLL_B_Pin|ROLL_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002246:	2301      	movs	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4812      	ldr	r0, [pc, #72]	; (800229c <MX_GPIO_Init+0x10c>)
 8002252:	f004 f931 	bl	80064b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MENU_SW_Pin TILT_SW_Pin PAN_A_Pin PAN_B_Pin
                           PAN_SW_Pin */
  GPIO_InitStruct.Pin = MENU_SW_Pin|TILT_SW_Pin|PAN_A_Pin|PAN_B_Pin
 8002256:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 800225a:	617b      	str	r3, [r7, #20]
                          |PAN_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002260:	2301      	movs	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <MX_GPIO_Init+0x110>)
 800226c:	f004 f924 	bl	80064b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SERVO_Pin OLED_CS_Pin OLED_DC_Pin OLED_RST_Pin */
  GPIO_InitStruct.Pin = LED_SERVO_Pin|OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin;
 8002270:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_GPIO_Init+0x110>)
 800228a:	f004 f915 	bl	80064b8 <HAL_GPIO_Init>

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	48000800 	.word	0x48000800
 80022a0:	48000400 	.word	0x48000400

080022a4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	adcValue[0] = adc_buf[0];
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80022ae:	881a      	ldrh	r2, [r3, #0]
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_ADC_ConvCpltCallback+0x40>)
 80022b2:	801a      	strh	r2, [r3, #0]
	adcValue[1] = adc_buf[1];
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80022b6:	885a      	ldrh	r2, [r3, #2]
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_ADC_ConvCpltCallback+0x40>)
 80022ba:	805a      	strh	r2, [r3, #2]
	adcValue[2] = adc_buf[2];
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80022be:	889a      	ldrh	r2, [r3, #4]
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_ADC_ConvCpltCallback+0x40>)
 80022c2:	809a      	strh	r2, [r3, #4]
	adcValue[3] = adc_buf[3];
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80022c6:	88da      	ldrh	r2, [r3, #6]
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_ADC_ConvCpltCallback+0x40>)
 80022ca:	80da      	strh	r2, [r3, #6]
	adcValue[4] = adc_buf[4];
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80022ce:	891a      	ldrh	r2, [r3, #8]
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <HAL_ADC_ConvCpltCallback+0x40>)
 80022d2:	811a      	strh	r2, [r3, #8]
	//adcValue[5] = adc_buf[5];

}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	20000b34 	.word	0x20000b34
 80022e4:	20001904 	.word	0x20001904

080022e8 <updateTiltEncoder>:

void updateTiltEncoder (void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
	int32_t encoderValue;
	encoderValue = ((TIM3->CNT)>>2);
 80022ee:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <updateTiltEncoder+0x17c>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	607b      	str	r3, [r7, #4]

	val = 0;
 80022f6:	4b5c      	ldr	r3, [pc, #368]	; (8002468 <updateTiltEncoder+0x180>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
	if (encoderValue > lastTiltEncoderValue)
 80022fc:	4b5b      	ldr	r3, [pc, #364]	; (800246c <updateTiltEncoder+0x184>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	dd02      	ble.n	800230c <updateTiltEncoder+0x24>
		val = 1;
 8002306:	4b58      	ldr	r3, [pc, #352]	; (8002468 <updateTiltEncoder+0x180>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
	if (encoderValue < lastTiltEncoderValue)
 800230c:	4b57      	ldr	r3, [pc, #348]	; (800246c <updateTiltEncoder+0x184>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	da02      	bge.n	800231c <updateTiltEncoder+0x34>
		val = -1;
 8002316:	4b54      	ldr	r3, [pc, #336]	; (8002468 <updateTiltEncoder+0x180>)
 8002318:	22ff      	movs	r2, #255	; 0xff
 800231a:	701a      	strb	r2, [r3, #0]

	lastTiltEncoderValue = encoderValue;
 800231c:	4a53      	ldr	r2, [pc, #332]	; (800246c <updateTiltEncoder+0x184>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6013      	str	r3, [r2, #0]



	if (menuPage == MENU_TILT)
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <updateTiltEncoder+0x188>)
 8002324:	f993 3000 	ldrsb.w	r3, [r3]
 8002328:	2b02      	cmp	r3, #2
 800232a:	f040 8095 	bne.w	8002458 <updateTiltEncoder+0x170>
	{
		if (menuSetting == SET_TILT_INACTIVE)
 800232e:	4b51      	ldr	r3, [pc, #324]	; (8002474 <updateTiltEncoder+0x18c>)
 8002330:	f993 3000 	ldrsb.w	r3, [r3]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d11c      	bne.n	8002372 <updateTiltEncoder+0x8a>
		{
			menuItem += val;
 8002338:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <updateTiltEncoder+0x190>)
 800233a:	f993 3000 	ldrsb.w	r3, [r3]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b49      	ldr	r3, [pc, #292]	; (8002468 <updateTiltEncoder+0x180>)
 8002342:	f993 3000 	ldrsb.w	r3, [r3]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4413      	add	r3, r2
 800234a:	b2db      	uxtb	r3, r3
 800234c:	b25a      	sxtb	r2, r3
 800234e:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <updateTiltEncoder+0x190>)
 8002350:	701a      	strb	r2, [r3, #0]
			if (menuItem < 0)
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <updateTiltEncoder+0x190>)
 8002354:	f993 3000 	ldrsb.w	r3, [r3]
 8002358:	2b00      	cmp	r3, #0
 800235a:	da02      	bge.n	8002362 <updateTiltEncoder+0x7a>
				menuItem = 0;
 800235c:	4b46      	ldr	r3, [pc, #280]	; (8002478 <updateTiltEncoder+0x190>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
			if (menuItem > 4)
 8002362:	4b45      	ldr	r3, [pc, #276]	; (8002478 <updateTiltEncoder+0x190>)
 8002364:	f993 3000 	ldrsb.w	r3, [r3]
 8002368:	2b04      	cmp	r3, #4
 800236a:	dd02      	ble.n	8002372 <updateTiltEncoder+0x8a>
				menuItem = 4;
 800236c:	4b42      	ldr	r3, [pc, #264]	; (8002478 <updateTiltEncoder+0x190>)
 800236e:	2204      	movs	r2, #4
 8002370:	701a      	strb	r2, [r3, #0]
		}

		if (menuSetting == SET_TILT_DRIFT)
 8002372:	4b40      	ldr	r3, [pc, #256]	; (8002474 <updateTiltEncoder+0x18c>)
 8002374:	f993 3000 	ldrsb.w	r3, [r3]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d117      	bne.n	80023ac <updateTiltEncoder+0xc4>
		{
			configData.tiltOffset += val;
 800237c:	4b3f      	ldr	r3, [pc, #252]	; (800247c <updateTiltEncoder+0x194>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4a39      	ldr	r2, [pc, #228]	; (8002468 <updateTiltEncoder+0x180>)
 8002382:	f992 2000 	ldrsb.w	r2, [r2]
 8002386:	4413      	add	r3, r2
 8002388:	4a3c      	ldr	r2, [pc, #240]	; (800247c <updateTiltEncoder+0x194>)
 800238a:	6113      	str	r3, [r2, #16]
			if (configData.tiltOffset > 20)
 800238c:	4b3b      	ldr	r3, [pc, #236]	; (800247c <updateTiltEncoder+0x194>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b14      	cmp	r3, #20
 8002392:	dd02      	ble.n	800239a <updateTiltEncoder+0xb2>
				configData.tiltOffset = 20;
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <updateTiltEncoder+0x194>)
 8002396:	2214      	movs	r2, #20
 8002398:	611a      	str	r2, [r3, #16]
			if (configData.tiltOffset < -20)
 800239a:	4b38      	ldr	r3, [pc, #224]	; (800247c <updateTiltEncoder+0x194>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f113 0f14 	cmn.w	r3, #20
 80023a2:	da03      	bge.n	80023ac <updateTiltEncoder+0xc4>
				configData.tiltOffset = -20;
 80023a4:	4b35      	ldr	r3, [pc, #212]	; (800247c <updateTiltEncoder+0x194>)
 80023a6:	f06f 0213 	mvn.w	r2, #19
 80023aa:	611a      	str	r2, [r3, #16]
		}

		if (menuSetting == SET_TILT_DB_SIZE)
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <updateTiltEncoder+0x18c>)
 80023ae:	f993 3000 	ldrsb.w	r3, [r3]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d115      	bne.n	80023e2 <updateTiltEncoder+0xfa>
		{
			configData.tiltDBsize += val;
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <updateTiltEncoder+0x194>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <updateTiltEncoder+0x180>)
 80023bc:	f992 2000 	ldrsb.w	r2, [r2]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a2e      	ldr	r2, [pc, #184]	; (800247c <updateTiltEncoder+0x194>)
 80023c4:	6153      	str	r3, [r2, #20]
			if (configData.tiltDBsize > 25)
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <updateTiltEncoder+0x194>)
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b19      	cmp	r3, #25
 80023cc:	dd02      	ble.n	80023d4 <updateTiltEncoder+0xec>
				configData.tiltDBsize = 25;
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <updateTiltEncoder+0x194>)
 80023d0:	2219      	movs	r2, #25
 80023d2:	615a      	str	r2, [r3, #20]
			if (configData.tiltDBsize < 1)
 80023d4:	4b29      	ldr	r3, [pc, #164]	; (800247c <updateTiltEncoder+0x194>)
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	dc02      	bgt.n	80023e2 <updateTiltEncoder+0xfa>
				configData.tiltDBsize = 1;
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <updateTiltEncoder+0x194>)
 80023de:	2201      	movs	r2, #1
 80023e0:	615a      	str	r2, [r3, #20]
		}

		if (menuSetting == SET_TILT_DB_CENTER)
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <updateTiltEncoder+0x18c>)
 80023e4:	f993 3000 	ldrsb.w	r3, [r3]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d11a      	bne.n	8002422 <updateTiltEncoder+0x13a>
		{
			configData.tiltDBcenter += val;
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <updateTiltEncoder+0x194>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <updateTiltEncoder+0x180>)
 80023f2:	f992 2000 	ldrsb.w	r2, [r2]
 80023f6:	4413      	add	r3, r2
 80023f8:	4a20      	ldr	r2, [pc, #128]	; (800247c <updateTiltEncoder+0x194>)
 80023fa:	6193      	str	r3, [r2, #24]
			if (configData.tiltDBcenter > 2200)
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <updateTiltEncoder+0x194>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f640 0298 	movw	r2, #2200	; 0x898
 8002404:	4293      	cmp	r3, r2
 8002406:	dd03      	ble.n	8002410 <updateTiltEncoder+0x128>
				configData.tiltDBcenter = 2200;
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <updateTiltEncoder+0x194>)
 800240a:	f640 0298 	movw	r2, #2200	; 0x898
 800240e:	619a      	str	r2, [r3, #24]
			if (configData.tiltDBcenter < 1800)
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <updateTiltEncoder+0x194>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002418:	da03      	bge.n	8002422 <updateTiltEncoder+0x13a>
				configData.tiltDBcenter = 1800;
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <updateTiltEncoder+0x194>)
 800241c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002420:	619a      	str	r2, [r3, #24]
		}

		if (menuSetting == SET_TILT_SENSE)
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <updateTiltEncoder+0x18c>)
 8002424:	f993 3000 	ldrsb.w	r3, [r3]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d115      	bne.n	8002458 <updateTiltEncoder+0x170>
		{
			configData.tiltSense += val;
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <updateTiltEncoder+0x194>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <updateTiltEncoder+0x180>)
 8002432:	f992 2000 	ldrsb.w	r2, [r2]
 8002436:	4413      	add	r3, r2
 8002438:	4a10      	ldr	r2, [pc, #64]	; (800247c <updateTiltEncoder+0x194>)
 800243a:	61d3      	str	r3, [r2, #28]
			if (configData.tiltSense > 1)
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <updateTiltEncoder+0x194>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	2b01      	cmp	r3, #1
 8002442:	dd02      	ble.n	800244a <updateTiltEncoder+0x162>
				configData.tiltSense = 1;
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <updateTiltEncoder+0x194>)
 8002446:	2201      	movs	r2, #1
 8002448:	61da      	str	r2, [r3, #28]
			if (configData.tiltSense < 0)
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <updateTiltEncoder+0x194>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	da02      	bge.n	8002458 <updateTiltEncoder+0x170>
				configData.tiltSense = 0;
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <updateTiltEncoder+0x194>)
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
		}
	}

}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40000400 	.word	0x40000400
 8002468:	200009cd 	.word	0x200009cd
 800246c:	200004f4 	.word	0x200004f4
 8002470:	20001356 	.word	0x20001356
 8002474:	20000820 	.word	0x20000820
 8002478:	20000611 	.word	0x20000611
 800247c:	2000135c 	.word	0x2000135c

08002480 <updateZoomEncoder>:

void updateZoomEncoder (void)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
	int32_t encoderValue;
	encoderValue = ((TIM8->CNT)>>2);
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <updateZoomEncoder+0x17c>)
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	607b      	str	r3, [r7, #4]

	val = 0;
 800248e:	4b5c      	ldr	r3, [pc, #368]	; (8002600 <updateZoomEncoder+0x180>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
	if (encoderValue > lastZoomEncoderValue)
 8002494:	4b5b      	ldr	r3, [pc, #364]	; (8002604 <updateZoomEncoder+0x184>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	dd02      	ble.n	80024a4 <updateZoomEncoder+0x24>
		val = 1;
 800249e:	4b58      	ldr	r3, [pc, #352]	; (8002600 <updateZoomEncoder+0x180>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
	if (encoderValue < lastZoomEncoderValue)
 80024a4:	4b57      	ldr	r3, [pc, #348]	; (8002604 <updateZoomEncoder+0x184>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	da02      	bge.n	80024b4 <updateZoomEncoder+0x34>
		val = -1;
 80024ae:	4b54      	ldr	r3, [pc, #336]	; (8002600 <updateZoomEncoder+0x180>)
 80024b0:	22ff      	movs	r2, #255	; 0xff
 80024b2:	701a      	strb	r2, [r3, #0]

	lastZoomEncoderValue = encoderValue;
 80024b4:	4a53      	ldr	r2, [pc, #332]	; (8002604 <updateZoomEncoder+0x184>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]



	if (menuPage == MENU_ZOOM)
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <updateZoomEncoder+0x188>)
 80024bc:	f993 3000 	ldrsb.w	r3, [r3]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	f040 8095 	bne.w	80025f0 <updateZoomEncoder+0x170>
	{
		if (menuSetting == SET_ZOOM_INACTIVE)
 80024c6:	4b51      	ldr	r3, [pc, #324]	; (800260c <updateZoomEncoder+0x18c>)
 80024c8:	f993 3000 	ldrsb.w	r3, [r3]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11c      	bne.n	800250a <updateZoomEncoder+0x8a>
		{
			menuItem += val;
 80024d0:	4b4f      	ldr	r3, [pc, #316]	; (8002610 <updateZoomEncoder+0x190>)
 80024d2:	f993 3000 	ldrsb.w	r3, [r3]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b49      	ldr	r3, [pc, #292]	; (8002600 <updateZoomEncoder+0x180>)
 80024da:	f993 3000 	ldrsb.w	r3, [r3]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	b25a      	sxtb	r2, r3
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <updateZoomEncoder+0x190>)
 80024e8:	701a      	strb	r2, [r3, #0]
			if (menuItem < 0)
 80024ea:	4b49      	ldr	r3, [pc, #292]	; (8002610 <updateZoomEncoder+0x190>)
 80024ec:	f993 3000 	ldrsb.w	r3, [r3]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	da02      	bge.n	80024fa <updateZoomEncoder+0x7a>
				menuItem = 0;
 80024f4:	4b46      	ldr	r3, [pc, #280]	; (8002610 <updateZoomEncoder+0x190>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
			if (menuItem > 4)
 80024fa:	4b45      	ldr	r3, [pc, #276]	; (8002610 <updateZoomEncoder+0x190>)
 80024fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002500:	2b04      	cmp	r3, #4
 8002502:	dd02      	ble.n	800250a <updateZoomEncoder+0x8a>
				menuItem = 4;
 8002504:	4b42      	ldr	r3, [pc, #264]	; (8002610 <updateZoomEncoder+0x190>)
 8002506:	2204      	movs	r2, #4
 8002508:	701a      	strb	r2, [r3, #0]
		}

		if (menuSetting == SET_ZOOM_DRIFT)
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <updateZoomEncoder+0x18c>)
 800250c:	f993 3000 	ldrsb.w	r3, [r3]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d117      	bne.n	8002544 <updateZoomEncoder+0xc4>
		{
			configData.zoomOffset += val;
 8002514:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <updateZoomEncoder+0x194>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	4a39      	ldr	r2, [pc, #228]	; (8002600 <updateZoomEncoder+0x180>)
 800251a:	f992 2000 	ldrsb.w	r2, [r2]
 800251e:	4413      	add	r3, r2
 8002520:	4a3c      	ldr	r2, [pc, #240]	; (8002614 <updateZoomEncoder+0x194>)
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
			if (configData.zoomOffset > ZOOM_DRIFT_LIMIT)
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <updateZoomEncoder+0x194>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	2b28      	cmp	r3, #40	; 0x28
 800252a:	dd02      	ble.n	8002532 <updateZoomEncoder+0xb2>
				configData.zoomOffset = ZOOM_DRIFT_LIMIT;
 800252c:	4b39      	ldr	r3, [pc, #228]	; (8002614 <updateZoomEncoder+0x194>)
 800252e:	2228      	movs	r2, #40	; 0x28
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
			if (configData.zoomOffset < -ZOOM_DRIFT_LIMIT)
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <updateZoomEncoder+0x194>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f113 0f28 	cmn.w	r3, #40	; 0x28
 800253a:	da03      	bge.n	8002544 <updateZoomEncoder+0xc4>
				configData.zoomOffset = -ZOOM_DRIFT_LIMIT;
 800253c:	4b35      	ldr	r3, [pc, #212]	; (8002614 <updateZoomEncoder+0x194>)
 800253e:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
		}

		if (menuSetting == SET_ZOOM_DB_SIZE)
 8002544:	4b31      	ldr	r3, [pc, #196]	; (800260c <updateZoomEncoder+0x18c>)
 8002546:	f993 3000 	ldrsb.w	r3, [r3]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d115      	bne.n	800257a <updateZoomEncoder+0xfa>
		{
			configData.zoomDBsize += val;
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <updateZoomEncoder+0x194>)
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002552:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <updateZoomEncoder+0x180>)
 8002554:	f992 2000 	ldrsb.w	r2, [r2]
 8002558:	4413      	add	r3, r2
 800255a:	4a2e      	ldr	r2, [pc, #184]	; (8002614 <updateZoomEncoder+0x194>)
 800255c:	6353      	str	r3, [r2, #52]	; 0x34
			if (configData.zoomDBsize > 25)
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <updateZoomEncoder+0x194>)
 8002560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002562:	2b19      	cmp	r3, #25
 8002564:	dd02      	ble.n	800256c <updateZoomEncoder+0xec>
				configData.zoomDBsize = 25;
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <updateZoomEncoder+0x194>)
 8002568:	2219      	movs	r2, #25
 800256a:	635a      	str	r2, [r3, #52]	; 0x34
			if (configData.zoomDBsize < 1)
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <updateZoomEncoder+0x194>)
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	2b00      	cmp	r3, #0
 8002572:	dc02      	bgt.n	800257a <updateZoomEncoder+0xfa>
				configData.zoomDBsize = 1;
 8002574:	4b27      	ldr	r3, [pc, #156]	; (8002614 <updateZoomEncoder+0x194>)
 8002576:	2201      	movs	r2, #1
 8002578:	635a      	str	r2, [r3, #52]	; 0x34
		}

		if (menuSetting == SET_ZOOM_DB_CENTER)
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <updateZoomEncoder+0x18c>)
 800257c:	f993 3000 	ldrsb.w	r3, [r3]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d11a      	bne.n	80025ba <updateZoomEncoder+0x13a>
		{
			configData.zoomDBcenter += val;
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <updateZoomEncoder+0x194>)
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <updateZoomEncoder+0x180>)
 800258a:	f992 2000 	ldrsb.w	r2, [r2]
 800258e:	4413      	add	r3, r2
 8002590:	4a20      	ldr	r2, [pc, #128]	; (8002614 <updateZoomEncoder+0x194>)
 8002592:	6393      	str	r3, [r2, #56]	; 0x38
			if (configData.zoomDBcenter > 2200)
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <updateZoomEncoder+0x194>)
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	f640 0298 	movw	r2, #2200	; 0x898
 800259c:	4293      	cmp	r3, r2
 800259e:	dd03      	ble.n	80025a8 <updateZoomEncoder+0x128>
				configData.zoomDBcenter = 2200;
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <updateZoomEncoder+0x194>)
 80025a2:	f640 0298 	movw	r2, #2200	; 0x898
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
			if (configData.zoomDBcenter < 1800)
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <updateZoomEncoder+0x194>)
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80025b0:	da03      	bge.n	80025ba <updateZoomEncoder+0x13a>
				configData.zoomDBcenter = 1800;
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <updateZoomEncoder+0x194>)
 80025b4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38
		}

		if (menuSetting == SET_ZOOM_SENSE)
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <updateZoomEncoder+0x18c>)
 80025bc:	f993 3000 	ldrsb.w	r3, [r3]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d115      	bne.n	80025f0 <updateZoomEncoder+0x170>
		{
			configData.zoomSense += val;
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <updateZoomEncoder+0x194>)
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <updateZoomEncoder+0x180>)
 80025ca:	f992 2000 	ldrsb.w	r2, [r2]
 80025ce:	4413      	add	r3, r2
 80025d0:	4a10      	ldr	r2, [pc, #64]	; (8002614 <updateZoomEncoder+0x194>)
 80025d2:	63d3      	str	r3, [r2, #60]	; 0x3c
			if (configData.zoomSense > 1)
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <updateZoomEncoder+0x194>)
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	dd02      	ble.n	80025e2 <updateZoomEncoder+0x162>
				configData.zoomSense = 1;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <updateZoomEncoder+0x194>)
 80025de:	2201      	movs	r2, #1
 80025e0:	63da      	str	r2, [r3, #60]	; 0x3c
			if (configData.zoomSense < 0)
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <updateZoomEncoder+0x194>)
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	da02      	bge.n	80025f0 <updateZoomEncoder+0x170>
				configData.zoomSense = 0;
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <updateZoomEncoder+0x194>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}

}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40013400 	.word	0x40013400
 8002600:	200009cd 	.word	0x200009cd
 8002604:	20000b2c 	.word	0x20000b2c
 8002608:	20001356 	.word	0x20001356
 800260c:	20000820 	.word	0x20000820
 8002610:	20000611 	.word	0x20000611
 8002614:	2000135c 	.word	0x2000135c

08002618 <readPanEncoder>:

int8_t readPanEncoder(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0

  static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};


  prevNextCode <<= 2;
 800261e:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <readPanEncoder+0xb8>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <readPanEncoder+0xb8>)
 8002628:	701a      	strb	r2, [r3, #0]

	uint8_t pinClock = HAL_GPIO_ReadPin(PAN_A_GPIO_Port, PAN_A_Pin);
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	4829      	ldr	r0, [pc, #164]	; (80026d4 <readPanEncoder+0xbc>)
 800262e:	f004 f8cd 	bl	80067cc <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
	uint8_t pinData = HAL_GPIO_ReadPin(PAN_B_GPIO_Port, PAN_B_Pin);
 8002636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800263a:	4826      	ldr	r0, [pc, #152]	; (80026d4 <readPanEncoder+0xbc>)
 800263c:	f004 f8c6 	bl	80067cc <HAL_GPIO_ReadPin>
 8002640:	4603      	mov	r3, r0
 8002642:	71bb      	strb	r3, [r7, #6]


  if (pinData) prevNextCode |= 0x02;
 8002644:	79bb      	ldrb	r3, [r7, #6]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <readPanEncoder+0x40>
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <readPanEncoder+0xb8>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <readPanEncoder+0xb8>)
 8002656:	701a      	strb	r2, [r3, #0]
  if (pinClock) prevNextCode |= 0x01;
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <readPanEncoder+0x54>
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <readPanEncoder+0xb8>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	b2da      	uxtb	r2, r3
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <readPanEncoder+0xb8>)
 800266a:	701a      	strb	r2, [r3, #0]
  prevNextCode &= 0x0f;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <readPanEncoder+0xb8>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <readPanEncoder+0xb8>)
 8002678:	701a      	strb	r2, [r3, #0]

   // If valid then store as 16 bit data.
   if  (rot_enc_table[prevNextCode] ) {
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <readPanEncoder+0xb8>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <readPanEncoder+0xc0>)
 8002682:	569b      	ldrsb	r3, [r3, r2]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01d      	beq.n	80026c4 <readPanEncoder+0xac>
      store <<= 4;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <readPanEncoder+0xc4>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <readPanEncoder+0xc4>)
 8002692:	801a      	strh	r2, [r3, #0]
      store |= prevNextCode;
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <readPanEncoder+0xb8>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b29a      	uxth	r2, r3
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <readPanEncoder+0xc4>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <readPanEncoder+0xc4>)
 80026a4:	801a      	strh	r2, [r3, #0]
      //if (store==0xd42b) return 1;
      //if (store==0xe817) return -1;
      if ((store&0xff)==0x2b) return -1;
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <readPanEncoder+0xc4>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b2b      	cmp	r3, #43	; 0x2b
 80026ae:	d102      	bne.n	80026b6 <readPanEncoder+0x9e>
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295
 80026b4:	e007      	b.n	80026c6 <readPanEncoder+0xae>
      if ((store&0xff)==0x17) return 1;
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <readPanEncoder+0xc4>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b17      	cmp	r3, #23
 80026be:	d101      	bne.n	80026c4 <readPanEncoder+0xac>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <readPanEncoder+0xae>
   }
   return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200000bc 	.word	0x200000bc
 80026d4:	48000400 	.word	0x48000400
 80026d8:	20000004 	.word	0x20000004
 80026dc:	200000be 	.word	0x200000be

080026e0 <updatePanEncoder>:

void updatePanEncoder (void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
	val = readPanEncoder();
 80026e4:	f7ff ff98 	bl	8002618 <readPanEncoder>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b4f      	ldr	r3, [pc, #316]	; (800282c <updatePanEncoder+0x14c>)
 80026ee:	701a      	strb	r2, [r3, #0]

	if (menuPage == MENU_PAN)
 80026f0:	4b4f      	ldr	r3, [pc, #316]	; (8002830 <updatePanEncoder+0x150>)
 80026f2:	f993 3000 	ldrsb.w	r3, [r3]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	f040 8095 	bne.w	8002826 <updatePanEncoder+0x146>
	{
		if (menuSetting == SET_PAN_INACTIVE)
 80026fc:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <updatePanEncoder+0x154>)
 80026fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11c      	bne.n	8002740 <updatePanEncoder+0x60>
		{
			menuItem += val;
 8002706:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <updatePanEncoder+0x158>)
 8002708:	f993 3000 	ldrsb.w	r3, [r3]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <updatePanEncoder+0x14c>)
 8002710:	f993 3000 	ldrsb.w	r3, [r3]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4413      	add	r3, r2
 8002718:	b2db      	uxtb	r3, r3
 800271a:	b25a      	sxtb	r2, r3
 800271c:	4b46      	ldr	r3, [pc, #280]	; (8002838 <updatePanEncoder+0x158>)
 800271e:	701a      	strb	r2, [r3, #0]
			if (menuItem < 0)
 8002720:	4b45      	ldr	r3, [pc, #276]	; (8002838 <updatePanEncoder+0x158>)
 8002722:	f993 3000 	ldrsb.w	r3, [r3]
 8002726:	2b00      	cmp	r3, #0
 8002728:	da02      	bge.n	8002730 <updatePanEncoder+0x50>
				menuItem = 0;
 800272a:	4b43      	ldr	r3, [pc, #268]	; (8002838 <updatePanEncoder+0x158>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
			if (menuItem > 4)
 8002730:	4b41      	ldr	r3, [pc, #260]	; (8002838 <updatePanEncoder+0x158>)
 8002732:	f993 3000 	ldrsb.w	r3, [r3]
 8002736:	2b04      	cmp	r3, #4
 8002738:	dd02      	ble.n	8002740 <updatePanEncoder+0x60>
				menuItem = 4;
 800273a:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <updatePanEncoder+0x158>)
 800273c:	2204      	movs	r2, #4
 800273e:	701a      	strb	r2, [r3, #0]
		}

		if (menuSetting == SET_PAN_DRIFT)
 8002740:	4b3c      	ldr	r3, [pc, #240]	; (8002834 <updatePanEncoder+0x154>)
 8002742:	f993 3000 	ldrsb.w	r3, [r3]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d117      	bne.n	800277a <updatePanEncoder+0x9a>
		{
			configData.panOffset += val;
 800274a:	4b3c      	ldr	r3, [pc, #240]	; (800283c <updatePanEncoder+0x15c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a37      	ldr	r2, [pc, #220]	; (800282c <updatePanEncoder+0x14c>)
 8002750:	f992 2000 	ldrsb.w	r2, [r2]
 8002754:	4413      	add	r3, r2
 8002756:	4a39      	ldr	r2, [pc, #228]	; (800283c <updatePanEncoder+0x15c>)
 8002758:	6013      	str	r3, [r2, #0]
			if (configData.panOffset > 20)
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <updatePanEncoder+0x15c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b14      	cmp	r3, #20
 8002760:	dd02      	ble.n	8002768 <updatePanEncoder+0x88>
				configData.panOffset = 20;
 8002762:	4b36      	ldr	r3, [pc, #216]	; (800283c <updatePanEncoder+0x15c>)
 8002764:	2214      	movs	r2, #20
 8002766:	601a      	str	r2, [r3, #0]
			if (configData.panOffset < -20)
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <updatePanEncoder+0x15c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f113 0f14 	cmn.w	r3, #20
 8002770:	da03      	bge.n	800277a <updatePanEncoder+0x9a>
				configData.panOffset = -20;
 8002772:	4b32      	ldr	r3, [pc, #200]	; (800283c <updatePanEncoder+0x15c>)
 8002774:	f06f 0213 	mvn.w	r2, #19
 8002778:	601a      	str	r2, [r3, #0]
		}

		if (menuSetting == SET_PAN_DB_SIZE)
 800277a:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <updatePanEncoder+0x154>)
 800277c:	f993 3000 	ldrsb.w	r3, [r3]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d115      	bne.n	80027b0 <updatePanEncoder+0xd0>
		{
			configData.panDBsize += val;
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <updatePanEncoder+0x15c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a28      	ldr	r2, [pc, #160]	; (800282c <updatePanEncoder+0x14c>)
 800278a:	f992 2000 	ldrsb.w	r2, [r2]
 800278e:	4413      	add	r3, r2
 8002790:	4a2a      	ldr	r2, [pc, #168]	; (800283c <updatePanEncoder+0x15c>)
 8002792:	6053      	str	r3, [r2, #4]
			if (configData.panDBsize > 25)
 8002794:	4b29      	ldr	r3, [pc, #164]	; (800283c <updatePanEncoder+0x15c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b19      	cmp	r3, #25
 800279a:	dd02      	ble.n	80027a2 <updatePanEncoder+0xc2>
				configData.panDBsize = 25;
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <updatePanEncoder+0x15c>)
 800279e:	2219      	movs	r2, #25
 80027a0:	605a      	str	r2, [r3, #4]
			if (configData.panDBsize < 1)
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <updatePanEncoder+0x15c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	dc02      	bgt.n	80027b0 <updatePanEncoder+0xd0>
				configData.panDBsize = 1;
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <updatePanEncoder+0x15c>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	605a      	str	r2, [r3, #4]
		}

		if (menuSetting == SET_PAN_DB_CENTER)
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <updatePanEncoder+0x154>)
 80027b2:	f993 3000 	ldrsb.w	r3, [r3]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d11a      	bne.n	80027f0 <updatePanEncoder+0x110>
		{
			configData.panDBcenter += val;
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <updatePanEncoder+0x15c>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4a1b      	ldr	r2, [pc, #108]	; (800282c <updatePanEncoder+0x14c>)
 80027c0:	f992 2000 	ldrsb.w	r2, [r2]
 80027c4:	4413      	add	r3, r2
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <updatePanEncoder+0x15c>)
 80027c8:	6093      	str	r3, [r2, #8]
			if (configData.panDBcenter > 2200)
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <updatePanEncoder+0x15c>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f640 0298 	movw	r2, #2200	; 0x898
 80027d2:	4293      	cmp	r3, r2
 80027d4:	dd03      	ble.n	80027de <updatePanEncoder+0xfe>
				configData.panDBcenter = 2200;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <updatePanEncoder+0x15c>)
 80027d8:	f640 0298 	movw	r2, #2200	; 0x898
 80027dc:	609a      	str	r2, [r3, #8]
			if (configData.panDBcenter < 1800)
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <updatePanEncoder+0x15c>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80027e6:	da03      	bge.n	80027f0 <updatePanEncoder+0x110>
				configData.panDBcenter = 1800;
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <updatePanEncoder+0x15c>)
 80027ea:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80027ee:	609a      	str	r2, [r3, #8]
		}
		if (menuSetting == SET_PAN_SENSE)
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <updatePanEncoder+0x154>)
 80027f2:	f993 3000 	ldrsb.w	r3, [r3]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d115      	bne.n	8002826 <updatePanEncoder+0x146>
		{
			configData.panSense += val;
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <updatePanEncoder+0x15c>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a0b      	ldr	r2, [pc, #44]	; (800282c <updatePanEncoder+0x14c>)
 8002800:	f992 2000 	ldrsb.w	r2, [r2]
 8002804:	4413      	add	r3, r2
 8002806:	4a0d      	ldr	r2, [pc, #52]	; (800283c <updatePanEncoder+0x15c>)
 8002808:	60d3      	str	r3, [r2, #12]
			if (configData.panSense > 1)
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <updatePanEncoder+0x15c>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	dd02      	ble.n	8002818 <updatePanEncoder+0x138>
				configData.panSense = 1;
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <updatePanEncoder+0x15c>)
 8002814:	2201      	movs	r2, #1
 8002816:	60da      	str	r2, [r3, #12]
			if (configData.panSense < 0)
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <updatePanEncoder+0x15c>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	da02      	bge.n	8002826 <updatePanEncoder+0x146>
				configData.panSense = 0;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <updatePanEncoder+0x15c>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
		}
	}
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200009cd 	.word	0x200009cd
 8002830:	20001356 	.word	0x20001356
 8002834:	20000820 	.word	0x20000820
 8002838:	20000611 	.word	0x20000611
 800283c:	2000135c 	.word	0x2000135c

08002840 <readRollEncoder>:



int8_t readRollEncoder(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0

  static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};


  prevNextCodeRoll <<= 2;
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <readRollEncoder+0xb8>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <readRollEncoder+0xb8>)
 8002850:	701a      	strb	r2, [r3, #0]

	uint8_t pinClock = HAL_GPIO_ReadPin(ROLL_A_GPIO_Port, ROLL_A_Pin);
 8002852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002856:	4829      	ldr	r0, [pc, #164]	; (80028fc <readRollEncoder+0xbc>)
 8002858:	f003 ffb8 	bl	80067cc <HAL_GPIO_ReadPin>
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
	uint8_t pinData = HAL_GPIO_ReadPin(ROLL_B_GPIO_Port, ROLL_B_Pin);
 8002860:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002864:	4825      	ldr	r0, [pc, #148]	; (80028fc <readRollEncoder+0xbc>)
 8002866:	f003 ffb1 	bl	80067cc <HAL_GPIO_ReadPin>
 800286a:	4603      	mov	r3, r0
 800286c:	71bb      	strb	r3, [r7, #6]


  if (pinData) prevNextCodeRoll |= 0x02;
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <readRollEncoder+0x42>
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <readRollEncoder+0xb8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <readRollEncoder+0xb8>)
 8002880:	701a      	strb	r2, [r3, #0]
  if (pinClock) prevNextCodeRoll |= 0x01;
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d006      	beq.n	8002896 <readRollEncoder+0x56>
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <readRollEncoder+0xb8>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <readRollEncoder+0xb8>)
 8002894:	701a      	strb	r2, [r3, #0]
  prevNextCodeRoll &= 0x0f;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <readRollEncoder+0xb8>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <readRollEncoder+0xb8>)
 80028a2:	701a      	strb	r2, [r3, #0]

   // If valid then store as 16 bit data.
   if  (rot_enc_table[prevNextCodeRoll] ) {
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <readRollEncoder+0xb8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <readRollEncoder+0xc0>)
 80028ac:	569b      	ldrsb	r3, [r3, r2]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01d      	beq.n	80028ee <readRollEncoder+0xae>
      storeRoll <<= 4;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <readRollEncoder+0xc4>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <readRollEncoder+0xc4>)
 80028bc:	801a      	strh	r2, [r3, #0]
      storeRoll |= prevNextCodeRoll;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <readRollEncoder+0xb8>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <readRollEncoder+0xc4>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <readRollEncoder+0xc4>)
 80028ce:	801a      	strh	r2, [r3, #0]
      //if (store==0xd42b) return 1;
      //if (store==0xe817) return -1;
      if ((storeRoll&0xff)==0x2b) return -1;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <readRollEncoder+0xc4>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b2b      	cmp	r3, #43	; 0x2b
 80028d8:	d102      	bne.n	80028e0 <readRollEncoder+0xa0>
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	e007      	b.n	80028f0 <readRollEncoder+0xb0>
      if ((storeRoll&0xff)==0x17) return 1;
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <readRollEncoder+0xc4>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b17      	cmp	r3, #23
 80028e8:	d101      	bne.n	80028ee <readRollEncoder+0xae>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <readRollEncoder+0xb0>
   }
   return 0;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200000c0 	.word	0x200000c0
 80028fc:	48000800 	.word	0x48000800
 8002900:	20000014 	.word	0x20000014
 8002904:	200000c2 	.word	0x200000c2

08002908 <updateRollEncoder>:

void updateRollEncoder (void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	val = readRollEncoder();
 800290c:	f7ff ff98 	bl	8002840 <readRollEncoder>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <updateRollEncoder+0x14c>)
 8002916:	701a      	strb	r2, [r3, #0]

	if (menuPage == MENU_ROLL)
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <updateRollEncoder+0x150>)
 800291a:	f993 3000 	ldrsb.w	r3, [r3]
 800291e:	2b03      	cmp	r3, #3
 8002920:	f040 8095 	bne.w	8002a4e <updateRollEncoder+0x146>
	{
		if (menuSetting == SET_ROLL_INACTIVE)
 8002924:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <updateRollEncoder+0x154>)
 8002926:	f993 3000 	ldrsb.w	r3, [r3]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11c      	bne.n	8002968 <updateRollEncoder+0x60>
		{
			menuItem += val;
 800292e:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <updateRollEncoder+0x158>)
 8002930:	f993 3000 	ldrsb.w	r3, [r3]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <updateRollEncoder+0x14c>)
 8002938:	f993 3000 	ldrsb.w	r3, [r3]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4413      	add	r3, r2
 8002940:	b2db      	uxtb	r3, r3
 8002942:	b25a      	sxtb	r2, r3
 8002944:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <updateRollEncoder+0x158>)
 8002946:	701a      	strb	r2, [r3, #0]
			if (menuItem < 0)
 8002948:	4b45      	ldr	r3, [pc, #276]	; (8002a60 <updateRollEncoder+0x158>)
 800294a:	f993 3000 	ldrsb.w	r3, [r3]
 800294e:	2b00      	cmp	r3, #0
 8002950:	da02      	bge.n	8002958 <updateRollEncoder+0x50>
				menuItem = 0;
 8002952:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <updateRollEncoder+0x158>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
			if (menuItem > 4)
 8002958:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <updateRollEncoder+0x158>)
 800295a:	f993 3000 	ldrsb.w	r3, [r3]
 800295e:	2b04      	cmp	r3, #4
 8002960:	dd02      	ble.n	8002968 <updateRollEncoder+0x60>
				menuItem = 4;
 8002962:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <updateRollEncoder+0x158>)
 8002964:	2204      	movs	r2, #4
 8002966:	701a      	strb	r2, [r3, #0]
		}

		if (menuSetting == SET_ROLL_DRIFT)
 8002968:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <updateRollEncoder+0x154>)
 800296a:	f993 3000 	ldrsb.w	r3, [r3]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d117      	bne.n	80029a2 <updateRollEncoder+0x9a>
		{
			configData.rollOffset += val;
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <updateRollEncoder+0x15c>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a37      	ldr	r2, [pc, #220]	; (8002a54 <updateRollEncoder+0x14c>)
 8002978:	f992 2000 	ldrsb.w	r2, [r2]
 800297c:	4413      	add	r3, r2
 800297e:	4a39      	ldr	r2, [pc, #228]	; (8002a64 <updateRollEncoder+0x15c>)
 8002980:	6213      	str	r3, [r2, #32]
			if (configData.rollOffset > 20)
 8002982:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <updateRollEncoder+0x15c>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	2b14      	cmp	r3, #20
 8002988:	dd02      	ble.n	8002990 <updateRollEncoder+0x88>
				configData.rollOffset = 20;
 800298a:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <updateRollEncoder+0x15c>)
 800298c:	2214      	movs	r2, #20
 800298e:	621a      	str	r2, [r3, #32]
			if (configData.rollOffset < -20)
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <updateRollEncoder+0x15c>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f113 0f14 	cmn.w	r3, #20
 8002998:	da03      	bge.n	80029a2 <updateRollEncoder+0x9a>
				configData.rollOffset = -20;
 800299a:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <updateRollEncoder+0x15c>)
 800299c:	f06f 0213 	mvn.w	r2, #19
 80029a0:	621a      	str	r2, [r3, #32]
		}

		if (menuSetting == SET_ROLL_DB_SIZE)
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <updateRollEncoder+0x154>)
 80029a4:	f993 3000 	ldrsb.w	r3, [r3]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d115      	bne.n	80029d8 <updateRollEncoder+0xd0>
		{
			configData.rollDBsize += val;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <updateRollEncoder+0x15c>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <updateRollEncoder+0x14c>)
 80029b2:	f992 2000 	ldrsb.w	r2, [r2]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <updateRollEncoder+0x15c>)
 80029ba:	6253      	str	r3, [r2, #36]	; 0x24
			if (configData.rollDBsize > 25)
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <updateRollEncoder+0x15c>)
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	2b19      	cmp	r3, #25
 80029c2:	dd02      	ble.n	80029ca <updateRollEncoder+0xc2>
				configData.rollDBsize = 25;
 80029c4:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <updateRollEncoder+0x15c>)
 80029c6:	2219      	movs	r2, #25
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
			if (configData.rollDBsize < 1)
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <updateRollEncoder+0x15c>)
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	dc02      	bgt.n	80029d8 <updateRollEncoder+0xd0>
				configData.rollDBsize = 1;
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <updateRollEncoder+0x15c>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if (menuSetting == SET_ROLL_DB_CENTER)
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <updateRollEncoder+0x154>)
 80029da:	f993 3000 	ldrsb.w	r3, [r3]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d11a      	bne.n	8002a18 <updateRollEncoder+0x110>
		{
			configData.rollDBcenter += val;
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <updateRollEncoder+0x15c>)
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <updateRollEncoder+0x14c>)
 80029e8:	f992 2000 	ldrsb.w	r2, [r2]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <updateRollEncoder+0x15c>)
 80029f0:	6293      	str	r3, [r2, #40]	; 0x28
			if (configData.rollDBcenter > 2200)
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <updateRollEncoder+0x15c>)
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	f640 0298 	movw	r2, #2200	; 0x898
 80029fa:	4293      	cmp	r3, r2
 80029fc:	dd03      	ble.n	8002a06 <updateRollEncoder+0xfe>
				configData.rollDBcenter = 2200;
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <updateRollEncoder+0x15c>)
 8002a00:	f640 0298 	movw	r2, #2200	; 0x898
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
			if (configData.rollDBcenter < 1800)
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <updateRollEncoder+0x15c>)
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002a0e:	da03      	bge.n	8002a18 <updateRollEncoder+0x110>
				configData.rollDBcenter = 1800;
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <updateRollEncoder+0x15c>)
 8002a12:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
		}
		if (menuSetting == SET_ROLL_SENSE)
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <updateRollEncoder+0x154>)
 8002a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d115      	bne.n	8002a4e <updateRollEncoder+0x146>
		{
			configData.rollSense += val;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <updateRollEncoder+0x15c>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <updateRollEncoder+0x14c>)
 8002a28:	f992 2000 	ldrsb.w	r2, [r2]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <updateRollEncoder+0x15c>)
 8002a30:	62d3      	str	r3, [r2, #44]	; 0x2c
			if (configData.rollSense > 1)
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <updateRollEncoder+0x15c>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	dd02      	ble.n	8002a40 <updateRollEncoder+0x138>
				configData.rollSense = 1;
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <updateRollEncoder+0x15c>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
			if (configData.rollSense < 0)
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <updateRollEncoder+0x15c>)
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	da02      	bge.n	8002a4e <updateRollEncoder+0x146>
				configData.rollSense = 0;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <updateRollEncoder+0x15c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200009cd 	.word	0x200009cd
 8002a58:	20001356 	.word	0x20001356
 8002a5c:	20000820 	.word	0x20000820
 8002a60:	20000611 	.word	0x20000611
 8002a64:	2000135c 	.word	0x2000135c

08002a68 <updateDisplay>:
		zoomOffset = 50;
}


void updateDisplay (void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af02      	add	r7, sp, #8
	//display header
	ssd1306_Fill(Black);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f001 fb58 	bl	8004124 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8002a74:	2100      	movs	r1, #0
 8002a76:	2002      	movs	r0, #2
 8002a78:	f001 fcae 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"SUPRA   CAM OP  %s", VER);
 8002a7c:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <updateDisplay+0x9c>)
 8002a7e:	4922      	ldr	r1, [pc, #136]	; (8002b08 <updateDisplay+0xa0>)
 8002a80:	4822      	ldr	r0, [pc, #136]	; (8002b0c <updateDisplay+0xa4>)
 8002a82:	f007 fc1d 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8002a86:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <updateDisplay+0xa8>)
 8002a88:	2301      	movs	r3, #1
 8002a8a:	ca06      	ldmia	r2, {r1, r2}
 8002a8c:	481f      	ldr	r0, [pc, #124]	; (8002b0c <updateDisplay+0xa4>)
 8002a8e:	f001 fc7d 	bl	800438c <ssd1306_WriteString>
	//ssd1306_WriteString("SUPRA   CAM OP  %s", Font_6x8, White);
	ssd1306_Line(1,8,127,8,White);
 8002a92:	2301      	movs	r3, #1
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2308      	movs	r3, #8
 8002a98:	227f      	movs	r2, #127	; 0x7f
 8002a9a:	2108      	movs	r1, #8
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f001 fcb3 	bl	8004408 <ssd1306_Line>


	switch (menuPage)
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <updateDisplay+0xac>)
 8002aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d823      	bhi.n	8002af4 <updateDisplay+0x8c>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <updateDisplay+0x4c>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ad1 	.word	0x08002ad1
 8002ab8:	08002ad7 	.word	0x08002ad7
 8002abc:	08002add 	.word	0x08002add
 8002ac0:	08002ae3 	.word	0x08002ae3
 8002ac4:	08002ae9 	.word	0x08002ae9
 8002ac8:	08002af5 	.word	0x08002af5
 8002acc:	08002aef 	.word	0x08002aef
	{
	case MENU_OFF:
		menuOff();
 8002ad0:	f000 f822 	bl	8002b18 <menuOff>
		break;
 8002ad4:	e010      	b.n	8002af8 <updateDisplay+0x90>

	case MENU_PAN:
		menuPan();
 8002ad6:	f000 fc91 	bl	80033fc <menuPan>
		break;
 8002ada:	e00d      	b.n	8002af8 <updateDisplay+0x90>

	case MENU_TILT:
		menuTilt();
 8002adc:	f000 fd7e 	bl	80035dc <menuTilt>
		break;
 8002ae0:	e00a      	b.n	8002af8 <updateDisplay+0x90>

	case MENU_ROLL:
		menuRoll();
 8002ae2:	f000 fe6b 	bl	80037bc <menuRoll>
		break;
 8002ae6:	e007      	b.n	8002af8 <updateDisplay+0x90>

	case MENU_ZOOM:
		menuZoom();
 8002ae8:	f000 ff58 	bl	800399c <menuZoom>
		break;
 8002aec:	e004      	b.n	8002af8 <updateDisplay+0x90>

	case MENU_AUX:
		menuAux();
 8002aee:	f001 f845 	bl	8003b7c <menuAux>
		break;
 8002af2:	e001      	b.n	8002af8 <updateDisplay+0x90>

	default:
		menuOff();
 8002af4:	f000 f810 	bl	8002b18 <menuOff>
	}



	ssd1306_UpdateScreen();
 8002af8:	f001 fb38 	bl	800416c <ssd1306_UpdateScreen>

}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	0800ab38 	.word	0x0800ab38
 8002b08:	0800ab40 	.word	0x0800ab40
 8002b0c:	200019ec 	.word	0x200019ec
 8002b10:	20000024 	.word	0x20000024
 8002b14:	20001356 	.word	0x20001356

08002b18 <menuOff>:

void menuOff (void)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af02      	add	r7, sp, #8
	uint16_t p,r,c;

	//PAN MAIN DISPLAY
	p = 60;
 8002b1e:	233c      	movs	r3, #60	; 0x3c
 8002b20:	80fb      	strh	r3, [r7, #6]
	r = 12;
 8002b22:	230c      	movs	r3, #12
 8002b24:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(2, r);
 8002b26:	88bb      	ldrh	r3, [r7, #4]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f001 fc53 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"PAN:            %04d", panDisplayValue);
 8002b32:	4b9e      	ldr	r3, [pc, #632]	; (8002dac <menuOff+0x294>)
 8002b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	499d      	ldr	r1, [pc, #628]	; (8002db0 <menuOff+0x298>)
 8002b3c:	489d      	ldr	r0, [pc, #628]	; (8002db4 <menuOff+0x29c>)
 8002b3e:	f007 fbbf 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8002b42:	4a9d      	ldr	r2, [pc, #628]	; (8002db8 <menuOff+0x2a0>)
 8002b44:	2301      	movs	r3, #1
 8002b46:	ca06      	ldmia	r2, {r1, r2}
 8002b48:	489a      	ldr	r0, [pc, #616]	; (8002db4 <menuOff+0x29c>)
 8002b4a:	f001 fc1f 	bl	800438c <ssd1306_WriteString>
	ssd1306_Line(p-25,r+5,p+25,r+5,White);
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	3b19      	subs	r3, #25
 8002b54:	b2d8      	uxtb	r0, r3
 8002b56:	88bb      	ldrh	r3, [r7, #4]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	3305      	adds	r3, #5
 8002b5c:	b2d9      	uxtb	r1, r3
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3319      	adds	r3, #25
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	88bb      	ldrh	r3, [r7, #4]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	3305      	adds	r3, #5
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2401      	movs	r4, #1
 8002b70:	9400      	str	r4, [sp, #0]
 8002b72:	f001 fc49 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p-25,r+4,p-25,r+6,White);
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3b19      	subs	r3, #25
 8002b7c:	b2d8      	uxtb	r0, r3
 8002b7e:	88bb      	ldrh	r3, [r7, #4]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3304      	adds	r3, #4
 8002b84:	b2d9      	uxtb	r1, r3
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3b19      	subs	r3, #25
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	88bb      	ldrh	r3, [r7, #4]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3306      	adds	r3, #6
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2401      	movs	r4, #1
 8002b98:	9400      	str	r4, [sp, #0]
 8002b9a:	f001 fc35 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p,r+4,p,r+6,White);
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	b2d8      	uxtb	r0, r3
 8002ba2:	88bb      	ldrh	r3, [r7, #4]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	b2d9      	uxtb	r1, r3
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	88bb      	ldrh	r3, [r7, #4]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3306      	adds	r3, #6
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2401      	movs	r4, #1
 8002bb8:	9400      	str	r4, [sp, #0]
 8002bba:	f001 fc25 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p+25,r+4,p+25,r+6,White);
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3319      	adds	r3, #25
 8002bc4:	b2d8      	uxtb	r0, r3
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	3304      	adds	r3, #4
 8002bcc:	b2d9      	uxtb	r1, r3
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3319      	adds	r3, #25
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	88bb      	ldrh	r3, [r7, #4]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3306      	adds	r3, #6
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2401      	movs	r4, #1
 8002be0:	9400      	str	r4, [sp, #0]
 8002be2:	f001 fc11 	bl	8004408 <ssd1306_Line>
	c = (uint16_t)(panDisplayValue / 20)+p;
 8002be6:	4b71      	ldr	r3, [pc, #452]	; (8002dac <menuOff+0x294>)
 8002be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bec:	4a73      	ldr	r2, [pc, #460]	; (8002dbc <menuOff+0x2a4>)
 8002bee:	fb82 1203 	smull	r1, r2, r2, r3
 8002bf2:	10d2      	asrs	r2, r2, #3
 8002bf4:	17db      	asrs	r3, r3, #31
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	4413      	add	r3, r2
 8002c00:	807b      	strh	r3, [r7, #2]
	ssd1306_Line(c-3,r-1,c+3,r-1,White);
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3b03      	subs	r3, #3
 8002c08:	b2d8      	uxtb	r0, r3
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b2d9      	uxtb	r1, r3
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3303      	adds	r3, #3
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	88bb      	ldrh	r3, [r7, #4]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2401      	movs	r4, #1
 8002c24:	9400      	str	r4, [sp, #0]
 8002c26:	f001 fbef 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-2,r,c+2,r,White);
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	3b02      	subs	r3, #2
 8002c30:	b2d8      	uxtb	r0, r3
 8002c32:	88bb      	ldrh	r3, [r7, #4]
 8002c34:	b2d9      	uxtb	r1, r3
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	88bb      	ldrh	r3, [r7, #4]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2401      	movs	r4, #1
 8002c44:	9400      	str	r4, [sp, #0]
 8002c46:	f001 fbdf 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-1,r+1,c+1,r+1,White);
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b2d8      	uxtb	r0, r3
 8002c52:	88bb      	ldrh	r3, [r7, #4]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	b2d9      	uxtb	r1, r3
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	88bb      	ldrh	r3, [r7, #4]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2401      	movs	r4, #1
 8002c6c:	9400      	str	r4, [sp, #0]
 8002c6e:	f001 fbcb 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c,r+2,c,r+2,White);
 8002c72:	887b      	ldrh	r3, [r7, #2]
 8002c74:	b2d8      	uxtb	r0, r3
 8002c76:	88bb      	ldrh	r3, [r7, #4]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	b2d9      	uxtb	r1, r3
 8002c7e:	887b      	ldrh	r3, [r7, #2]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	88bb      	ldrh	r3, [r7, #4]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3302      	adds	r3, #2
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2401      	movs	r4, #1
 8002c8c:	9400      	str	r4, [sp, #0]
 8002c8e:	f001 fbbb 	bl	8004408 <ssd1306_Line>

	//TILT MAIN DISPLAY
	p = 60;
 8002c92:	233c      	movs	r3, #60	; 0x3c
 8002c94:	80fb      	strh	r3, [r7, #6]
	r = 22;
 8002c96:	2316      	movs	r3, #22
 8002c98:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(2, r);
 8002c9a:	88bb      	ldrh	r3, [r7, #4]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	f001 fb99 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"TILT:           %04d", tiltDisplayValue);
 8002ca6:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <menuOff+0x2a8>)
 8002ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4945      	ldr	r1, [pc, #276]	; (8002dc4 <menuOff+0x2ac>)
 8002cb0:	4840      	ldr	r0, [pc, #256]	; (8002db4 <menuOff+0x29c>)
 8002cb2:	f007 fb05 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8002cb6:	4a40      	ldr	r2, [pc, #256]	; (8002db8 <menuOff+0x2a0>)
 8002cb8:	2301      	movs	r3, #1
 8002cba:	ca06      	ldmia	r2, {r1, r2}
 8002cbc:	483d      	ldr	r0, [pc, #244]	; (8002db4 <menuOff+0x29c>)
 8002cbe:	f001 fb65 	bl	800438c <ssd1306_WriteString>
	ssd1306_Line(p-25,r+5,p+25,r+5,White);
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3b19      	subs	r3, #25
 8002cc8:	b2d8      	uxtb	r0, r3
 8002cca:	88bb      	ldrh	r3, [r7, #4]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3305      	adds	r3, #5
 8002cd0:	b2d9      	uxtb	r1, r3
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	3319      	adds	r3, #25
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	88bb      	ldrh	r3, [r7, #4]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	3305      	adds	r3, #5
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2401      	movs	r4, #1
 8002ce4:	9400      	str	r4, [sp, #0]
 8002ce6:	f001 fb8f 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p-25,r+4,p-25,r+6,White);
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	3b19      	subs	r3, #25
 8002cf0:	b2d8      	uxtb	r0, r3
 8002cf2:	88bb      	ldrh	r3, [r7, #4]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	b2d9      	uxtb	r1, r3
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3b19      	subs	r3, #25
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	88bb      	ldrh	r3, [r7, #4]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	3306      	adds	r3, #6
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2401      	movs	r4, #1
 8002d0c:	9400      	str	r4, [sp, #0]
 8002d0e:	f001 fb7b 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p,r+4,p,r+6,White);
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	b2d8      	uxtb	r0, r3
 8002d16:	88bb      	ldrh	r3, [r7, #4]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	b2d9      	uxtb	r1, r3
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	88bb      	ldrh	r3, [r7, #4]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	3306      	adds	r3, #6
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2401      	movs	r4, #1
 8002d2c:	9400      	str	r4, [sp, #0]
 8002d2e:	f001 fb6b 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p+25,r+4,p+25,r+6,White);
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	3319      	adds	r3, #25
 8002d38:	b2d8      	uxtb	r0, r3
 8002d3a:	88bb      	ldrh	r3, [r7, #4]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	3304      	adds	r3, #4
 8002d40:	b2d9      	uxtb	r1, r3
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	3319      	adds	r3, #25
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	88bb      	ldrh	r3, [r7, #4]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	3306      	adds	r3, #6
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2401      	movs	r4, #1
 8002d54:	9400      	str	r4, [sp, #0]
 8002d56:	f001 fb57 	bl	8004408 <ssd1306_Line>
	c = (uint16_t)(tiltDisplayValue / 20)+p;
 8002d5a:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <menuOff+0x2a8>)
 8002d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d60:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <menuOff+0x2a4>)
 8002d62:	fb82 1203 	smull	r1, r2, r2, r3
 8002d66:	10d2      	asrs	r2, r2, #3
 8002d68:	17db      	asrs	r3, r3, #31
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	4413      	add	r3, r2
 8002d74:	807b      	strh	r3, [r7, #2]
	ssd1306_Line(c-3,r-1,c+3,r-1,White);
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3b03      	subs	r3, #3
 8002d7c:	b2d8      	uxtb	r0, r3
 8002d7e:	88bb      	ldrh	r3, [r7, #4]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b2d9      	uxtb	r1, r3
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	3303      	adds	r3, #3
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	88bb      	ldrh	r3, [r7, #4]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2401      	movs	r4, #1
 8002d98:	9400      	str	r4, [sp, #0]
 8002d9a:	f001 fb35 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-2,r,c+2,r,White);
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3b02      	subs	r3, #2
 8002da4:	b2d8      	uxtb	r0, r3
 8002da6:	88bb      	ldrh	r3, [r7, #4]
 8002da8:	e00e      	b.n	8002dc8 <menuOff+0x2b0>
 8002daa:	bf00      	nop
 8002dac:	20000b32 	.word	0x20000b32
 8002db0:	0800ab54 	.word	0x0800ab54
 8002db4:	200019ec 	.word	0x200019ec
 8002db8:	20000024 	.word	0x20000024
 8002dbc:	66666667 	.word	0x66666667
 8002dc0:	200019e0 	.word	0x200019e0
 8002dc4:	0800ab6c 	.word	0x0800ab6c
 8002dc8:	b2d9      	uxtb	r1, r3
 8002dca:	887b      	ldrh	r3, [r7, #2]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	3302      	adds	r3, #2
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	88bb      	ldrh	r3, [r7, #4]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2401      	movs	r4, #1
 8002dd8:	9400      	str	r4, [sp, #0]
 8002dda:	f001 fb15 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-1,r+1,c+1,r+1,White);
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b2d8      	uxtb	r0, r3
 8002de6:	88bb      	ldrh	r3, [r7, #4]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	b2d9      	uxtb	r1, r3
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	88bb      	ldrh	r3, [r7, #4]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2401      	movs	r4, #1
 8002e00:	9400      	str	r4, [sp, #0]
 8002e02:	f001 fb01 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c,r+2,c,r+2,White);
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	b2d8      	uxtb	r0, r3
 8002e0a:	88bb      	ldrh	r3, [r7, #4]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3302      	adds	r3, #2
 8002e10:	b2d9      	uxtb	r1, r3
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	88bb      	ldrh	r3, [r7, #4]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2401      	movs	r4, #1
 8002e20:	9400      	str	r4, [sp, #0]
 8002e22:	f001 faf1 	bl	8004408 <ssd1306_Line>

	//ROLL MAIN DISPLAY
	p = 60;
 8002e26:	233c      	movs	r3, #60	; 0x3c
 8002e28:	80fb      	strh	r3, [r7, #6]
	r = 32;
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(2, r);
 8002e2e:	88bb      	ldrh	r3, [r7, #4]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4619      	mov	r1, r3
 8002e34:	2002      	movs	r0, #2
 8002e36:	f001 facf 	bl	80043d8 <ssd1306_SetCursor>

	if (rollStatus)
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <menuOff+0x33c>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <menuOff+0x34c>
		sprintf(displayBuff,"ROLL:           %04d", rollDisplayValue);
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <menuOff+0x340>)
 8002e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4904      	ldr	r1, [pc, #16]	; (8002e5c <menuOff+0x344>)
 8002e4c:	4804      	ldr	r0, [pc, #16]	; (8002e60 <menuOff+0x348>)
 8002e4e:	f007 fa37 	bl	800a2c0 <siprintf>
 8002e52:	e00b      	b.n	8002e6c <menuOff+0x354>
 8002e54:	20000610 	.word	0x20000610
 8002e58:	20001900 	.word	0x20001900
 8002e5c:	0800ab84 	.word	0x0800ab84
 8002e60:	200019ec 	.word	0x200019ec
	else
		sprintf(displayBuff,"ROLL:           OFF!");
 8002e64:	499c      	ldr	r1, [pc, #624]	; (80030d8 <menuOff+0x5c0>)
 8002e66:	489d      	ldr	r0, [pc, #628]	; (80030dc <menuOff+0x5c4>)
 8002e68:	f007 fa2a 	bl	800a2c0 <siprintf>

	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8002e6c:	4a9c      	ldr	r2, [pc, #624]	; (80030e0 <menuOff+0x5c8>)
 8002e6e:	2301      	movs	r3, #1
 8002e70:	ca06      	ldmia	r2, {r1, r2}
 8002e72:	489a      	ldr	r0, [pc, #616]	; (80030dc <menuOff+0x5c4>)
 8002e74:	f001 fa8a 	bl	800438c <ssd1306_WriteString>
	ssd1306_Line(p-25,r+5,p+25,r+5,White);
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3b19      	subs	r3, #25
 8002e7e:	b2d8      	uxtb	r0, r3
 8002e80:	88bb      	ldrh	r3, [r7, #4]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3305      	adds	r3, #5
 8002e86:	b2d9      	uxtb	r1, r3
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3319      	adds	r3, #25
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3305      	adds	r3, #5
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2401      	movs	r4, #1
 8002e9a:	9400      	str	r4, [sp, #0]
 8002e9c:	f001 fab4 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p-25,r+4,p-25,r+6,White);
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3b19      	subs	r3, #25
 8002ea6:	b2d8      	uxtb	r0, r3
 8002ea8:	88bb      	ldrh	r3, [r7, #4]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3304      	adds	r3, #4
 8002eae:	b2d9      	uxtb	r1, r3
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	3b19      	subs	r3, #25
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	88bb      	ldrh	r3, [r7, #4]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3306      	adds	r3, #6
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2401      	movs	r4, #1
 8002ec2:	9400      	str	r4, [sp, #0]
 8002ec4:	f001 faa0 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p,r+4,p,r+6,White);
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	b2d8      	uxtb	r0, r3
 8002ecc:	88bb      	ldrh	r3, [r7, #4]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	b2d9      	uxtb	r1, r3
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	88bb      	ldrh	r3, [r7, #4]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3306      	adds	r3, #6
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2401      	movs	r4, #1
 8002ee2:	9400      	str	r4, [sp, #0]
 8002ee4:	f001 fa90 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p+25,r+4,p+25,r+6,White);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	3319      	adds	r3, #25
 8002eee:	b2d8      	uxtb	r0, r3
 8002ef0:	88bb      	ldrh	r3, [r7, #4]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	b2d9      	uxtb	r1, r3
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3319      	adds	r3, #25
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	88bb      	ldrh	r3, [r7, #4]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3306      	adds	r3, #6
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2401      	movs	r4, #1
 8002f0a:	9400      	str	r4, [sp, #0]
 8002f0c:	f001 fa7c 	bl	8004408 <ssd1306_Line>
	c = (uint16_t)(rollDisplayValue / 20)+p;
 8002f10:	4b74      	ldr	r3, [pc, #464]	; (80030e4 <menuOff+0x5cc>)
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	4a74      	ldr	r2, [pc, #464]	; (80030e8 <menuOff+0x5d0>)
 8002f18:	fb82 1203 	smull	r1, r2, r2, r3
 8002f1c:	10d2      	asrs	r2, r2, #3
 8002f1e:	17db      	asrs	r3, r3, #31
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4413      	add	r3, r2
 8002f2a:	807b      	strh	r3, [r7, #2]
	ssd1306_Line(c-3,r-1,c+3,r-1,White);
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3b03      	subs	r3, #3
 8002f32:	b2d8      	uxtb	r0, r3
 8002f34:	88bb      	ldrh	r3, [r7, #4]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b2d9      	uxtb	r1, r3
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	3303      	adds	r3, #3
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	88bb      	ldrh	r3, [r7, #4]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2401      	movs	r4, #1
 8002f4e:	9400      	str	r4, [sp, #0]
 8002f50:	f001 fa5a 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-2,r,c+2,r,White);
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	3b02      	subs	r3, #2
 8002f5a:	b2d8      	uxtb	r0, r3
 8002f5c:	88bb      	ldrh	r3, [r7, #4]
 8002f5e:	b2d9      	uxtb	r1, r3
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3302      	adds	r3, #2
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	88bb      	ldrh	r3, [r7, #4]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2401      	movs	r4, #1
 8002f6e:	9400      	str	r4, [sp, #0]
 8002f70:	f001 fa4a 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-1,r+1,c+1,r+1,White);
 8002f74:	887b      	ldrh	r3, [r7, #2]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b2d8      	uxtb	r0, r3
 8002f7c:	88bb      	ldrh	r3, [r7, #4]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	b2d9      	uxtb	r1, r3
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	88bb      	ldrh	r3, [r7, #4]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2401      	movs	r4, #1
 8002f96:	9400      	str	r4, [sp, #0]
 8002f98:	f001 fa36 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c,r+2,c,r+2,White);
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	b2d8      	uxtb	r0, r3
 8002fa0:	88bb      	ldrh	r3, [r7, #4]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	b2d9      	uxtb	r1, r3
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	88bb      	ldrh	r3, [r7, #4]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2401      	movs	r4, #1
 8002fb6:	9400      	str	r4, [sp, #0]
 8002fb8:	f001 fa26 	bl	8004408 <ssd1306_Line>

	//ZOOM MAIN DISPLAY
	p = 45;
 8002fbc:	232d      	movs	r3, #45	; 0x2d
 8002fbe:	80fb      	strh	r3, [r7, #6]
	r = 42;
 8002fc0:	232a      	movs	r3, #42	; 0x2a
 8002fc2:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(2, r);
 8002fc4:	88bb      	ldrh	r3, [r7, #4]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2002      	movs	r0, #2
 8002fcc:	f001 fa04 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"ZOOM:");
 8002fd0:	4946      	ldr	r1, [pc, #280]	; (80030ec <menuOff+0x5d4>)
 8002fd2:	4842      	ldr	r0, [pc, #264]	; (80030dc <menuOff+0x5c4>)
 8002fd4:	f007 f974 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8002fd8:	4a41      	ldr	r2, [pc, #260]	; (80030e0 <menuOff+0x5c8>)
 8002fda:	2301      	movs	r3, #1
 8002fdc:	ca06      	ldmia	r2, {r1, r2}
 8002fde:	483f      	ldr	r0, [pc, #252]	; (80030dc <menuOff+0x5c4>)
 8002fe0:	f001 f9d4 	bl	800438c <ssd1306_WriteString>
	ssd1306_Line(p-10,r+5,p+10,r+5,White);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3b0a      	subs	r3, #10
 8002fea:	b2d8      	uxtb	r0, r3
 8002fec:	88bb      	ldrh	r3, [r7, #4]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3305      	adds	r3, #5
 8002ff2:	b2d9      	uxtb	r1, r3
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	330a      	adds	r3, #10
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	88bb      	ldrh	r3, [r7, #4]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3305      	adds	r3, #5
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2401      	movs	r4, #1
 8003006:	9400      	str	r4, [sp, #0]
 8003008:	f001 f9fe 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p-10,r+4,p-10,r+6,White);
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	3b0a      	subs	r3, #10
 8003012:	b2d8      	uxtb	r0, r3
 8003014:	88bb      	ldrh	r3, [r7, #4]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3304      	adds	r3, #4
 800301a:	b2d9      	uxtb	r1, r3
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	3b0a      	subs	r3, #10
 8003022:	b2da      	uxtb	r2, r3
 8003024:	88bb      	ldrh	r3, [r7, #4]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3306      	adds	r3, #6
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2401      	movs	r4, #1
 800302e:	9400      	str	r4, [sp, #0]
 8003030:	f001 f9ea 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p,r+4,p,r+6,White);
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	b2d8      	uxtb	r0, r3
 8003038:	88bb      	ldrh	r3, [r7, #4]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3304      	adds	r3, #4
 800303e:	b2d9      	uxtb	r1, r3
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	88bb      	ldrh	r3, [r7, #4]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	3306      	adds	r3, #6
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2401      	movs	r4, #1
 800304e:	9400      	str	r4, [sp, #0]
 8003050:	f001 f9da 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p+10,r+4,p+10,r+6,White);
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	330a      	adds	r3, #10
 800305a:	b2d8      	uxtb	r0, r3
 800305c:	88bb      	ldrh	r3, [r7, #4]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3304      	adds	r3, #4
 8003062:	b2d9      	uxtb	r1, r3
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	330a      	adds	r3, #10
 800306a:	b2da      	uxtb	r2, r3
 800306c:	88bb      	ldrh	r3, [r7, #4]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3306      	adds	r3, #6
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2401      	movs	r4, #1
 8003076:	9400      	str	r4, [sp, #0]
 8003078:	f001 f9c6 	bl	8004408 <ssd1306_Line>
	c = (uint16_t)(zoomDisplayValue / 50)+p;
 800307c:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <menuOff+0x5d8>)
 800307e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <menuOff+0x5dc>)
 8003084:	fb82 1203 	smull	r1, r2, r2, r3
 8003088:	1112      	asrs	r2, r2, #4
 800308a:	17db      	asrs	r3, r3, #31
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b21b      	sxth	r3, r3
 8003090:	b29a      	uxth	r2, r3
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	4413      	add	r3, r2
 8003096:	807b      	strh	r3, [r7, #2]
	ssd1306_Line(c-3,r-1,c+3,r-1,White);
 8003098:	887b      	ldrh	r3, [r7, #2]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3b03      	subs	r3, #3
 800309e:	b2d8      	uxtb	r0, r3
 80030a0:	88bb      	ldrh	r3, [r7, #4]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b2d9      	uxtb	r1, r3
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	3303      	adds	r3, #3
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	88bb      	ldrh	r3, [r7, #4]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2401      	movs	r4, #1
 80030ba:	9400      	str	r4, [sp, #0]
 80030bc:	f001 f9a4 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-2,r,c+2,r,White);
 80030c0:	887b      	ldrh	r3, [r7, #2]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3b02      	subs	r3, #2
 80030c6:	b2d8      	uxtb	r0, r3
 80030c8:	88bb      	ldrh	r3, [r7, #4]
 80030ca:	b2d9      	uxtb	r1, r3
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3302      	adds	r3, #2
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	e010      	b.n	80030f8 <menuOff+0x5e0>
 80030d6:	bf00      	nop
 80030d8:	0800ab9c 	.word	0x0800ab9c
 80030dc:	200019ec 	.word	0x200019ec
 80030e0:	20000024 	.word	0x20000024
 80030e4:	20001900 	.word	0x20001900
 80030e8:	66666667 	.word	0x66666667
 80030ec:	0800abb4 	.word	0x0800abb4
 80030f0:	200009c8 	.word	0x200009c8
 80030f4:	51eb851f 	.word	0x51eb851f
 80030f8:	88bb      	ldrh	r3, [r7, #4]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2401      	movs	r4, #1
 80030fe:	9400      	str	r4, [sp, #0]
 8003100:	f001 f982 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-1,r+1,c+1,r+1,White);
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b2d8      	uxtb	r0, r3
 800310c:	88bb      	ldrh	r3, [r7, #4]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	b2d9      	uxtb	r1, r3
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	3301      	adds	r3, #1
 800311a:	b2da      	uxtb	r2, r3
 800311c:	88bb      	ldrh	r3, [r7, #4]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	3301      	adds	r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2401      	movs	r4, #1
 8003126:	9400      	str	r4, [sp, #0]
 8003128:	f001 f96e 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c,r+2,c,r+2,White);
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	b2d8      	uxtb	r0, r3
 8003130:	88bb      	ldrh	r3, [r7, #4]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	3302      	adds	r3, #2
 8003136:	b2d9      	uxtb	r1, r3
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	88bb      	ldrh	r3, [r7, #4]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3302      	adds	r3, #2
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2401      	movs	r4, #1
 8003146:	9400      	str	r4, [sp, #0]
 8003148:	f001 f95e 	bl	8004408 <ssd1306_Line>

	//FOCUS MAIN DISPLAY
	p = 110;
 800314c:	236e      	movs	r3, #110	; 0x6e
 800314e:	80fb      	strh	r3, [r7, #6]
	r = 42;
 8003150:	232a      	movs	r3, #42	; 0x2a
 8003152:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(62, r);
 8003154:	88bb      	ldrh	r3, [r7, #4]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	4619      	mov	r1, r3
 800315a:	203e      	movs	r0, #62	; 0x3e
 800315c:	f001 f93c 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"FOCUS:");
 8003160:	499d      	ldr	r1, [pc, #628]	; (80033d8 <menuOff+0x8c0>)
 8003162:	489e      	ldr	r0, [pc, #632]	; (80033dc <menuOff+0x8c4>)
 8003164:	f007 f8ac 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003168:	4a9d      	ldr	r2, [pc, #628]	; (80033e0 <menuOff+0x8c8>)
 800316a:	2301      	movs	r3, #1
 800316c:	ca06      	ldmia	r2, {r1, r2}
 800316e:	489b      	ldr	r0, [pc, #620]	; (80033dc <menuOff+0x8c4>)
 8003170:	f001 f90c 	bl	800438c <ssd1306_WriteString>
	ssd1306_Line(p-10,r+5,p+10,r+5,White);
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3b0a      	subs	r3, #10
 800317a:	b2d8      	uxtb	r0, r3
 800317c:	88bb      	ldrh	r3, [r7, #4]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	3305      	adds	r3, #5
 8003182:	b2d9      	uxtb	r1, r3
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	330a      	adds	r3, #10
 800318a:	b2da      	uxtb	r2, r3
 800318c:	88bb      	ldrh	r3, [r7, #4]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	3305      	adds	r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2401      	movs	r4, #1
 8003196:	9400      	str	r4, [sp, #0]
 8003198:	f001 f936 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p-10,r+4,p-10,r+6,White);
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	3b0a      	subs	r3, #10
 80031a2:	b2d8      	uxtb	r0, r3
 80031a4:	88bb      	ldrh	r3, [r7, #4]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3304      	adds	r3, #4
 80031aa:	b2d9      	uxtb	r1, r3
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3b0a      	subs	r3, #10
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	88bb      	ldrh	r3, [r7, #4]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	3306      	adds	r3, #6
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2401      	movs	r4, #1
 80031be:	9400      	str	r4, [sp, #0]
 80031c0:	f001 f922 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p,r+4,p,r+6,White);
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	b2d8      	uxtb	r0, r3
 80031c8:	88bb      	ldrh	r3, [r7, #4]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3304      	adds	r3, #4
 80031ce:	b2d9      	uxtb	r1, r3
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	88bb      	ldrh	r3, [r7, #4]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	3306      	adds	r3, #6
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2401      	movs	r4, #1
 80031de:	9400      	str	r4, [sp, #0]
 80031e0:	f001 f912 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p+10,r+4,p+10,r+6,White);
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	330a      	adds	r3, #10
 80031ea:	b2d8      	uxtb	r0, r3
 80031ec:	88bb      	ldrh	r3, [r7, #4]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	3304      	adds	r3, #4
 80031f2:	b2d9      	uxtb	r1, r3
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	330a      	adds	r3, #10
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	88bb      	ldrh	r3, [r7, #4]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3306      	adds	r3, #6
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2401      	movs	r4, #1
 8003206:	9400      	str	r4, [sp, #0]
 8003208:	f001 f8fe 	bl	8004408 <ssd1306_Line>
	c = (uint16_t)(focusDisplayValue / 105)+p-10;
 800320c:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <menuOff+0x8cc>)
 800320e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003212:	4a75      	ldr	r2, [pc, #468]	; (80033e8 <menuOff+0x8d0>)
 8003214:	fb82 1203 	smull	r1, r2, r2, r3
 8003218:	441a      	add	r2, r3
 800321a:	1192      	asrs	r2, r2, #6
 800321c:	17db      	asrs	r3, r3, #31
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	b21b      	sxth	r3, r3
 8003222:	b29a      	uxth	r2, r3
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	4413      	add	r3, r2
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b0a      	subs	r3, #10
 800322c:	807b      	strh	r3, [r7, #2]
	ssd1306_Line(c-3,r-1,c+3,r-1,White);
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3b03      	subs	r3, #3
 8003234:	b2d8      	uxtb	r0, r3
 8003236:	88bb      	ldrh	r3, [r7, #4]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b2d9      	uxtb	r1, r3
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	3303      	adds	r3, #3
 8003244:	b2da      	uxtb	r2, r3
 8003246:	88bb      	ldrh	r3, [r7, #4]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2401      	movs	r4, #1
 8003250:	9400      	str	r4, [sp, #0]
 8003252:	f001 f8d9 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-2,r,c+2,r,White);
 8003256:	887b      	ldrh	r3, [r7, #2]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	3b02      	subs	r3, #2
 800325c:	b2d8      	uxtb	r0, r3
 800325e:	88bb      	ldrh	r3, [r7, #4]
 8003260:	b2d9      	uxtb	r1, r3
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3302      	adds	r3, #2
 8003268:	b2da      	uxtb	r2, r3
 800326a:	88bb      	ldrh	r3, [r7, #4]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2401      	movs	r4, #1
 8003270:	9400      	str	r4, [sp, #0]
 8003272:	f001 f8c9 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c-1,r+1,c+1,r+1,White);
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b2d8      	uxtb	r0, r3
 800327e:	88bb      	ldrh	r3, [r7, #4]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	3301      	adds	r3, #1
 8003284:	b2d9      	uxtb	r1, r3
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	3301      	adds	r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	88bb      	ldrh	r3, [r7, #4]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3301      	adds	r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2401      	movs	r4, #1
 8003298:	9400      	str	r4, [sp, #0]
 800329a:	f001 f8b5 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(c,r+2,c,r+2,White);
 800329e:	887b      	ldrh	r3, [r7, #2]
 80032a0:	b2d8      	uxtb	r0, r3
 80032a2:	88bb      	ldrh	r3, [r7, #4]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	3302      	adds	r3, #2
 80032a8:	b2d9      	uxtb	r1, r3
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	88bb      	ldrh	r3, [r7, #4]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3302      	adds	r3, #2
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2401      	movs	r4, #1
 80032b8:	9400      	str	r4, [sp, #0]
 80032ba:	f001 f8a5 	bl	8004408 <ssd1306_Line>


	//PTR GAIN DISPLAY
	ssd1306_SetCursor(2, 55);
 80032be:	2137      	movs	r1, #55	; 0x37
 80032c0:	2002      	movs	r0, #2
 80032c2:	f001 f889 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"PTR GAIN");
 80032c6:	4949      	ldr	r1, [pc, #292]	; (80033ec <menuOff+0x8d4>)
 80032c8:	4844      	ldr	r0, [pc, #272]	; (80033dc <menuOff+0x8c4>)
 80032ca:	f006 fff9 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 80032ce:	4a44      	ldr	r2, [pc, #272]	; (80033e0 <menuOff+0x8c8>)
 80032d0:	2301      	movs	r3, #1
 80032d2:	ca06      	ldmia	r2, {r1, r2}
 80032d4:	4841      	ldr	r0, [pc, #260]	; (80033dc <menuOff+0x8c4>)
 80032d6:	f001 f859 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(90, 55);
 80032da:	2137      	movs	r1, #55	; 0x37
 80032dc:	205a      	movs	r0, #90	; 0x5a
 80032de:	f001 f87b 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"%3d%%", (uint8_t)(gainSetting*5));
 80032e2:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <menuOff+0x8d8>)
 80032e4:	f993 3000 	ldrsb.w	r3, [r3]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	0092      	lsls	r2, r2, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	493f      	ldr	r1, [pc, #252]	; (80033f4 <menuOff+0x8dc>)
 80032f6:	4839      	ldr	r0, [pc, #228]	; (80033dc <menuOff+0x8c4>)
 80032f8:	f006 ffe2 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 80032fc:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <menuOff+0x8c8>)
 80032fe:	2301      	movs	r3, #1
 8003300:	ca06      	ldmia	r2, {r1, r2}
 8003302:	4836      	ldr	r0, [pc, #216]	; (80033dc <menuOff+0x8c4>)
 8003304:	f001 f842 	bl	800438c <ssd1306_WriteString>

	ssd1306_Line(60,60,80,60,White);
 8003308:	2301      	movs	r3, #1
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	233c      	movs	r3, #60	; 0x3c
 800330e:	2250      	movs	r2, #80	; 0x50
 8003310:	213c      	movs	r1, #60	; 0x3c
 8003312:	203c      	movs	r0, #60	; 0x3c
 8003314:	f001 f878 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(60,59,60,61,White);
 8003318:	2301      	movs	r3, #1
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	233d      	movs	r3, #61	; 0x3d
 800331e:	223c      	movs	r2, #60	; 0x3c
 8003320:	213b      	movs	r1, #59	; 0x3b
 8003322:	203c      	movs	r0, #60	; 0x3c
 8003324:	f001 f870 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(70,59,70,61,White);
 8003328:	2301      	movs	r3, #1
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	233d      	movs	r3, #61	; 0x3d
 800332e:	2246      	movs	r2, #70	; 0x46
 8003330:	213b      	movs	r1, #59	; 0x3b
 8003332:	2046      	movs	r0, #70	; 0x46
 8003334:	f001 f868 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(80,59,80,61,White);
 8003338:	2301      	movs	r3, #1
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	233d      	movs	r3, #61	; 0x3d
 800333e:	2250      	movs	r2, #80	; 0x50
 8003340:	213b      	movs	r1, #59	; 0x3b
 8003342:	2050      	movs	r0, #80	; 0x50
 8003344:	f001 f860 	bl	8004408 <ssd1306_Line>

	uint16_t PTRgainDisplay = (uint16_t)(PTRgain * 20);
 8003348:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <menuOff+0x8e0>)
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335a:	ee17 3a90 	vmov	r3, s15
 800335e:	803b      	strh	r3, [r7, #0]

	p = PTRgainDisplay+60;
 8003360:	883b      	ldrh	r3, [r7, #0]
 8003362:	333c      	adds	r3, #60	; 0x3c
 8003364:	80fb      	strh	r3, [r7, #6]

	ssd1306_Line(p-3,54,p+3,54,White);
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3b03      	subs	r3, #3
 800336c:	b2d8      	uxtb	r0, r3
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	3303      	adds	r3, #3
 8003374:	b2da      	uxtb	r2, r3
 8003376:	2301      	movs	r3, #1
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2336      	movs	r3, #54	; 0x36
 800337c:	2136      	movs	r1, #54	; 0x36
 800337e:	f001 f843 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p-2,55,p+2,55,White);
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3b02      	subs	r3, #2
 8003388:	b2d8      	uxtb	r0, r3
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	3302      	adds	r3, #2
 8003390:	b2da      	uxtb	r2, r3
 8003392:	2301      	movs	r3, #1
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	2337      	movs	r3, #55	; 0x37
 8003398:	2137      	movs	r1, #55	; 0x37
 800339a:	f001 f835 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p-1,56,p+1,56,White);
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b2d8      	uxtb	r0, r3
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	2301      	movs	r3, #1
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2338      	movs	r3, #56	; 0x38
 80033b4:	2138      	movs	r1, #56	; 0x38
 80033b6:	f001 f827 	bl	8004408 <ssd1306_Line>
	ssd1306_Line(p,57, p,57,White);
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	b2d8      	uxtb	r0, r3
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	2301      	movs	r3, #1
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2339      	movs	r3, #57	; 0x39
 80033c8:	2139      	movs	r1, #57	; 0x39
 80033ca:	f001 f81d 	bl	8004408 <ssd1306_Line>

	//update screen command is in update display function

}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	0800abbc 	.word	0x0800abbc
 80033dc:	200019ec 	.word	0x200019ec
 80033e0:	20000024 	.word	0x20000024
 80033e4:	200005bc 	.word	0x200005bc
 80033e8:	9c09c09d 	.word	0x9c09c09d
 80033ec:	0800abc4 	.word	0x0800abc4
 80033f0:	200009d6 	.word	0x200009d6
 80033f4:	0800abd0 	.word	0x0800abd0
 80033f8:	20000b10 	.word	0x20000b10

080033fc <menuPan>:


void menuPan (void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(2, 0);
 8003402:	2100      	movs	r1, #0
 8003404:	2002      	movs	r0, #2
 8003406:	f000 ffe7 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"PAN RAW:%04d CAL:%04d", panAvgDisplay, panCalValue);
 800340a:	4b65      	ldr	r3, [pc, #404]	; (80035a0 <menuPan+0x1a4>)
 800340c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003410:	461a      	mov	r2, r3
 8003412:	4b64      	ldr	r3, [pc, #400]	; (80035a4 <menuPan+0x1a8>)
 8003414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003418:	4963      	ldr	r1, [pc, #396]	; (80035a8 <menuPan+0x1ac>)
 800341a:	4864      	ldr	r0, [pc, #400]	; (80035ac <menuPan+0x1b0>)
 800341c:	f006 ff50 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003420:	4a63      	ldr	r2, [pc, #396]	; (80035b0 <menuPan+0x1b4>)
 8003422:	2301      	movs	r3, #1
 8003424:	ca06      	ldmia	r2, {r1, r2}
 8003426:	4861      	ldr	r0, [pc, #388]	; (80035ac <menuPan+0x1b0>)
 8003428:	f000 ffb0 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 15);
 800342c:	210f      	movs	r1, #15
 800342e:	2002      	movs	r0, #2
 8003430:	f000 ffd2 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DRIFT:       %4d", (int16_t)configData.panOffset);
 8003434:	4b5f      	ldr	r3, [pc, #380]	; (80035b4 <menuPan+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b21b      	sxth	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	495e      	ldr	r1, [pc, #376]	; (80035b8 <menuPan+0x1bc>)
 800343e:	485b      	ldr	r0, [pc, #364]	; (80035ac <menuPan+0x1b0>)
 8003440:	f006 ff3e 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003444:	4a5a      	ldr	r2, [pc, #360]	; (80035b0 <menuPan+0x1b4>)
 8003446:	2301      	movs	r3, #1
 8003448:	ca06      	ldmia	r2, {r1, r2}
 800344a:	4858      	ldr	r0, [pc, #352]	; (80035ac <menuPan+0x1b0>)
 800344c:	f000 ff9e 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 25);
 8003450:	2119      	movs	r1, #25
 8003452:	2002      	movs	r0, #2
 8003454:	f000 ffc0 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DB SIZE:     %4d", (int16_t)configData.panDBsize);
 8003458:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <menuPan+0x1b8>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	b21b      	sxth	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	4956      	ldr	r1, [pc, #344]	; (80035bc <menuPan+0x1c0>)
 8003462:	4852      	ldr	r0, [pc, #328]	; (80035ac <menuPan+0x1b0>)
 8003464:	f006 ff2c 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003468:	4a51      	ldr	r2, [pc, #324]	; (80035b0 <menuPan+0x1b4>)
 800346a:	2301      	movs	r3, #1
 800346c:	ca06      	ldmia	r2, {r1, r2}
 800346e:	484f      	ldr	r0, [pc, #316]	; (80035ac <menuPan+0x1b0>)
 8003470:	f000 ff8c 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 35);
 8003474:	2123      	movs	r1, #35	; 0x23
 8003476:	2002      	movs	r0, #2
 8003478:	f000 ffae 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DB CENTER:   %4d", (int16_t)configData.panDBcenter);
 800347c:	4b4d      	ldr	r3, [pc, #308]	; (80035b4 <menuPan+0x1b8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	b21b      	sxth	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	494e      	ldr	r1, [pc, #312]	; (80035c0 <menuPan+0x1c4>)
 8003486:	4849      	ldr	r0, [pc, #292]	; (80035ac <menuPan+0x1b0>)
 8003488:	f006 ff1a 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 800348c:	4a48      	ldr	r2, [pc, #288]	; (80035b0 <menuPan+0x1b4>)
 800348e:	2301      	movs	r3, #1
 8003490:	ca06      	ldmia	r2, {r1, r2}
 8003492:	4846      	ldr	r0, [pc, #280]	; (80035ac <menuPan+0x1b0>)
 8003494:	f000 ff7a 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 45);
 8003498:	212d      	movs	r1, #45	; 0x2d
 800349a:	2002      	movs	r0, #2
 800349c:	f000 ff9c 	bl	80043d8 <ssd1306_SetCursor>
	if (configData.panSense == NORMAL)
 80034a0:	4b44      	ldr	r3, [pc, #272]	; (80035b4 <menuPan+0x1b8>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <menuPan+0xb6>
		sprintf(displayBuff,"   SENSE:     NORMAL");
 80034a8:	4946      	ldr	r1, [pc, #280]	; (80035c4 <menuPan+0x1c8>)
 80034aa:	4840      	ldr	r0, [pc, #256]	; (80035ac <menuPan+0x1b0>)
 80034ac:	f006 ff08 	bl	800a2c0 <siprintf>
 80034b0:	e003      	b.n	80034ba <menuPan+0xbe>
	else
		sprintf(displayBuff,"   SENSE:    REVERSE");
 80034b2:	4945      	ldr	r1, [pc, #276]	; (80035c8 <menuPan+0x1cc>)
 80034b4:	483d      	ldr	r0, [pc, #244]	; (80035ac <menuPan+0x1b0>)
 80034b6:	f006 ff03 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 80034ba:	4a3d      	ldr	r2, [pc, #244]	; (80035b0 <menuPan+0x1b4>)
 80034bc:	2301      	movs	r3, #1
 80034be:	ca06      	ldmia	r2, {r1, r2}
 80034c0:	483a      	ldr	r0, [pc, #232]	; (80035ac <menuPan+0x1b0>)
 80034c2:	f000 ff63 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 55);
 80034c6:	2137      	movs	r1, #55	; 0x37
 80034c8:	2002      	movs	r0, #2
 80034ca:	f000 ff85 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   EXIT");
 80034ce:	493f      	ldr	r1, [pc, #252]	; (80035cc <menuPan+0x1d0>)
 80034d0:	4836      	ldr	r0, [pc, #216]	; (80035ac <menuPan+0x1b0>)
 80034d2:	f006 fef5 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 80034d6:	4a36      	ldr	r2, [pc, #216]	; (80035b0 <menuPan+0x1b4>)
 80034d8:	2301      	movs	r3, #1
 80034da:	ca06      	ldmia	r2, {r1, r2}
 80034dc:	4833      	ldr	r0, [pc, #204]	; (80035ac <menuPan+0x1b0>)
 80034de:	f000 ff55 	bl	800438c <ssd1306_WriteString>

	uint8_t posRow, posCol;

	posCol = 1;
 80034e2:	2301      	movs	r3, #1
 80034e4:	71bb      	strb	r3, [r7, #6]
	switch (menuItem)
 80034e6:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <menuPan+0x1d4>)
 80034e8:	f993 3000 	ldrsb.w	r3, [r3]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d81c      	bhi.n	800352a <menuPan+0x12e>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <menuPan+0xfc>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800350d 	.word	0x0800350d
 80034fc:	08003513 	.word	0x08003513
 8003500:	08003519 	.word	0x08003519
 8003504:	0800351f 	.word	0x0800351f
 8003508:	08003525 	.word	0x08003525
	{
	case ITEM_PAN_DRIFT:
		posRow = 15;
 800350c:	230f      	movs	r3, #15
 800350e:	71fb      	strb	r3, [r7, #7]
		break;
 8003510:	e00d      	b.n	800352e <menuPan+0x132>
	case ITEM_PAN_DB_SIZE:
		posRow = 25;
 8003512:	2319      	movs	r3, #25
 8003514:	71fb      	strb	r3, [r7, #7]
		break;
 8003516:	e00a      	b.n	800352e <menuPan+0x132>
	case ITEM_PAN_DB_CENTER:
		posRow = 35;
 8003518:	2323      	movs	r3, #35	; 0x23
 800351a:	71fb      	strb	r3, [r7, #7]
		break;
 800351c:	e007      	b.n	800352e <menuPan+0x132>
	case ITEM_PAN_SENSE:
		posRow = 45;
 800351e:	232d      	movs	r3, #45	; 0x2d
 8003520:	71fb      	strb	r3, [r7, #7]
		break;
 8003522:	e004      	b.n	800352e <menuPan+0x132>
	case ITEM_PAN_EXIT:
		posRow = 55;
 8003524:	2337      	movs	r3, #55	; 0x37
 8003526:	71fb      	strb	r3, [r7, #7]
		break;
 8003528:	e001      	b.n	800352e <menuPan+0x132>
	default:
		posRow = 15;
 800352a:	230f      	movs	r3, #15
 800352c:	71fb      	strb	r3, [r7, #7]
	}


	switch (menuSetting)
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <menuPan+0x1d8>)
 8003530:	f993 3000 	ldrsb.w	r3, [r3]
 8003534:	3b01      	subs	r3, #1
 8003536:	2b03      	cmp	r3, #3
 8003538:	d81e      	bhi.n	8003578 <menuPan+0x17c>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <menuPan+0x144>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003551 	.word	0x08003551
 8003544:	0800355b 	.word	0x0800355b
 8003548:	08003565 	.word	0x08003565
 800354c:	0800356f 	.word	0x0800356f
	{
	case SET_PAN_DRIFT:
		posRow = 15;
 8003550:	230f      	movs	r3, #15
 8003552:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 8003554:	2352      	movs	r3, #82	; 0x52
 8003556:	71bb      	strb	r3, [r7, #6]
		break;
 8003558:	e00e      	b.n	8003578 <menuPan+0x17c>
	case SET_PAN_DB_SIZE:
		posRow = 25;
 800355a:	2319      	movs	r3, #25
 800355c:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 800355e:	2352      	movs	r3, #82	; 0x52
 8003560:	71bb      	strb	r3, [r7, #6]
		break;
 8003562:	e009      	b.n	8003578 <menuPan+0x17c>
	case SET_PAN_DB_CENTER:
		posRow = 35;
 8003564:	2323      	movs	r3, #35	; 0x23
 8003566:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 8003568:	2352      	movs	r3, #82	; 0x52
 800356a:	71bb      	strb	r3, [r7, #6]
		break;
 800356c:	e004      	b.n	8003578 <menuPan+0x17c>
	case SET_PAN_SENSE:
		posRow = 45;
 800356e:	232d      	movs	r3, #45	; 0x2d
 8003570:	71fb      	strb	r3, [r7, #7]
		posCol = 65;
 8003572:	2341      	movs	r3, #65	; 0x41
 8003574:	71bb      	strb	r3, [r7, #6]
		break;
 8003576:	bf00      	nop
	}

	ssd1306_SetCursor(posCol, posRow);
 8003578:	79fa      	ldrb	r2, [r7, #7]
 800357a:	79bb      	ldrb	r3, [r7, #6]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f000 ff2a 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"->");
 8003584:	4914      	ldr	r1, [pc, #80]	; (80035d8 <menuPan+0x1dc>)
 8003586:	4809      	ldr	r0, [pc, #36]	; (80035ac <menuPan+0x1b0>)
 8003588:	f006 fe9a 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 800358c:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <menuPan+0x1b4>)
 800358e:	2301      	movs	r3, #1
 8003590:	ca06      	ldmia	r2, {r1, r2}
 8003592:	4806      	ldr	r0, [pc, #24]	; (80035ac <menuPan+0x1b0>)
 8003594:	f000 fefa 	bl	800438c <ssd1306_WriteString>
	//update screen command is in update display function
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200008ee 	.word	0x200008ee
 80035a4:	2000135a 	.word	0x2000135a
 80035a8:	0800abd8 	.word	0x0800abd8
 80035ac:	200019ec 	.word	0x200019ec
 80035b0:	20000024 	.word	0x20000024
 80035b4:	2000135c 	.word	0x2000135c
 80035b8:	0800abf0 	.word	0x0800abf0
 80035bc:	0800ac04 	.word	0x0800ac04
 80035c0:	0800ac18 	.word	0x0800ac18
 80035c4:	0800ac2c 	.word	0x0800ac2c
 80035c8:	0800ac44 	.word	0x0800ac44
 80035cc:	0800ac5c 	.word	0x0800ac5c
 80035d0:	20000611 	.word	0x20000611
 80035d4:	20000820 	.word	0x20000820
 80035d8:	0800ac64 	.word	0x0800ac64

080035dc <menuTilt>:

void menuTilt (void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(2, 0);
 80035e2:	2100      	movs	r1, #0
 80035e4:	2002      	movs	r0, #2
 80035e6:	f000 fef7 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"TILT RW:%04d CAL:%04d", tiltAvgDisplay, tiltCalValue);
 80035ea:	4b65      	ldr	r3, [pc, #404]	; (8003780 <menuTilt+0x1a4>)
 80035ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b64      	ldr	r3, [pc, #400]	; (8003784 <menuTilt+0x1a8>)
 80035f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f8:	4963      	ldr	r1, [pc, #396]	; (8003788 <menuTilt+0x1ac>)
 80035fa:	4864      	ldr	r0, [pc, #400]	; (800378c <menuTilt+0x1b0>)
 80035fc:	f006 fe60 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003600:	4a63      	ldr	r2, [pc, #396]	; (8003790 <menuTilt+0x1b4>)
 8003602:	2301      	movs	r3, #1
 8003604:	ca06      	ldmia	r2, {r1, r2}
 8003606:	4861      	ldr	r0, [pc, #388]	; (800378c <menuTilt+0x1b0>)
 8003608:	f000 fec0 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 15);
 800360c:	210f      	movs	r1, #15
 800360e:	2002      	movs	r0, #2
 8003610:	f000 fee2 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DRIFT:       %4d", (int16_t)configData.tiltOffset);
 8003614:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <menuTilt+0x1b8>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	b21b      	sxth	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	495e      	ldr	r1, [pc, #376]	; (8003798 <menuTilt+0x1bc>)
 800361e:	485b      	ldr	r0, [pc, #364]	; (800378c <menuTilt+0x1b0>)
 8003620:	f006 fe4e 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003624:	4a5a      	ldr	r2, [pc, #360]	; (8003790 <menuTilt+0x1b4>)
 8003626:	2301      	movs	r3, #1
 8003628:	ca06      	ldmia	r2, {r1, r2}
 800362a:	4858      	ldr	r0, [pc, #352]	; (800378c <menuTilt+0x1b0>)
 800362c:	f000 feae 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 25);
 8003630:	2119      	movs	r1, #25
 8003632:	2002      	movs	r0, #2
 8003634:	f000 fed0 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DB SIZE:     %4d", (int16_t)configData.tiltDBsize);
 8003638:	4b56      	ldr	r3, [pc, #344]	; (8003794 <menuTilt+0x1b8>)
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	b21b      	sxth	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	4956      	ldr	r1, [pc, #344]	; (800379c <menuTilt+0x1c0>)
 8003642:	4852      	ldr	r0, [pc, #328]	; (800378c <menuTilt+0x1b0>)
 8003644:	f006 fe3c 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003648:	4a51      	ldr	r2, [pc, #324]	; (8003790 <menuTilt+0x1b4>)
 800364a:	2301      	movs	r3, #1
 800364c:	ca06      	ldmia	r2, {r1, r2}
 800364e:	484f      	ldr	r0, [pc, #316]	; (800378c <menuTilt+0x1b0>)
 8003650:	f000 fe9c 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 35);
 8003654:	2123      	movs	r1, #35	; 0x23
 8003656:	2002      	movs	r0, #2
 8003658:	f000 febe 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DB CENTER:   %4d", (int16_t)configData.tiltDBcenter);
 800365c:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <menuTilt+0x1b8>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	b21b      	sxth	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	494e      	ldr	r1, [pc, #312]	; (80037a0 <menuTilt+0x1c4>)
 8003666:	4849      	ldr	r0, [pc, #292]	; (800378c <menuTilt+0x1b0>)
 8003668:	f006 fe2a 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 800366c:	4a48      	ldr	r2, [pc, #288]	; (8003790 <menuTilt+0x1b4>)
 800366e:	2301      	movs	r3, #1
 8003670:	ca06      	ldmia	r2, {r1, r2}
 8003672:	4846      	ldr	r0, [pc, #280]	; (800378c <menuTilt+0x1b0>)
 8003674:	f000 fe8a 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 45);
 8003678:	212d      	movs	r1, #45	; 0x2d
 800367a:	2002      	movs	r0, #2
 800367c:	f000 feac 	bl	80043d8 <ssd1306_SetCursor>
	if (configData.tiltSense == NORMAL)
 8003680:	4b44      	ldr	r3, [pc, #272]	; (8003794 <menuTilt+0x1b8>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <menuTilt+0xb6>
		sprintf(displayBuff,"   SENSE:     NORMAL");
 8003688:	4946      	ldr	r1, [pc, #280]	; (80037a4 <menuTilt+0x1c8>)
 800368a:	4840      	ldr	r0, [pc, #256]	; (800378c <menuTilt+0x1b0>)
 800368c:	f006 fe18 	bl	800a2c0 <siprintf>
 8003690:	e003      	b.n	800369a <menuTilt+0xbe>
	else
		sprintf(displayBuff,"   SENSE:    REVERSE");
 8003692:	4945      	ldr	r1, [pc, #276]	; (80037a8 <menuTilt+0x1cc>)
 8003694:	483d      	ldr	r0, [pc, #244]	; (800378c <menuTilt+0x1b0>)
 8003696:	f006 fe13 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 800369a:	4a3d      	ldr	r2, [pc, #244]	; (8003790 <menuTilt+0x1b4>)
 800369c:	2301      	movs	r3, #1
 800369e:	ca06      	ldmia	r2, {r1, r2}
 80036a0:	483a      	ldr	r0, [pc, #232]	; (800378c <menuTilt+0x1b0>)
 80036a2:	f000 fe73 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 55);
 80036a6:	2137      	movs	r1, #55	; 0x37
 80036a8:	2002      	movs	r0, #2
 80036aa:	f000 fe95 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   EXIT");
 80036ae:	493f      	ldr	r1, [pc, #252]	; (80037ac <menuTilt+0x1d0>)
 80036b0:	4836      	ldr	r0, [pc, #216]	; (800378c <menuTilt+0x1b0>)
 80036b2:	f006 fe05 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 80036b6:	4a36      	ldr	r2, [pc, #216]	; (8003790 <menuTilt+0x1b4>)
 80036b8:	2301      	movs	r3, #1
 80036ba:	ca06      	ldmia	r2, {r1, r2}
 80036bc:	4833      	ldr	r0, [pc, #204]	; (800378c <menuTilt+0x1b0>)
 80036be:	f000 fe65 	bl	800438c <ssd1306_WriteString>

	uint8_t posRow, posCol;

	posCol = 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	71bb      	strb	r3, [r7, #6]
	switch (menuItem)
 80036c6:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <menuTilt+0x1d4>)
 80036c8:	f993 3000 	ldrsb.w	r3, [r3]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d81c      	bhi.n	800370a <menuTilt+0x12e>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <menuTilt+0xfc>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036ed 	.word	0x080036ed
 80036dc:	080036f3 	.word	0x080036f3
 80036e0:	080036f9 	.word	0x080036f9
 80036e4:	080036ff 	.word	0x080036ff
 80036e8:	08003705 	.word	0x08003705
	{
	case ITEM_TILT_DRIFT:
		posRow = 15;
 80036ec:	230f      	movs	r3, #15
 80036ee:	71fb      	strb	r3, [r7, #7]
		break;
 80036f0:	e00d      	b.n	800370e <menuTilt+0x132>
	case ITEM_TILT_DB_SIZE:
		posRow = 25;
 80036f2:	2319      	movs	r3, #25
 80036f4:	71fb      	strb	r3, [r7, #7]
		break;
 80036f6:	e00a      	b.n	800370e <menuTilt+0x132>
	case ITEM_TILT_DB_CENTER:
		posRow = 35;
 80036f8:	2323      	movs	r3, #35	; 0x23
 80036fa:	71fb      	strb	r3, [r7, #7]
		break;
 80036fc:	e007      	b.n	800370e <menuTilt+0x132>
	case ITEM_TILT_SENSE:
		posRow = 45;
 80036fe:	232d      	movs	r3, #45	; 0x2d
 8003700:	71fb      	strb	r3, [r7, #7]
		break;
 8003702:	e004      	b.n	800370e <menuTilt+0x132>
	case ITEM_TILT_EXIT:
		posRow = 55;
 8003704:	2337      	movs	r3, #55	; 0x37
 8003706:	71fb      	strb	r3, [r7, #7]
		break;
 8003708:	e001      	b.n	800370e <menuTilt+0x132>
	default:
		posRow = 15;
 800370a:	230f      	movs	r3, #15
 800370c:	71fb      	strb	r3, [r7, #7]
	}


	switch (menuSetting)
 800370e:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <menuTilt+0x1d8>)
 8003710:	f993 3000 	ldrsb.w	r3, [r3]
 8003714:	3b01      	subs	r3, #1
 8003716:	2b03      	cmp	r3, #3
 8003718:	d81e      	bhi.n	8003758 <menuTilt+0x17c>
 800371a:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <menuTilt+0x144>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	08003731 	.word	0x08003731
 8003724:	0800373b 	.word	0x0800373b
 8003728:	08003745 	.word	0x08003745
 800372c:	0800374f 	.word	0x0800374f
	{
	case SET_TILT_DRIFT:
		posRow = 15;
 8003730:	230f      	movs	r3, #15
 8003732:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 8003734:	2352      	movs	r3, #82	; 0x52
 8003736:	71bb      	strb	r3, [r7, #6]
		break;
 8003738:	e00e      	b.n	8003758 <menuTilt+0x17c>
	case SET_TILT_DB_SIZE:
		posRow = 25;
 800373a:	2319      	movs	r3, #25
 800373c:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 800373e:	2352      	movs	r3, #82	; 0x52
 8003740:	71bb      	strb	r3, [r7, #6]
		break;
 8003742:	e009      	b.n	8003758 <menuTilt+0x17c>
	case SET_TILT_DB_CENTER:
		posRow = 35;
 8003744:	2323      	movs	r3, #35	; 0x23
 8003746:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 8003748:	2352      	movs	r3, #82	; 0x52
 800374a:	71bb      	strb	r3, [r7, #6]
		break;
 800374c:	e004      	b.n	8003758 <menuTilt+0x17c>
	case SET_TILT_SENSE:
		posRow = 45;
 800374e:	232d      	movs	r3, #45	; 0x2d
 8003750:	71fb      	strb	r3, [r7, #7]
		posCol = 65;
 8003752:	2341      	movs	r3, #65	; 0x41
 8003754:	71bb      	strb	r3, [r7, #6]
		break;
 8003756:	bf00      	nop
	}

	ssd1306_SetCursor(posCol, posRow);
 8003758:	79fa      	ldrb	r2, [r7, #7]
 800375a:	79bb      	ldrb	r3, [r7, #6]
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fe3a 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"->");
 8003764:	4914      	ldr	r1, [pc, #80]	; (80037b8 <menuTilt+0x1dc>)
 8003766:	4809      	ldr	r0, [pc, #36]	; (800378c <menuTilt+0x1b0>)
 8003768:	f006 fdaa 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 800376c:	4a08      	ldr	r2, [pc, #32]	; (8003790 <menuTilt+0x1b4>)
 800376e:	2301      	movs	r3, #1
 8003770:	ca06      	ldmia	r2, {r1, r2}
 8003772:	4806      	ldr	r0, [pc, #24]	; (800378c <menuTilt+0x1b0>)
 8003774:	f000 fe0a 	bl	800438c <ssd1306_WriteString>
	//update screen command is in update display function
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20001354 	.word	0x20001354
 8003784:	200009d2 	.word	0x200009d2
 8003788:	0800ac68 	.word	0x0800ac68
 800378c:	200019ec 	.word	0x200019ec
 8003790:	20000024 	.word	0x20000024
 8003794:	2000135c 	.word	0x2000135c
 8003798:	0800abf0 	.word	0x0800abf0
 800379c:	0800ac04 	.word	0x0800ac04
 80037a0:	0800ac18 	.word	0x0800ac18
 80037a4:	0800ac2c 	.word	0x0800ac2c
 80037a8:	0800ac44 	.word	0x0800ac44
 80037ac:	0800ac5c 	.word	0x0800ac5c
 80037b0:	20000611 	.word	0x20000611
 80037b4:	20000820 	.word	0x20000820
 80037b8:	0800ac64 	.word	0x0800ac64

080037bc <menuRoll>:

void menuRoll (void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(2, 0);
 80037c2:	2100      	movs	r1, #0
 80037c4:	2002      	movs	r0, #2
 80037c6:	f000 fe07 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"ROLL RW:%04d CAL:%04d", rollAvgDisplay, rollCalValue);
 80037ca:	4b65      	ldr	r3, [pc, #404]	; (8003960 <menuRoll+0x1a4>)
 80037cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b64      	ldr	r3, [pc, #400]	; (8003964 <menuRoll+0x1a8>)
 80037d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d8:	4963      	ldr	r1, [pc, #396]	; (8003968 <menuRoll+0x1ac>)
 80037da:	4864      	ldr	r0, [pc, #400]	; (800396c <menuRoll+0x1b0>)
 80037dc:	f006 fd70 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 80037e0:	4a63      	ldr	r2, [pc, #396]	; (8003970 <menuRoll+0x1b4>)
 80037e2:	2301      	movs	r3, #1
 80037e4:	ca06      	ldmia	r2, {r1, r2}
 80037e6:	4861      	ldr	r0, [pc, #388]	; (800396c <menuRoll+0x1b0>)
 80037e8:	f000 fdd0 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 15);
 80037ec:	210f      	movs	r1, #15
 80037ee:	2002      	movs	r0, #2
 80037f0:	f000 fdf2 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DRIFT:       %4d", (int16_t)configData.rollOffset);
 80037f4:	4b5f      	ldr	r3, [pc, #380]	; (8003974 <menuRoll+0x1b8>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	b21b      	sxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	495e      	ldr	r1, [pc, #376]	; (8003978 <menuRoll+0x1bc>)
 80037fe:	485b      	ldr	r0, [pc, #364]	; (800396c <menuRoll+0x1b0>)
 8003800:	f006 fd5e 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003804:	4a5a      	ldr	r2, [pc, #360]	; (8003970 <menuRoll+0x1b4>)
 8003806:	2301      	movs	r3, #1
 8003808:	ca06      	ldmia	r2, {r1, r2}
 800380a:	4858      	ldr	r0, [pc, #352]	; (800396c <menuRoll+0x1b0>)
 800380c:	f000 fdbe 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 25);
 8003810:	2119      	movs	r1, #25
 8003812:	2002      	movs	r0, #2
 8003814:	f000 fde0 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DB SIZE:     %4d", (int16_t)configData.rollDBsize);
 8003818:	4b56      	ldr	r3, [pc, #344]	; (8003974 <menuRoll+0x1b8>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	b21b      	sxth	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	4956      	ldr	r1, [pc, #344]	; (800397c <menuRoll+0x1c0>)
 8003822:	4852      	ldr	r0, [pc, #328]	; (800396c <menuRoll+0x1b0>)
 8003824:	f006 fd4c 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003828:	4a51      	ldr	r2, [pc, #324]	; (8003970 <menuRoll+0x1b4>)
 800382a:	2301      	movs	r3, #1
 800382c:	ca06      	ldmia	r2, {r1, r2}
 800382e:	484f      	ldr	r0, [pc, #316]	; (800396c <menuRoll+0x1b0>)
 8003830:	f000 fdac 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 35);
 8003834:	2123      	movs	r1, #35	; 0x23
 8003836:	2002      	movs	r0, #2
 8003838:	f000 fdce 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DB CENTER:   %4d", (int16_t)configData.rollDBcenter);
 800383c:	4b4d      	ldr	r3, [pc, #308]	; (8003974 <menuRoll+0x1b8>)
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	b21b      	sxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	494e      	ldr	r1, [pc, #312]	; (8003980 <menuRoll+0x1c4>)
 8003846:	4849      	ldr	r0, [pc, #292]	; (800396c <menuRoll+0x1b0>)
 8003848:	f006 fd3a 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 800384c:	4a48      	ldr	r2, [pc, #288]	; (8003970 <menuRoll+0x1b4>)
 800384e:	2301      	movs	r3, #1
 8003850:	ca06      	ldmia	r2, {r1, r2}
 8003852:	4846      	ldr	r0, [pc, #280]	; (800396c <menuRoll+0x1b0>)
 8003854:	f000 fd9a 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 45);
 8003858:	212d      	movs	r1, #45	; 0x2d
 800385a:	2002      	movs	r0, #2
 800385c:	f000 fdbc 	bl	80043d8 <ssd1306_SetCursor>
	if (configData.rollSense == NORMAL)
 8003860:	4b44      	ldr	r3, [pc, #272]	; (8003974 <menuRoll+0x1b8>)
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d104      	bne.n	8003872 <menuRoll+0xb6>
		sprintf(displayBuff,"   SENSE:     NORMAL");
 8003868:	4946      	ldr	r1, [pc, #280]	; (8003984 <menuRoll+0x1c8>)
 800386a:	4840      	ldr	r0, [pc, #256]	; (800396c <menuRoll+0x1b0>)
 800386c:	f006 fd28 	bl	800a2c0 <siprintf>
 8003870:	e003      	b.n	800387a <menuRoll+0xbe>
	else
		sprintf(displayBuff,"   SENSE:    REVERSE");
 8003872:	4945      	ldr	r1, [pc, #276]	; (8003988 <menuRoll+0x1cc>)
 8003874:	483d      	ldr	r0, [pc, #244]	; (800396c <menuRoll+0x1b0>)
 8003876:	f006 fd23 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 800387a:	4a3d      	ldr	r2, [pc, #244]	; (8003970 <menuRoll+0x1b4>)
 800387c:	2301      	movs	r3, #1
 800387e:	ca06      	ldmia	r2, {r1, r2}
 8003880:	483a      	ldr	r0, [pc, #232]	; (800396c <menuRoll+0x1b0>)
 8003882:	f000 fd83 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 55);
 8003886:	2137      	movs	r1, #55	; 0x37
 8003888:	2002      	movs	r0, #2
 800388a:	f000 fda5 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   EXIT");
 800388e:	493f      	ldr	r1, [pc, #252]	; (800398c <menuRoll+0x1d0>)
 8003890:	4836      	ldr	r0, [pc, #216]	; (800396c <menuRoll+0x1b0>)
 8003892:	f006 fd15 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003896:	4a36      	ldr	r2, [pc, #216]	; (8003970 <menuRoll+0x1b4>)
 8003898:	2301      	movs	r3, #1
 800389a:	ca06      	ldmia	r2, {r1, r2}
 800389c:	4833      	ldr	r0, [pc, #204]	; (800396c <menuRoll+0x1b0>)
 800389e:	f000 fd75 	bl	800438c <ssd1306_WriteString>

	uint8_t posRow, posCol;

	posCol = 1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	71bb      	strb	r3, [r7, #6]
	switch (menuItem)
 80038a6:	4b3a      	ldr	r3, [pc, #232]	; (8003990 <menuRoll+0x1d4>)
 80038a8:	f993 3000 	ldrsb.w	r3, [r3]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d81c      	bhi.n	80038ea <menuRoll+0x12e>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <menuRoll+0xfc>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038cd 	.word	0x080038cd
 80038bc:	080038d3 	.word	0x080038d3
 80038c0:	080038d9 	.word	0x080038d9
 80038c4:	080038df 	.word	0x080038df
 80038c8:	080038e5 	.word	0x080038e5
	{
	case ITEM_ROLL_DRIFT:
		posRow = 15;
 80038cc:	230f      	movs	r3, #15
 80038ce:	71fb      	strb	r3, [r7, #7]
		break;
 80038d0:	e00d      	b.n	80038ee <menuRoll+0x132>
	case ITEM_ROLL_DB_SIZE:
		posRow = 25;
 80038d2:	2319      	movs	r3, #25
 80038d4:	71fb      	strb	r3, [r7, #7]
		break;
 80038d6:	e00a      	b.n	80038ee <menuRoll+0x132>
	case ITEM_ROLL_DB_CENTER:
		posRow = 35;
 80038d8:	2323      	movs	r3, #35	; 0x23
 80038da:	71fb      	strb	r3, [r7, #7]
		break;
 80038dc:	e007      	b.n	80038ee <menuRoll+0x132>
	case ITEM_ROLL_SENSE:
		posRow = 45;
 80038de:	232d      	movs	r3, #45	; 0x2d
 80038e0:	71fb      	strb	r3, [r7, #7]
		break;
 80038e2:	e004      	b.n	80038ee <menuRoll+0x132>
	case ITEM_ROLL_EXIT:
		posRow = 55;
 80038e4:	2337      	movs	r3, #55	; 0x37
 80038e6:	71fb      	strb	r3, [r7, #7]
		break;
 80038e8:	e001      	b.n	80038ee <menuRoll+0x132>
	default:
		posRow = 15;
 80038ea:	230f      	movs	r3, #15
 80038ec:	71fb      	strb	r3, [r7, #7]
	}


	switch (menuSetting)
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <menuRoll+0x1d8>)
 80038f0:	f993 3000 	ldrsb.w	r3, [r3]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d81e      	bhi.n	8003938 <menuRoll+0x17c>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <menuRoll+0x144>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003911 	.word	0x08003911
 8003904:	0800391b 	.word	0x0800391b
 8003908:	08003925 	.word	0x08003925
 800390c:	0800392f 	.word	0x0800392f
	{
	case SET_ROLL_DRIFT:
		posRow = 15;
 8003910:	230f      	movs	r3, #15
 8003912:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 8003914:	2352      	movs	r3, #82	; 0x52
 8003916:	71bb      	strb	r3, [r7, #6]
		break;
 8003918:	e00e      	b.n	8003938 <menuRoll+0x17c>
	case SET_ROLL_DB_SIZE:
		posRow = 25;
 800391a:	2319      	movs	r3, #25
 800391c:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 800391e:	2352      	movs	r3, #82	; 0x52
 8003920:	71bb      	strb	r3, [r7, #6]
		break;
 8003922:	e009      	b.n	8003938 <menuRoll+0x17c>
	case SET_ROLL_DB_CENTER:
		posRow = 35;
 8003924:	2323      	movs	r3, #35	; 0x23
 8003926:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 8003928:	2352      	movs	r3, #82	; 0x52
 800392a:	71bb      	strb	r3, [r7, #6]
		break;
 800392c:	e004      	b.n	8003938 <menuRoll+0x17c>
	case SET_ROLL_SENSE:
		posRow = 45;
 800392e:	232d      	movs	r3, #45	; 0x2d
 8003930:	71fb      	strb	r3, [r7, #7]
		posCol = 65;
 8003932:	2341      	movs	r3, #65	; 0x41
 8003934:	71bb      	strb	r3, [r7, #6]
		break;
 8003936:	bf00      	nop
	}

	ssd1306_SetCursor(posCol, posRow);
 8003938:	79fa      	ldrb	r2, [r7, #7]
 800393a:	79bb      	ldrb	r3, [r7, #6]
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fd4a 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"->");
 8003944:	4914      	ldr	r1, [pc, #80]	; (8003998 <menuRoll+0x1dc>)
 8003946:	4809      	ldr	r0, [pc, #36]	; (800396c <menuRoll+0x1b0>)
 8003948:	f006 fcba 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 800394c:	4a08      	ldr	r2, [pc, #32]	; (8003970 <menuRoll+0x1b4>)
 800394e:	2301      	movs	r3, #1
 8003950:	ca06      	ldmia	r2, {r1, r2}
 8003952:	4806      	ldr	r0, [pc, #24]	; (800396c <menuRoll+0x1b0>)
 8003954:	f000 fd1a 	bl	800438c <ssd1306_WriteString>
	//update screen command is in update display function
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200009ce 	.word	0x200009ce
 8003964:	20000616 	.word	0x20000616
 8003968:	0800ac80 	.word	0x0800ac80
 800396c:	200019ec 	.word	0x200019ec
 8003970:	20000024 	.word	0x20000024
 8003974:	2000135c 	.word	0x2000135c
 8003978:	0800abf0 	.word	0x0800abf0
 800397c:	0800ac04 	.word	0x0800ac04
 8003980:	0800ac18 	.word	0x0800ac18
 8003984:	0800ac2c 	.word	0x0800ac2c
 8003988:	0800ac44 	.word	0x0800ac44
 800398c:	0800ac5c 	.word	0x0800ac5c
 8003990:	20000611 	.word	0x20000611
 8003994:	20000820 	.word	0x20000820
 8003998:	0800ac64 	.word	0x0800ac64

0800399c <menuZoom>:



void menuZoom (void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(2, 0);
 80039a2:	2100      	movs	r1, #0
 80039a4:	2002      	movs	r0, #2
 80039a6:	f000 fd17 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"ZOOM RW:%04d CAL:%04d", zoomAvgDisplay, zoomCalValue);
 80039aa:	4b65      	ldr	r3, [pc, #404]	; (8003b40 <menuZoom+0x1a4>)
 80039ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b64      	ldr	r3, [pc, #400]	; (8003b44 <menuZoom+0x1a8>)
 80039b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b8:	4963      	ldr	r1, [pc, #396]	; (8003b48 <menuZoom+0x1ac>)
 80039ba:	4864      	ldr	r0, [pc, #400]	; (8003b4c <menuZoom+0x1b0>)
 80039bc:	f006 fc80 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 80039c0:	4a63      	ldr	r2, [pc, #396]	; (8003b50 <menuZoom+0x1b4>)
 80039c2:	2301      	movs	r3, #1
 80039c4:	ca06      	ldmia	r2, {r1, r2}
 80039c6:	4861      	ldr	r0, [pc, #388]	; (8003b4c <menuZoom+0x1b0>)
 80039c8:	f000 fce0 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 15);
 80039cc:	210f      	movs	r1, #15
 80039ce:	2002      	movs	r0, #2
 80039d0:	f000 fd02 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DRIFT:       %4d", (int16_t)configData.zoomOffset);
 80039d4:	4b5f      	ldr	r3, [pc, #380]	; (8003b54 <menuZoom+0x1b8>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	b21b      	sxth	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	495e      	ldr	r1, [pc, #376]	; (8003b58 <menuZoom+0x1bc>)
 80039de:	485b      	ldr	r0, [pc, #364]	; (8003b4c <menuZoom+0x1b0>)
 80039e0:	f006 fc6e 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 80039e4:	4a5a      	ldr	r2, [pc, #360]	; (8003b50 <menuZoom+0x1b4>)
 80039e6:	2301      	movs	r3, #1
 80039e8:	ca06      	ldmia	r2, {r1, r2}
 80039ea:	4858      	ldr	r0, [pc, #352]	; (8003b4c <menuZoom+0x1b0>)
 80039ec:	f000 fcce 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 25);
 80039f0:	2119      	movs	r1, #25
 80039f2:	2002      	movs	r0, #2
 80039f4:	f000 fcf0 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DB SIZE:     %4d", (int16_t)configData.zoomDBsize);
 80039f8:	4b56      	ldr	r3, [pc, #344]	; (8003b54 <menuZoom+0x1b8>)
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	b21b      	sxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	4956      	ldr	r1, [pc, #344]	; (8003b5c <menuZoom+0x1c0>)
 8003a02:	4852      	ldr	r0, [pc, #328]	; (8003b4c <menuZoom+0x1b0>)
 8003a04:	f006 fc5c 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003a08:	4a51      	ldr	r2, [pc, #324]	; (8003b50 <menuZoom+0x1b4>)
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	ca06      	ldmia	r2, {r1, r2}
 8003a0e:	484f      	ldr	r0, [pc, #316]	; (8003b4c <menuZoom+0x1b0>)
 8003a10:	f000 fcbc 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 35);
 8003a14:	2123      	movs	r1, #35	; 0x23
 8003a16:	2002      	movs	r0, #2
 8003a18:	f000 fcde 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   DB CENTER:   %4d", (int16_t)configData.zoomDBcenter);
 8003a1c:	4b4d      	ldr	r3, [pc, #308]	; (8003b54 <menuZoom+0x1b8>)
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	b21b      	sxth	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	494e      	ldr	r1, [pc, #312]	; (8003b60 <menuZoom+0x1c4>)
 8003a26:	4849      	ldr	r0, [pc, #292]	; (8003b4c <menuZoom+0x1b0>)
 8003a28:	f006 fc4a 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003a2c:	4a48      	ldr	r2, [pc, #288]	; (8003b50 <menuZoom+0x1b4>)
 8003a2e:	2301      	movs	r3, #1
 8003a30:	ca06      	ldmia	r2, {r1, r2}
 8003a32:	4846      	ldr	r0, [pc, #280]	; (8003b4c <menuZoom+0x1b0>)
 8003a34:	f000 fcaa 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 45);
 8003a38:	212d      	movs	r1, #45	; 0x2d
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	f000 fccc 	bl	80043d8 <ssd1306_SetCursor>
	if (configData.zoomSense == NORMAL)
 8003a40:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <menuZoom+0x1b8>)
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d104      	bne.n	8003a52 <menuZoom+0xb6>
		sprintf(displayBuff,"   SENSE:     NORMAL");
 8003a48:	4946      	ldr	r1, [pc, #280]	; (8003b64 <menuZoom+0x1c8>)
 8003a4a:	4840      	ldr	r0, [pc, #256]	; (8003b4c <menuZoom+0x1b0>)
 8003a4c:	f006 fc38 	bl	800a2c0 <siprintf>
 8003a50:	e003      	b.n	8003a5a <menuZoom+0xbe>
	else
		sprintf(displayBuff,"   SENSE:    REVERSE");
 8003a52:	4945      	ldr	r1, [pc, #276]	; (8003b68 <menuZoom+0x1cc>)
 8003a54:	483d      	ldr	r0, [pc, #244]	; (8003b4c <menuZoom+0x1b0>)
 8003a56:	f006 fc33 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003a5a:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <menuZoom+0x1b4>)
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	ca06      	ldmia	r2, {r1, r2}
 8003a60:	483a      	ldr	r0, [pc, #232]	; (8003b4c <menuZoom+0x1b0>)
 8003a62:	f000 fc93 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 55);
 8003a66:	2137      	movs	r1, #55	; 0x37
 8003a68:	2002      	movs	r0, #2
 8003a6a:	f000 fcb5 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"   EXIT");
 8003a6e:	493f      	ldr	r1, [pc, #252]	; (8003b6c <menuZoom+0x1d0>)
 8003a70:	4836      	ldr	r0, [pc, #216]	; (8003b4c <menuZoom+0x1b0>)
 8003a72:	f006 fc25 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003a76:	4a36      	ldr	r2, [pc, #216]	; (8003b50 <menuZoom+0x1b4>)
 8003a78:	2301      	movs	r3, #1
 8003a7a:	ca06      	ldmia	r2, {r1, r2}
 8003a7c:	4833      	ldr	r0, [pc, #204]	; (8003b4c <menuZoom+0x1b0>)
 8003a7e:	f000 fc85 	bl	800438c <ssd1306_WriteString>

	uint8_t posRow, posCol;

	posCol = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	71bb      	strb	r3, [r7, #6]
	switch (menuItem)
 8003a86:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <menuZoom+0x1d4>)
 8003a88:	f993 3000 	ldrsb.w	r3, [r3]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d81c      	bhi.n	8003aca <menuZoom+0x12e>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <menuZoom+0xfc>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003aad 	.word	0x08003aad
 8003a9c:	08003ab3 	.word	0x08003ab3
 8003aa0:	08003ab9 	.word	0x08003ab9
 8003aa4:	08003abf 	.word	0x08003abf
 8003aa8:	08003ac5 	.word	0x08003ac5
	{
	case ITEM_ZOOM_DRIFT:
		posRow = 15;
 8003aac:	230f      	movs	r3, #15
 8003aae:	71fb      	strb	r3, [r7, #7]
		break;
 8003ab0:	e00d      	b.n	8003ace <menuZoom+0x132>
	case ITEM_ZOOM_DB_SIZE:
		posRow = 25;
 8003ab2:	2319      	movs	r3, #25
 8003ab4:	71fb      	strb	r3, [r7, #7]
		break;
 8003ab6:	e00a      	b.n	8003ace <menuZoom+0x132>
	case ITEM_ZOOM_DB_CENTER:
		posRow = 35;
 8003ab8:	2323      	movs	r3, #35	; 0x23
 8003aba:	71fb      	strb	r3, [r7, #7]
		break;
 8003abc:	e007      	b.n	8003ace <menuZoom+0x132>
	case ITEM_ZOOM_SENSE:
		posRow = 45;
 8003abe:	232d      	movs	r3, #45	; 0x2d
 8003ac0:	71fb      	strb	r3, [r7, #7]
		break;
 8003ac2:	e004      	b.n	8003ace <menuZoom+0x132>
	case ITEM_ZOOM_EXIT:
		posRow = 55;
 8003ac4:	2337      	movs	r3, #55	; 0x37
 8003ac6:	71fb      	strb	r3, [r7, #7]
		break;
 8003ac8:	e001      	b.n	8003ace <menuZoom+0x132>
	default:
		posRow = 15;
 8003aca:	230f      	movs	r3, #15
 8003acc:	71fb      	strb	r3, [r7, #7]
	}


	switch (menuSetting)
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <menuZoom+0x1d8>)
 8003ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d81e      	bhi.n	8003b18 <menuZoom+0x17c>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <menuZoom+0x144>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003afb 	.word	0x08003afb
 8003ae8:	08003b05 	.word	0x08003b05
 8003aec:	08003b0f 	.word	0x08003b0f
	{
	case SET_ZOOM_DRIFT:
		posRow = 15;
 8003af0:	230f      	movs	r3, #15
 8003af2:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 8003af4:	2352      	movs	r3, #82	; 0x52
 8003af6:	71bb      	strb	r3, [r7, #6]
		break;
 8003af8:	e00e      	b.n	8003b18 <menuZoom+0x17c>
	case SET_ZOOM_DB_SIZE:
		posRow = 25;
 8003afa:	2319      	movs	r3, #25
 8003afc:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 8003afe:	2352      	movs	r3, #82	; 0x52
 8003b00:	71bb      	strb	r3, [r7, #6]
		break;
 8003b02:	e009      	b.n	8003b18 <menuZoom+0x17c>
	case SET_ZOOM_DB_CENTER:
		posRow = 35;
 8003b04:	2323      	movs	r3, #35	; 0x23
 8003b06:	71fb      	strb	r3, [r7, #7]
		posCol = 82;
 8003b08:	2352      	movs	r3, #82	; 0x52
 8003b0a:	71bb      	strb	r3, [r7, #6]
		break;
 8003b0c:	e004      	b.n	8003b18 <menuZoom+0x17c>
	case SET_ZOOM_SENSE:
		posRow = 45;
 8003b0e:	232d      	movs	r3, #45	; 0x2d
 8003b10:	71fb      	strb	r3, [r7, #7]
		posCol = 65;
 8003b12:	2341      	movs	r3, #65	; 0x41
 8003b14:	71bb      	strb	r3, [r7, #6]
		break;
 8003b16:	bf00      	nop
	}

	ssd1306_SetCursor(posCol, posRow);
 8003b18:	79fa      	ldrb	r2, [r7, #7]
 8003b1a:	79bb      	ldrb	r3, [r7, #6]
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fc5a 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"->");
 8003b24:	4914      	ldr	r1, [pc, #80]	; (8003b78 <menuZoom+0x1dc>)
 8003b26:	4809      	ldr	r0, [pc, #36]	; (8003b4c <menuZoom+0x1b0>)
 8003b28:	f006 fbca 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003b2c:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <menuZoom+0x1b4>)
 8003b2e:	2301      	movs	r3, #1
 8003b30:	ca06      	ldmia	r2, {r1, r2}
 8003b32:	4806      	ldr	r0, [pc, #24]	; (8003b4c <menuZoom+0x1b0>)
 8003b34:	f000 fc2a 	bl	800438c <ssd1306_WriteString>
	//update screen command is in update display function
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	2000062e 	.word	0x2000062e
 8003b44:	20000b22 	.word	0x20000b22
 8003b48:	0800ac98 	.word	0x0800ac98
 8003b4c:	200019ec 	.word	0x200019ec
 8003b50:	20000024 	.word	0x20000024
 8003b54:	2000135c 	.word	0x2000135c
 8003b58:	0800abf0 	.word	0x0800abf0
 8003b5c:	0800ac04 	.word	0x0800ac04
 8003b60:	0800ac18 	.word	0x0800ac18
 8003b64:	0800ac2c 	.word	0x0800ac2c
 8003b68:	0800ac44 	.word	0x0800ac44
 8003b6c:	0800ac5c 	.word	0x0800ac5c
 8003b70:	20000611 	.word	0x20000611
 8003b74:	20000820 	.word	0x20000820
 8003b78:	0800ac64 	.word	0x0800ac64

08003b7c <menuAux>:



void menuAux (void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(1, 15);
 8003b80:	210f      	movs	r1, #15
 8003b82:	2001      	movs	r0, #1
 8003b84:	f000 fc28 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"F  RAW:%04d CAL:%04d", focusAvgDisplay, focusCalValue);
 8003b88:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <menuAux+0xf4>)
 8003b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <menuAux+0xf8>)
 8003b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b96:	4938      	ldr	r1, [pc, #224]	; (8003c78 <menuAux+0xfc>)
 8003b98:	4838      	ldr	r0, [pc, #224]	; (8003c7c <menuAux+0x100>)
 8003b9a:	f006 fb91 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003b9e:	4a38      	ldr	r2, [pc, #224]	; (8003c80 <menuAux+0x104>)
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	ca06      	ldmia	r2, {r1, r2}
 8003ba4:	4835      	ldr	r0, [pc, #212]	; (8003c7c <menuAux+0x100>)
 8003ba6:	f000 fbf1 	bl	800438c <ssd1306_WriteString>

	//ssd1306_SetCursor(40,15);
	//sprintf(displayBuff,"AUX MENU");
	//ssd1306_WriteString(displayBuff, Font_6x8, White);

	ssd1306_SetCursor(1, 25);
 8003baa:	2119      	movs	r1, #25
 8003bac:	2001      	movs	r0, #1
 8003bae:	f000 fc13 	bl	80043d8 <ssd1306_SetCursor>
	if (rollStatus)
 8003bb2:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <menuAux+0x108>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <menuAux+0x56>
		sprintf(displayBuff,"X1 RAW:%04d CAL:%04d", rollAvgDisplay, rollCalValue);
 8003bba:	4b33      	ldr	r3, [pc, #204]	; (8003c88 <menuAux+0x10c>)
 8003bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <menuAux+0x110>)
 8003bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc8:	4931      	ldr	r1, [pc, #196]	; (8003c90 <menuAux+0x114>)
 8003bca:	482c      	ldr	r0, [pc, #176]	; (8003c7c <menuAux+0x100>)
 8003bcc:	f006 fb78 	bl	800a2c0 <siprintf>
 8003bd0:	e007      	b.n	8003be2 <menuAux+0x66>
	else
		sprintf(displayBuff,"X1 RAW:%04d CAL: OFF", rollAvgDisplay);
 8003bd2:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <menuAux+0x10c>)
 8003bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	492e      	ldr	r1, [pc, #184]	; (8003c94 <menuAux+0x118>)
 8003bdc:	4827      	ldr	r0, [pc, #156]	; (8003c7c <menuAux+0x100>)
 8003bde:	f006 fb6f 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003be2:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <menuAux+0x104>)
 8003be4:	2301      	movs	r3, #1
 8003be6:	ca06      	ldmia	r2, {r1, r2}
 8003be8:	4824      	ldr	r0, [pc, #144]	; (8003c7c <menuAux+0x100>)
 8003bea:	f000 fbcf 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(1, 35);
 8003bee:	2123      	movs	r1, #35	; 0x23
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	f000 fbf1 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"Y1 RAW:%04d CAL:%04d", zoomAvgDisplay, zoomCalValue);
 8003bf6:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <menuAux+0x11c>)
 8003bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <menuAux+0x120>)
 8003c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c04:	4926      	ldr	r1, [pc, #152]	; (8003ca0 <menuAux+0x124>)
 8003c06:	481d      	ldr	r0, [pc, #116]	; (8003c7c <menuAux+0x100>)
 8003c08:	f006 fb5a 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <menuAux+0x104>)
 8003c0e:	2301      	movs	r3, #1
 8003c10:	ca06      	ldmia	r2, {r1, r2}
 8003c12:	481a      	ldr	r0, [pc, #104]	; (8003c7c <menuAux+0x100>)
 8003c14:	f000 fbba 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(1, 45);
 8003c18:	212d      	movs	r1, #45	; 0x2d
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f000 fbdc 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"X2 RAW:%04d CAL:%04d", panAvgDisplay, panCalValue);
 8003c20:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <menuAux+0x128>)
 8003c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <menuAux+0x12c>)
 8003c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c2e:	491f      	ldr	r1, [pc, #124]	; (8003cac <menuAux+0x130>)
 8003c30:	4812      	ldr	r0, [pc, #72]	; (8003c7c <menuAux+0x100>)
 8003c32:	f006 fb45 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <menuAux+0x104>)
 8003c38:	2301      	movs	r3, #1
 8003c3a:	ca06      	ldmia	r2, {r1, r2}
 8003c3c:	480f      	ldr	r0, [pc, #60]	; (8003c7c <menuAux+0x100>)
 8003c3e:	f000 fba5 	bl	800438c <ssd1306_WriteString>

	ssd1306_SetCursor(1, 55);
 8003c42:	2137      	movs	r1, #55	; 0x37
 8003c44:	2001      	movs	r0, #1
 8003c46:	f000 fbc7 	bl	80043d8 <ssd1306_SetCursor>
	sprintf(displayBuff,"Y2 RAW:%04d CAL:%04d", tiltAvgDisplay, tiltCalValue);
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <menuAux+0x134>)
 8003c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <menuAux+0x138>)
 8003c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c58:	4917      	ldr	r1, [pc, #92]	; (8003cb8 <menuAux+0x13c>)
 8003c5a:	4808      	ldr	r0, [pc, #32]	; (8003c7c <menuAux+0x100>)
 8003c5c:	f006 fb30 	bl	800a2c0 <siprintf>
	ssd1306_WriteString(displayBuff, Font_6x8, White);
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <menuAux+0x104>)
 8003c62:	2301      	movs	r3, #1
 8003c64:	ca06      	ldmia	r2, {r1, r2}
 8003c66:	4805      	ldr	r0, [pc, #20]	; (8003c7c <menuAux+0x100>)
 8003c68:	f000 fb90 	bl	800438c <ssd1306_WriteString>
	//	ssd1306_Line((rawTick[i]/2)+1,9,(rawTick[i]/2)+1,10,White);
	//	ssd1306_Line((avgTick[i]/2)+1,12,(avgTick[i]/2)+1,13,White);
	//}

	//update screen command is in update display function
}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000b24 	.word	0x20000b24
 8003c74:	200006fc 	.word	0x200006fc
 8003c78:	0800acb0 	.word	0x0800acb0
 8003c7c:	200019ec 	.word	0x200019ec
 8003c80:	20000024 	.word	0x20000024
 8003c84:	20000610 	.word	0x20000610
 8003c88:	200009ce 	.word	0x200009ce
 8003c8c:	20000616 	.word	0x20000616
 8003c90:	0800acc8 	.word	0x0800acc8
 8003c94:	0800ace0 	.word	0x0800ace0
 8003c98:	2000062e 	.word	0x2000062e
 8003c9c:	20000b22 	.word	0x20000b22
 8003ca0:	0800acf8 	.word	0x0800acf8
 8003ca4:	200008ee 	.word	0x200008ee
 8003ca8:	2000135a 	.word	0x2000135a
 8003cac:	0800ad10 	.word	0x0800ad10
 8003cb0:	20001354 	.word	0x20001354
 8003cb4:	200009d2 	.word	0x200009d2
 8003cb8:	0800ad28 	.word	0x0800ad28

08003cbc <sendCameraData>:


void sendCameraData (void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
	dataTX[0] = 0xAA;
 8003cc0:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <sendCameraData+0x98>)
 8003cc2:	22aa      	movs	r2, #170	; 0xaa
 8003cc4:	701a      	strb	r2, [r3, #0]
	dataTX[1] = (uint8_t)(headData[FOCUS] >> 8);
 8003cc6:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <sendCameraData+0x9c>)
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <sendCameraData+0x98>)
 8003cd2:	705a      	strb	r2, [r3, #1]
	dataTX[2] = (uint8_t)headData[FOCUS];
 8003cd4:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <sendCameraData+0x9c>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <sendCameraData+0x98>)
 8003cdc:	709a      	strb	r2, [r3, #2]
	dataTX[3] = (uint8_t)(headData[ZOOM] >> 8);
 8003cde:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <sendCameraData+0x9c>)
 8003ce0:	885b      	ldrh	r3, [r3, #2]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <sendCameraData+0x98>)
 8003cea:	70da      	strb	r2, [r3, #3]
	dataTX[4] = (uint8_t)headData[ZOOM];
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <sendCameraData+0x9c>)
 8003cee:	885b      	ldrh	r3, [r3, #2]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <sendCameraData+0x98>)
 8003cf4:	711a      	strb	r2, [r3, #4]
	dataTX[5] = (uint8_t)(headData[PAN] >> 8);
 8003cf6:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <sendCameraData+0x9c>)
 8003cf8:	889b      	ldrh	r3, [r3, #4]
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <sendCameraData+0x98>)
 8003d02:	715a      	strb	r2, [r3, #5]
	dataTX[6] = (uint8_t)headData[PAN];
 8003d04:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <sendCameraData+0x9c>)
 8003d06:	889b      	ldrh	r3, [r3, #4]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <sendCameraData+0x98>)
 8003d0c:	719a      	strb	r2, [r3, #6]
	dataTX[7] = (uint8_t)(headData[TILT] >> 8);
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <sendCameraData+0x9c>)
 8003d10:	88db      	ldrh	r3, [r3, #6]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <sendCameraData+0x98>)
 8003d1a:	71da      	strb	r2, [r3, #7]
	dataTX[8] = (uint8_t)headData[TILT];
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <sendCameraData+0x9c>)
 8003d1e:	88db      	ldrh	r3, [r3, #6]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <sendCameraData+0x98>)
 8003d24:	721a      	strb	r2, [r3, #8]
	dataTX[9] = (uint8_t)(headData[ROLL] >> 8);
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <sendCameraData+0x9c>)
 8003d28:	891b      	ldrh	r3, [r3, #8]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <sendCameraData+0x98>)
 8003d32:	725a      	strb	r2, [r3, #9]
	dataTX[10] = (uint8_t)headData[ROLL];
 8003d34:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <sendCameraData+0x9c>)
 8003d36:	891b      	ldrh	r3, [r3, #8]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <sendCameraData+0x98>)
 8003d3c:	729a      	strb	r2, [r3, #10]
	dataTX[11] = 0x55;
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <sendCameraData+0x98>)
 8003d40:	2255      	movs	r2, #85	; 0x55
 8003d42:	72da      	strb	r2, [r3, #11]

	HAL_UART_Transmit_IT(&huart2, dataTX , 12);
 8003d44:	220c      	movs	r2, #12
 8003d46:	4903      	ldr	r1, [pc, #12]	; (8003d54 <sendCameraData+0x98>)
 8003d48:	4804      	ldr	r0, [pc, #16]	; (8003d5c <sendCameraData+0xa0>)
 8003d4a:	f005 fb97 	bl	800947c <HAL_UART_Transmit_IT>
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200009dc 	.word	0x200009dc
 8003d58:	20000618 	.word	0x20000618
 8003d5c:	200013b0 	.word	0x200013b0

08003d60 <saveConfigData>:

void saveConfigData (void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
	//save config data (structure) to flash
	HAL_FLASH_Unlock();
 8003d66:	f002 fa3f 	bl	80061e8 <HAL_FLASH_Unlock>

	flashAddr = FLASH_PAGE_ADDR;
 8003d6a:	4b84      	ldr	r3, [pc, #528]	; (8003f7c <saveConfigData+0x21c>)
 8003d6c:	4a84      	ldr	r2, [pc, #528]	; (8003f80 <saveConfigData+0x220>)
 8003d6e:	601a      	str	r2, [r3, #0]

	uint32_t page_error = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef flashstatus;
	FLASH_EraseInitTypeDef s_eraseinit;

	s_eraseinit.TypeErase = FLASH_TYPEERASE_PAGES;
 8003d74:	2300      	movs	r3, #0
 8003d76:	607b      	str	r3, [r7, #4]
	s_eraseinit.NbPages = 1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
	s_eraseinit.PageAddress = flashAddr;
 8003d7c:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <saveConfigData+0x21c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60bb      	str	r3, [r7, #8]

	flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003d82:	f107 0210 	add.w	r2, r7, #16
 8003d86:	1d3b      	adds	r3, r7, #4
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f002 faf0 	bl	8006370 <HAL_FLASHEx_Erase>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]
	flashstatus++; //hack to eliminate variable not used warning
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	3301      	adds	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr, (uint32_t) configData.panOffset);
 8003d9a:	4b78      	ldr	r3, [pc, #480]	; (8003f7c <saveConfigData+0x21c>)
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	4b79      	ldr	r3, [pc, #484]	; (8003f84 <saveConfigData+0x224>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	2002      	movs	r0, #2
 8003daa:	f002 f9ad 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.panDBsize);
 8003dae:	4b73      	ldr	r3, [pc, #460]	; (8003f7c <saveConfigData+0x21c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4a71      	ldr	r2, [pc, #452]	; (8003f7c <saveConfigData+0x21c>)
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4b70      	ldr	r3, [pc, #448]	; (8003f7c <saveConfigData+0x21c>)
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	4b71      	ldr	r3, [pc, #452]	; (8003f84 <saveConfigData+0x224>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	2002      	movs	r0, #2
 8003dc8:	f002 f99e 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.panDBcenter);
 8003dcc:	4b6b      	ldr	r3, [pc, #428]	; (8003f7c <saveConfigData+0x21c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4a6a      	ldr	r2, [pc, #424]	; (8003f7c <saveConfigData+0x21c>)
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b69      	ldr	r3, [pc, #420]	; (8003f7c <saveConfigData+0x21c>)
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	4b6a      	ldr	r3, [pc, #424]	; (8003f84 <saveConfigData+0x224>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	2002      	movs	r0, #2
 8003de6:	f002 f98f 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.panSense);
 8003dea:	4b64      	ldr	r3, [pc, #400]	; (8003f7c <saveConfigData+0x21c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4a62      	ldr	r2, [pc, #392]	; (8003f7c <saveConfigData+0x21c>)
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <saveConfigData+0x21c>)
 8003df6:	6819      	ldr	r1, [r3, #0]
 8003df8:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <saveConfigData+0x224>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	2002      	movs	r0, #2
 8003e04:	f002 f980 	bl	8006108 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.tiltOffset);
 8003e08:	4b5c      	ldr	r3, [pc, #368]	; (8003f7c <saveConfigData+0x21c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4a5b      	ldr	r2, [pc, #364]	; (8003f7c <saveConfigData+0x21c>)
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <saveConfigData+0x21c>)
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	4b5b      	ldr	r3, [pc, #364]	; (8003f84 <saveConfigData+0x224>)
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	2002      	movs	r0, #2
 8003e22:	f002 f971 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.tiltDBsize);
 8003e26:	4b55      	ldr	r3, [pc, #340]	; (8003f7c <saveConfigData+0x21c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4a53      	ldr	r2, [pc, #332]	; (8003f7c <saveConfigData+0x21c>)
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b52      	ldr	r3, [pc, #328]	; (8003f7c <saveConfigData+0x21c>)
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <saveConfigData+0x224>)
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	2002      	movs	r0, #2
 8003e40:	f002 f962 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.tiltDBcenter);
 8003e44:	4b4d      	ldr	r3, [pc, #308]	; (8003f7c <saveConfigData+0x21c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4a4c      	ldr	r2, [pc, #304]	; (8003f7c <saveConfigData+0x21c>)
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b4b      	ldr	r3, [pc, #300]	; (8003f7c <saveConfigData+0x21c>)
 8003e50:	6819      	ldr	r1, [r3, #0]
 8003e52:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <saveConfigData+0x224>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	2002      	movs	r0, #2
 8003e5e:	f002 f953 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.tiltSense);
 8003e62:	4b46      	ldr	r3, [pc, #280]	; (8003f7c <saveConfigData+0x21c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4a44      	ldr	r2, [pc, #272]	; (8003f7c <saveConfigData+0x21c>)
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b43      	ldr	r3, [pc, #268]	; (8003f7c <saveConfigData+0x21c>)
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	4b44      	ldr	r3, [pc, #272]	; (8003f84 <saveConfigData+0x224>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	461a      	mov	r2, r3
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	2002      	movs	r0, #2
 8003e7c:	f002 f944 	bl	8006108 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.rollOffset);
 8003e80:	4b3e      	ldr	r3, [pc, #248]	; (8003f7c <saveConfigData+0x21c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4a3d      	ldr	r2, [pc, #244]	; (8003f7c <saveConfigData+0x21c>)
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b3c      	ldr	r3, [pc, #240]	; (8003f7c <saveConfigData+0x21c>)
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <saveConfigData+0x224>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	2002      	movs	r0, #2
 8003e9a:	f002 f935 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.rollDBsize);
 8003e9e:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <saveConfigData+0x21c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4a35      	ldr	r2, [pc, #212]	; (8003f7c <saveConfigData+0x21c>)
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <saveConfigData+0x21c>)
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <saveConfigData+0x224>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	2002      	movs	r0, #2
 8003eb8:	f002 f926 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.rollDBcenter);
 8003ebc:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <saveConfigData+0x21c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4a2e      	ldr	r2, [pc, #184]	; (8003f7c <saveConfigData+0x21c>)
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <saveConfigData+0x21c>)
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <saveConfigData+0x224>)
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	f002 f917 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.rollSense);
 8003eda:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <saveConfigData+0x21c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <saveConfigData+0x21c>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <saveConfigData+0x21c>)
 8003ee6:	6819      	ldr	r1, [r3, #0]
 8003ee8:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <saveConfigData+0x224>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	461a      	mov	r2, r3
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	2002      	movs	r0, #2
 8003ef4:	f002 f908 	bl	8006108 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.zoomOffset);
 8003ef8:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <saveConfigData+0x21c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <saveConfigData+0x21c>)
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <saveConfigData+0x21c>)
 8003f04:	6819      	ldr	r1, [r3, #0]
 8003f06:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <saveConfigData+0x224>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	2002      	movs	r0, #2
 8003f12:	f002 f8f9 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.zoomDBsize);
 8003f16:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <saveConfigData+0x21c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <saveConfigData+0x21c>)
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <saveConfigData+0x21c>)
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <saveConfigData+0x224>)
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	2002      	movs	r0, #2
 8003f30:	f002 f8ea 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.zoomDBcenter);
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <saveConfigData+0x21c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <saveConfigData+0x21c>)
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <saveConfigData+0x21c>)
 8003f40:	6819      	ldr	r1, [r3, #0]
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <saveConfigData+0x224>)
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	461a      	mov	r2, r3
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	f002 f8db 	bl	8006108 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddr+=4, (uint32_t) configData.zoomSense);
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <saveConfigData+0x21c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <saveConfigData+0x21c>)
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <saveConfigData+0x21c>)
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <saveConfigData+0x224>)
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	461a      	mov	r2, r3
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	2002      	movs	r0, #2
 8003f6c:	f002 f8cc 	bl	8006108 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8003f70:	f002 f960 	bl	8006234 <HAL_FLASH_Lock>
}
 8003f74:	bf00      	nop
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	0807f800 	.word	0x0807f800
 8003f84:	2000135c 	.word	0x2000135c

08003f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <ssd1306_Reset>:
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
	// CS = High (not selected)
	HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fa2:	480b      	ldr	r0, [pc, #44]	; (8003fd0 <ssd1306_Reset+0x38>)
 8003fa4:	f002 fc2a 	bl	80067fc <HAL_GPIO_WritePin>

	// Reset the OLED
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fae:	4808      	ldr	r0, [pc, #32]	; (8003fd0 <ssd1306_Reset+0x38>)
 8003fb0:	f002 fc24 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003fb4:	200a      	movs	r0, #10
 8003fb6:	f000 fe0d 	bl	8004bd4 <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fc0:	4803      	ldr	r0, [pc, #12]	; (8003fd0 <ssd1306_Reset+0x38>)
 8003fc2:	f002 fc1b 	bl	80067fc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003fc6:	200a      	movs	r0, #10
 8003fc8:	f000 fe04 	bl	8004bd4 <HAL_Delay>
}
 8003fcc:	bf00      	nop
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	48000400 	.word	0x48000400

08003fd4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fe4:	480c      	ldr	r0, [pc, #48]	; (8004018 <ssd1306_WriteCommand+0x44>)
 8003fe6:	f002 fc09 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8003fea:	2200      	movs	r2, #0
 8003fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff0:	4809      	ldr	r0, [pc, #36]	; (8004018 <ssd1306_WriteCommand+0x44>)
 8003ff2:	f002 fc03 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8003ff6:	1df9      	adds	r1, r7, #7
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	4807      	ldr	r0, [pc, #28]	; (800401c <ssd1306_WriteCommand+0x48>)
 8004000:	f004 f907 	bl	8008212 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8004004:	2201      	movs	r2, #1
 8004006:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800400a:	4803      	ldr	r0, [pc, #12]	; (8004018 <ssd1306_WriteCommand+0x44>)
 800400c:	f002 fbf6 	bl	80067fc <HAL_GPIO_WritePin>
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	48000400 	.word	0x48000400
 800401c:	20000500 	.word	0x20000500

08004020 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800402a:	2200      	movs	r2, #0
 800402c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004030:	480d      	ldr	r0, [pc, #52]	; (8004068 <ssd1306_WriteData+0x48>)
 8004032:	f002 fbe3 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8004036:	2201      	movs	r2, #1
 8004038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800403c:	480a      	ldr	r0, [pc, #40]	; (8004068 <ssd1306_WriteData+0x48>)
 800403e:	f002 fbdd 	bl	80067fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	b29a      	uxth	r2, r3
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4807      	ldr	r0, [pc, #28]	; (800406c <ssd1306_WriteData+0x4c>)
 800404e:	f004 f8e0 	bl	8008212 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8004052:	2201      	movs	r2, #1
 8004054:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004058:	4803      	ldr	r0, [pc, #12]	; (8004068 <ssd1306_WriteData+0x48>)
 800405a:	f002 fbcf 	bl	80067fc <HAL_GPIO_WritePin>
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	48000400 	.word	0x48000400
 800406c:	20000500 	.word	0x20000500

08004070 <ssd1306_Init>:
    
    SSD1306.Initialized = 1;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8004074:	f7ff ff90 	bl	8003f98 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(500);
 8004078:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800407c:	f000 fdaa 	bl	8004bd4 <HAL_Delay>

    // Init OLED
    //ssd1306_WriteCommand(0xFD);
    //ssd1306_WriteCommand(0x12);

    ssd1306_WriteCommand(0xAE); //display off
 8004080:	20ae      	movs	r0, #174	; 0xae
 8004082:	f7ff ffa7 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5);
 8004086:	20d5      	movs	r0, #213	; 0xd5
 8004088:	f7ff ffa4 	bl	8003fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA0);
 800408c:	20a0      	movs	r0, #160	; 0xa0
 800408e:	f7ff ffa1 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA8);
 8004092:	20a8      	movs	r0, #168	; 0xa8
 8004094:	f7ff ff9e 	bl	8003fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F);
 8004098:	203f      	movs	r0, #63	; 0x3f
 800409a:	f7ff ff9b 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3);
 800409e:	20d3      	movs	r0, #211	; 0xd3
 80040a0:	f7ff ff98 	bl	8003fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00);
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7ff ff95 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40);
 80040aa:	2040      	movs	r0, #64	; 0x40
 80040ac:	f7ff ff92 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA1);
 80040b0:	20a1      	movs	r0, #161	; 0xa1
 80040b2:	f7ff ff8f 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xC8);
 80040b6:	20c8      	movs	r0, #200	; 0xc8
 80040b8:	f7ff ff8c 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA);
 80040bc:	20da      	movs	r0, #218	; 0xda
 80040be:	f7ff ff89 	bl	8003fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80040c2:	2012      	movs	r0, #18
 80040c4:	f7ff ff86 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81);
 80040c8:	2081      	movs	r0, #129	; 0x81
 80040ca:	f7ff ff83 	bl	8003fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x7F); //0x7F is midrange contrast
 80040ce:	207f      	movs	r0, #127	; 0x7f
 80040d0:	f7ff ff80 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9);
 80040d4:	20d9      	movs	r0, #217	; 0xd9
 80040d6:	f7ff ff7d 	bl	8003fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x82);
 80040da:	2082      	movs	r0, #130	; 0x82
 80040dc:	f7ff ff7a 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB);
 80040e0:	20db      	movs	r0, #219	; 0xdb
 80040e2:	f7ff ff77 	bl	8003fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x34);
 80040e6:	2034      	movs	r0, #52	; 0x34
 80040e8:	f7ff ff74 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4);
 80040ec:	20a4      	movs	r0, #164	; 0xa4
 80040ee:	f7ff ff71 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA6);
 80040f2:	20a6      	movs	r0, #166	; 0xa6
 80040f4:	f7ff ff6e 	bl	8003fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80040f8:	20af      	movs	r0, #175	; 0xaf
 80040fa:	f7ff ff6b 	bl	8003fd4 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80040fe:	2000      	movs	r0, #0
 8004100:	f000 f810 	bl	8004124 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004104:	f000 f832 	bl	800416c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <ssd1306_Init+0xb0>)
 800410a:	2200      	movs	r2, #0
 800410c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <ssd1306_Init+0xb0>)
 8004110:	2200      	movs	r2, #0
 8004112:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8004114:	4b02      	ldr	r3, [pc, #8]	; (8004120 <ssd1306_Init+0xb0>)
 8004116:	2201      	movs	r2, #1
 8004118:	715a      	strb	r2, [r3, #5]
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200004e0 	.word	0x200004e0

08004124 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e00d      	b.n	8004150 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <ssd1306_Fill+0x1a>
 800413a:	2100      	movs	r1, #0
 800413c:	e000      	b.n	8004140 <ssd1306_Fill+0x1c>
 800413e:	21ff      	movs	r1, #255	; 0xff
 8004140:	4a09      	ldr	r2, [pc, #36]	; (8004168 <ssd1306_Fill+0x44>)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	460a      	mov	r2, r1
 8004148:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3301      	adds	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004156:	d3ed      	bcc.n	8004134 <ssd1306_Fill+0x10>
    }
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	200000e0 	.word	0x200000e0

0800416c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004172:	2300      	movs	r3, #0
 8004174:	71fb      	strb	r3, [r7, #7]
 8004176:	e016      	b.n	80041a6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	3b50      	subs	r3, #80	; 0x50
 800417c:	b2db      	uxtb	r3, r3
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ff28 	bl	8003fd4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8004184:	2000      	movs	r0, #0
 8004186:	f7ff ff25 	bl	8003fd4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800418a:	2010      	movs	r0, #16
 800418c:	f7ff ff22 	bl	8003fd4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	01db      	lsls	r3, r3, #7
 8004194:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <ssd1306_UpdateScreen+0x4c>)
 8004196:	4413      	add	r3, r2
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff40 	bl	8004020 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	3301      	adds	r3, #1
 80041a4:	71fb      	strb	r3, [r7, #7]
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	2b07      	cmp	r3, #7
 80041aa:	d9e5      	bls.n	8004178 <ssd1306_UpdateScreen+0xc>
    }
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200000e0 	.word	0x200000e0

080041bc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
 80041c6:	460b      	mov	r3, r1
 80041c8:	71bb      	strb	r3, [r7, #6]
 80041ca:	4613      	mov	r3, r2
 80041cc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	db48      	blt.n	8004268 <ssd1306_DrawPixel+0xac>
 80041d6:	79bb      	ldrb	r3, [r7, #6]
 80041d8:	2b3f      	cmp	r3, #63	; 0x3f
 80041da:	d845      	bhi.n	8004268 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <ssd1306_DrawPixel+0xb8>)
 80041de:	791b      	ldrb	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d006      	beq.n	80041f2 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80041e4:	797b      	ldrb	r3, [r7, #5]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bf0c      	ite	eq
 80041ea:	2301      	moveq	r3, #1
 80041ec:	2300      	movne	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80041f2:	797b      	ldrb	r3, [r7, #5]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d11a      	bne.n	800422e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80041f8:	79fa      	ldrb	r2, [r7, #7]
 80041fa:	79bb      	ldrb	r3, [r7, #6]
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	b2d8      	uxtb	r0, r3
 8004200:	4603      	mov	r3, r0
 8004202:	01db      	lsls	r3, r3, #7
 8004204:	4413      	add	r3, r2
 8004206:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <ssd1306_DrawPixel+0xbc>)
 8004208:	5cd3      	ldrb	r3, [r2, r3]
 800420a:	b25a      	sxtb	r2, r3
 800420c:	79bb      	ldrb	r3, [r7, #6]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f303 	lsl.w	r3, r1, r3
 8004218:	b25b      	sxtb	r3, r3
 800421a:	4313      	orrs	r3, r2
 800421c:	b259      	sxtb	r1, r3
 800421e:	79fa      	ldrb	r2, [r7, #7]
 8004220:	4603      	mov	r3, r0
 8004222:	01db      	lsls	r3, r3, #7
 8004224:	4413      	add	r3, r2
 8004226:	b2c9      	uxtb	r1, r1
 8004228:	4a13      	ldr	r2, [pc, #76]	; (8004278 <ssd1306_DrawPixel+0xbc>)
 800422a:	54d1      	strb	r1, [r2, r3]
 800422c:	e01d      	b.n	800426a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800422e:	79fa      	ldrb	r2, [r7, #7]
 8004230:	79bb      	ldrb	r3, [r7, #6]
 8004232:	08db      	lsrs	r3, r3, #3
 8004234:	b2d8      	uxtb	r0, r3
 8004236:	4603      	mov	r3, r0
 8004238:	01db      	lsls	r3, r3, #7
 800423a:	4413      	add	r3, r2
 800423c:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <ssd1306_DrawPixel+0xbc>)
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	b25a      	sxtb	r2, r3
 8004242:	79bb      	ldrb	r3, [r7, #6]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	2101      	movs	r1, #1
 800424a:	fa01 f303 	lsl.w	r3, r1, r3
 800424e:	b25b      	sxtb	r3, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	b25b      	sxtb	r3, r3
 8004254:	4013      	ands	r3, r2
 8004256:	b259      	sxtb	r1, r3
 8004258:	79fa      	ldrb	r2, [r7, #7]
 800425a:	4603      	mov	r3, r0
 800425c:	01db      	lsls	r3, r3, #7
 800425e:	4413      	add	r3, r2
 8004260:	b2c9      	uxtb	r1, r1
 8004262:	4a05      	ldr	r2, [pc, #20]	; (8004278 <ssd1306_DrawPixel+0xbc>)
 8004264:	54d1      	strb	r1, [r2, r3]
 8004266:	e000      	b.n	800426a <ssd1306_DrawPixel+0xae>
        return;
 8004268:	bf00      	nop
    }
}
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	200004e0 	.word	0x200004e0
 8004278:	200000e0 	.word	0x200000e0

0800427c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	4604      	mov	r4, r0
 8004284:	1d38      	adds	r0, r7, #4
 8004286:	e880 0006 	stmia.w	r0, {r1, r2}
 800428a:	461a      	mov	r2, r3
 800428c:	4623      	mov	r3, r4
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	4613      	mov	r3, r2
 8004292:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b1f      	cmp	r3, #31
 8004298:	d902      	bls.n	80042a0 <ssd1306_WriteChar+0x24>
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b7e      	cmp	r3, #126	; 0x7e
 800429e:	d901      	bls.n	80042a4 <ssd1306_WriteChar+0x28>
        return 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e06d      	b.n	8004380 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80042a4:	4b38      	ldr	r3, [pc, #224]	; (8004388 <ssd1306_WriteChar+0x10c>)
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	793b      	ldrb	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	2b80      	cmp	r3, #128	; 0x80
 80042b0:	dc06      	bgt.n	80042c0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80042b2:	4b35      	ldr	r3, [pc, #212]	; (8004388 <ssd1306_WriteChar+0x10c>)
 80042b4:	885b      	ldrh	r3, [r3, #2]
 80042b6:	461a      	mov	r2, r3
 80042b8:	797b      	ldrb	r3, [r7, #5]
 80042ba:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	dd01      	ble.n	80042c4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e05d      	b.n	8004380 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	e04c      	b.n	8004364 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	3b20      	subs	r3, #32
 80042d0:	7979      	ldrb	r1, [r7, #5]
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4619      	mov	r1, r3
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	440b      	add	r3, r1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	4413      	add	r3, r2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80042e4:	2300      	movs	r3, #0
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	e034      	b.n	8004354 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d012      	beq.n	8004320 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80042fa:	4b23      	ldr	r3, [pc, #140]	; (8004388 <ssd1306_WriteChar+0x10c>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4413      	add	r3, r2
 8004306:	b2d8      	uxtb	r0, r3
 8004308:	4b1f      	ldr	r3, [pc, #124]	; (8004388 <ssd1306_WriteChar+0x10c>)
 800430a:	885b      	ldrh	r3, [r3, #2]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	4413      	add	r3, r2
 8004314:	b2db      	uxtb	r3, r3
 8004316:	7bba      	ldrb	r2, [r7, #14]
 8004318:	4619      	mov	r1, r3
 800431a:	f7ff ff4f 	bl	80041bc <ssd1306_DrawPixel>
 800431e:	e016      	b.n	800434e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <ssd1306_WriteChar+0x10c>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	4413      	add	r3, r2
 800432c:	b2d8      	uxtb	r0, r3
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <ssd1306_WriteChar+0x10c>)
 8004330:	885b      	ldrh	r3, [r3, #2]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	4413      	add	r3, r2
 800433a:	b2d9      	uxtb	r1, r3
 800433c:	7bbb      	ldrb	r3, [r7, #14]
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	f7ff ff37 	bl	80041bc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	3301      	adds	r3, #1
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	793b      	ldrb	r3, [r7, #4]
 8004356:	461a      	mov	r2, r3
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4293      	cmp	r3, r2
 800435c:	d3c5      	bcc.n	80042ea <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3301      	adds	r3, #1
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	797b      	ldrb	r3, [r7, #5]
 8004366:	461a      	mov	r2, r3
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	4293      	cmp	r3, r2
 800436c:	d3ad      	bcc.n	80042ca <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <ssd1306_WriteChar+0x10c>)
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	793b      	ldrb	r3, [r7, #4]
 8004374:	b29b      	uxth	r3, r3
 8004376:	4413      	add	r3, r2
 8004378:	b29a      	uxth	r2, r3
 800437a:	4b03      	ldr	r3, [pc, #12]	; (8004388 <ssd1306_WriteChar+0x10c>)
 800437c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800437e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3724      	adds	r7, #36	; 0x24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd90      	pop	{r4, r7, pc}
 8004388:	200004e0 	.word	0x200004e0

0800438c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	1d38      	adds	r0, r7, #4
 8004396:	e880 0006 	stmia.w	r0, {r1, r2}
 800439a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800439c:	e012      	b.n	80043c4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	7818      	ldrb	r0, [r3, #0]
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	1d3a      	adds	r2, r7, #4
 80043a6:	ca06      	ldmia	r2, {r1, r2}
 80043a8:	f7ff ff68 	bl	800427c <ssd1306_WriteChar>
 80043ac:	4603      	mov	r3, r0
 80043ae:	461a      	mov	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d002      	beq.n	80043be <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	e008      	b.n	80043d0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3301      	adds	r3, #1
 80043c2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e8      	bne.n	800439e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	781b      	ldrb	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	460a      	mov	r2, r1
 80043e2:	71fb      	strb	r3, [r7, #7]
 80043e4:	4613      	mov	r3, r2
 80043e6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <ssd1306_SetCursor+0x2c>)
 80043ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80043f0:	79bb      	ldrb	r3, [r7, #6]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <ssd1306_SetCursor+0x2c>)
 80043f6:	805a      	strh	r2, [r3, #2]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	200004e0 	.word	0x200004e0

08004408 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	4604      	mov	r4, r0
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4623      	mov	r3, r4
 8004418:	71fb      	strb	r3, [r7, #7]
 800441a:	4603      	mov	r3, r0
 800441c:	71bb      	strb	r3, [r7, #6]
 800441e:	460b      	mov	r3, r1
 8004420:	717b      	strb	r3, [r7, #5]
 8004422:	4613      	mov	r3, r2
 8004424:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8004426:	797a      	ldrb	r2, [r7, #5]
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	bfb8      	it	lt
 8004430:	425b      	neglt	r3, r3
 8004432:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8004434:	793a      	ldrb	r2, [r7, #4]
 8004436:	79bb      	ldrb	r3, [r7, #6]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfb8      	it	lt
 800443e:	425b      	neglt	r3, r3
 8004440:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8004442:	79fa      	ldrb	r2, [r7, #7]
 8004444:	797b      	ldrb	r3, [r7, #5]
 8004446:	429a      	cmp	r2, r3
 8004448:	d201      	bcs.n	800444e <ssd1306_Line+0x46>
 800444a:	2301      	movs	r3, #1
 800444c:	e001      	b.n	8004452 <ssd1306_Line+0x4a>
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8004454:	79ba      	ldrb	r2, [r7, #6]
 8004456:	793b      	ldrb	r3, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d201      	bcs.n	8004460 <ssd1306_Line+0x58>
 800445c:	2301      	movs	r3, #1
 800445e:	e001      	b.n	8004464 <ssd1306_Line+0x5c>
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
 8004464:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	61fb      	str	r3, [r7, #28]
  int32_t error2;
	
  ssd1306_DrawPixel(x2, y2, color);
 800446e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004472:	7939      	ldrb	r1, [r7, #4]
 8004474:	797b      	ldrb	r3, [r7, #5]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fea0 	bl	80041bc <ssd1306_DrawPixel>
	while((x1 != x2) || (y1 != y2))
 800447c:	e024      	b.n	80044c8 <ssd1306_Line+0xc0>
	{
    ssd1306_DrawPixel(x1, y1, color);
 800447e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004482:	79b9      	ldrb	r1, [r7, #6]
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fe98 	bl	80041bc <ssd1306_DrawPixel>
    error2 = error * 2;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	425b      	negs	r3, r3
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	dd08      	ble.n	80044ae <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	4413      	add	r3, r2
 80044ac:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
		
    if(error2 < deltaX)
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	da08      	bge.n	80044c8 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	4413      	add	r3, r2
 80044bc:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	79bb      	ldrb	r3, [r7, #6]
 80044c4:	4413      	add	r3, r2
 80044c6:	71bb      	strb	r3, [r7, #6]
	while((x1 != x2) || (y1 != y2))
 80044c8:	79fa      	ldrb	r2, [r7, #7]
 80044ca:	797b      	ldrb	r3, [r7, #5]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1d6      	bne.n	800447e <ssd1306_Line+0x76>
 80044d0:	79ba      	ldrb	r2, [r7, #6]
 80044d2:	793b      	ldrb	r3, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1d2      	bne.n	800447e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80044d8:	bf00      	nop
}
 80044da:	3724      	adds	r7, #36	; 0x24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd90      	pop	{r4, r7, pc}

080044e0 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	4604      	mov	r4, r0
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	71fb      	strb	r3, [r7, #7]
 80044f2:	4603      	mov	r3, r0
 80044f4:	71bb      	strb	r3, [r7, #6]
 80044f6:	460b      	mov	r3, r1
 80044f8:	717b      	strb	r3, [r7, #5]
 80044fa:	4613      	mov	r3, r2
 80044fc:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 80044fe:	79bc      	ldrb	r4, [r7, #6]
 8004500:	797a      	ldrb	r2, [r7, #5]
 8004502:	79b9      	ldrb	r1, [r7, #6]
 8004504:	79f8      	ldrb	r0, [r7, #7]
 8004506:	7e3b      	ldrb	r3, [r7, #24]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	4623      	mov	r3, r4
 800450c:	f7ff ff7c 	bl	8004408 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8004510:	793c      	ldrb	r4, [r7, #4]
 8004512:	797a      	ldrb	r2, [r7, #5]
 8004514:	79b9      	ldrb	r1, [r7, #6]
 8004516:	7978      	ldrb	r0, [r7, #5]
 8004518:	7e3b      	ldrb	r3, [r7, #24]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	4623      	mov	r3, r4
 800451e:	f7ff ff73 	bl	8004408 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8004522:	793c      	ldrb	r4, [r7, #4]
 8004524:	79fa      	ldrb	r2, [r7, #7]
 8004526:	7939      	ldrb	r1, [r7, #4]
 8004528:	7978      	ldrb	r0, [r7, #5]
 800452a:	7e3b      	ldrb	r3, [r7, #24]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	4623      	mov	r3, r4
 8004530:	f7ff ff6a 	bl	8004408 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8004534:	79bc      	ldrb	r4, [r7, #6]
 8004536:	79fa      	ldrb	r2, [r7, #7]
 8004538:	7939      	ldrb	r1, [r7, #4]
 800453a:	79f8      	ldrb	r0, [r7, #7]
 800453c:	7e3b      	ldrb	r3, [r7, #24]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4623      	mov	r3, r4
 8004542:	f7ff ff61 	bl	8004408 <ssd1306_Line>

  return;
 8004546:	bf00      	nop
}
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bd90      	pop	{r4, r7, pc}
	...

08004550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <HAL_MspInit+0x44>)
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <HAL_MspInit+0x44>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6193      	str	r3, [r2, #24]
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <HAL_MspInit+0x44>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	607b      	str	r3, [r7, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_MspInit+0x44>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4a08      	ldr	r2, [pc, #32]	; (8004594 <HAL_MspInit+0x44>)
 8004574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004578:	61d3      	str	r3, [r2, #28]
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_MspInit+0x44>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000

08004598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a0:	f107 0314 	add.w	r3, r7, #20
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a35      	ldr	r2, [pc, #212]	; (800468c <HAL_ADC_MspInit+0xf4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d164      	bne.n	8004684 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045ba:	4b35      	ldr	r3, [pc, #212]	; (8004690 <HAL_ADC_MspInit+0xf8>)
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	4a34      	ldr	r2, [pc, #208]	; (8004690 <HAL_ADC_MspInit+0xf8>)
 80045c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c4:	6153      	str	r3, [r2, #20]
 80045c6:	4b32      	ldr	r3, [pc, #200]	; (8004690 <HAL_ADC_MspInit+0xf8>)
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <HAL_ADC_MspInit+0xf8>)
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	4a2e      	ldr	r2, [pc, #184]	; (8004690 <HAL_ADC_MspInit+0xf8>)
 80045d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045dc:	6153      	str	r3, [r2, #20]
 80045de:	4b2c      	ldr	r3, [pc, #176]	; (8004690 <HAL_ADC_MspInit+0xf8>)
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <HAL_ADC_MspInit+0xf8>)
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	4a28      	ldr	r2, [pc, #160]	; (8004690 <HAL_ADC_MspInit+0xf8>)
 80045f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045f4:	6153      	str	r3, [r2, #20]
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <HAL_ADC_MspInit+0xf8>)
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004602:	23f0      	movs	r3, #240	; 0xf0
 8004604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004606:	2303      	movs	r3, #3
 8004608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460e:	f107 0314 	add.w	r3, r7, #20
 8004612:	4619      	mov	r1, r3
 8004614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004618:	f001 ff4e 	bl	80064b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800461c:	2310      	movs	r3, #16
 800461e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004620:	2303      	movs	r3, #3
 8004622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004628:	f107 0314 	add.w	r3, r7, #20
 800462c:	4619      	mov	r1, r3
 800462e:	4819      	ldr	r0, [pc, #100]	; (8004694 <HAL_ADC_MspInit+0xfc>)
 8004630:	f001 ff42 	bl	80064b8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8004634:	4b18      	ldr	r3, [pc, #96]	; (8004698 <HAL_ADC_MspInit+0x100>)
 8004636:	4a19      	ldr	r2, [pc, #100]	; (800469c <HAL_ADC_MspInit+0x104>)
 8004638:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800463a:	4b17      	ldr	r3, [pc, #92]	; (8004698 <HAL_ADC_MspInit+0x100>)
 800463c:	2200      	movs	r2, #0
 800463e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004640:	4b15      	ldr	r3, [pc, #84]	; (8004698 <HAL_ADC_MspInit+0x100>)
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004646:	4b14      	ldr	r3, [pc, #80]	; (8004698 <HAL_ADC_MspInit+0x100>)
 8004648:	2280      	movs	r2, #128	; 0x80
 800464a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800464c:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_ADC_MspInit+0x100>)
 800464e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004652:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <HAL_ADC_MspInit+0x100>)
 8004656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800465a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <HAL_ADC_MspInit+0x100>)
 800465e:	2220      	movs	r2, #32
 8004660:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <HAL_ADC_MspInit+0x100>)
 8004664:	2200      	movs	r2, #0
 8004666:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004668:	480b      	ldr	r0, [pc, #44]	; (8004698 <HAL_ADC_MspInit+0x100>)
 800466a:	f001 fb22 	bl	8005cb2 <HAL_DMA_Init>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8004674:	f7ff fc88 	bl	8003f88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a07      	ldr	r2, [pc, #28]	; (8004698 <HAL_ADC_MspInit+0x100>)
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
 800467e:	4a06      	ldr	r2, [pc, #24]	; (8004698 <HAL_ADC_MspInit+0x100>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004684:	bf00      	nop
 8004686:	3728      	adds	r7, #40	; 0x28
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	50000100 	.word	0x50000100
 8004690:	40021000 	.word	0x40021000
 8004694:	48000800 	.word	0x48000800
 8004698:	20001434 	.word	0x20001434
 800469c:	40020408 	.word	0x40020408

080046a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a8:	f107 0314 	add.w	r3, r7, #20
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	60da      	str	r2, [r3, #12]
 80046b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a17      	ldr	r2, [pc, #92]	; (800471c <HAL_SPI_MspInit+0x7c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d128      	bne.n	8004714 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_SPI_MspInit+0x80>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4a16      	ldr	r2, [pc, #88]	; (8004720 <HAL_SPI_MspInit+0x80>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046cc:	61d3      	str	r3, [r2, #28]
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <HAL_SPI_MspInit+0x80>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_SPI_MspInit+0x80>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4a10      	ldr	r2, [pc, #64]	; (8004720 <HAL_SPI_MspInit+0x80>)
 80046e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e4:	6153      	str	r3, [r2, #20]
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_SPI_MspInit+0x80>)
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80046f2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80046f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f8:	2302      	movs	r3, #2
 80046fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004700:	2303      	movs	r3, #3
 8004702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004704:	2305      	movs	r3, #5
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004708:	f107 0314 	add.w	r3, r7, #20
 800470c:	4619      	mov	r1, r3
 800470e:	4805      	ldr	r0, [pc, #20]	; (8004724 <HAL_SPI_MspInit+0x84>)
 8004710:	f001 fed2 	bl	80064b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004714:	bf00      	nop
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40003800 	.word	0x40003800
 8004720:	40021000 	.word	0x40021000
 8004724:	48000400 	.word	0x48000400

08004728 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	; 0x38
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a45      	ldr	r2, [pc, #276]	; (800485c <HAL_TIM_Encoder_MspInit+0x134>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d128      	bne.n	800479c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800474a:	4b45      	ldr	r3, [pc, #276]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	4a44      	ldr	r2, [pc, #272]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004754:	6193      	str	r3, [r2, #24]
 8004756:	4b42      	ldr	r3, [pc, #264]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004762:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	4a3e      	ldr	r2, [pc, #248]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800476c:	6153      	str	r3, [r2, #20]
 800476e:	4b3c      	ldr	r3, [pc, #240]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800477a:	2303      	movs	r3, #3
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477e:	2302      	movs	r3, #2
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004782:	2301      	movs	r3, #1
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	2300      	movs	r3, #0
 8004788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800478a:	2302      	movs	r3, #2
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004792:	4619      	mov	r1, r3
 8004794:	4833      	ldr	r0, [pc, #204]	; (8004864 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004796:	f001 fe8f 	bl	80064b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800479a:	e05a      	b.n	8004852 <HAL_TIM_Encoder_MspInit+0x12a>
  else if(htim_encoder->Instance==TIM3)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a31      	ldr	r2, [pc, #196]	; (8004868 <HAL_TIM_Encoder_MspInit+0x140>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d128      	bne.n	80047f8 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047a6:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4a2d      	ldr	r2, [pc, #180]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	61d3      	str	r3, [r2, #28]
 80047b2:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047be:	4b28      	ldr	r3, [pc, #160]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4a27      	ldr	r2, [pc, #156]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 80047c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c8:	6153      	str	r3, [r2, #20]
 80047ca:	4b25      	ldr	r3, [pc, #148]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80047d6:	2330      	movs	r3, #48	; 0x30
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047da:	2302      	movs	r3, #2
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047de:	2301      	movs	r3, #1
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e2:	2300      	movs	r3, #0
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047e6:	2302      	movs	r3, #2
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ee:	4619      	mov	r1, r3
 80047f0:	481e      	ldr	r0, [pc, #120]	; (800486c <HAL_TIM_Encoder_MspInit+0x144>)
 80047f2:	f001 fe61 	bl	80064b8 <HAL_GPIO_Init>
}
 80047f6:	e02c      	b.n	8004852 <HAL_TIM_Encoder_MspInit+0x12a>
  else if(htim_encoder->Instance==TIM8)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <HAL_TIM_Encoder_MspInit+0x148>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d127      	bne.n	8004852 <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004802:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	4a16      	ldr	r2, [pc, #88]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004808:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800480c:	6193      	str	r3, [r2, #24]
 800480e:	4b14      	ldr	r3, [pc, #80]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4a10      	ldr	r2, [pc, #64]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004824:	6153      	str	r3, [r2, #20]
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <HAL_TIM_Encoder_MspInit+0x138>)
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004832:	23c0      	movs	r3, #192	; 0xc0
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2302      	movs	r3, #2
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800483a:	2301      	movs	r3, #1
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483e:	2300      	movs	r3, #0
 8004840:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004842:	2304      	movs	r3, #4
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800484a:	4619      	mov	r1, r3
 800484c:	4805      	ldr	r0, [pc, #20]	; (8004864 <HAL_TIM_Encoder_MspInit+0x13c>)
 800484e:	f001 fe33 	bl	80064b8 <HAL_GPIO_Init>
}
 8004852:	bf00      	nop
 8004854:	3738      	adds	r7, #56	; 0x38
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40021000 	.word	0x40021000
 8004864:	48000800 	.word	0x48000800
 8004868:	40000400 	.word	0x40000400
 800486c:	48000400 	.word	0x48000400
 8004870:	40013400 	.word	0x40013400

08004874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004884:	d113      	bne.n	80048ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <HAL_TIM_Base_MspInit+0x44>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4a0b      	ldr	r2, [pc, #44]	; (80048b8 <HAL_TIM_Base_MspInit+0x44>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	61d3      	str	r3, [r2, #28]
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_TIM_Base_MspInit+0x44>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800489e:	2200      	movs	r2, #0
 80048a0:	2100      	movs	r1, #0
 80048a2:	201c      	movs	r0, #28
 80048a4:	f001 f9cf 	bl	8005c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048a8:	201c      	movs	r0, #28
 80048aa:	f001 f9e8 	bl	8005c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1b      	ldr	r2, [pc, #108]	; (8004948 <HAL_UART_MspInit+0x8c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d130      	bne.n	8004940 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <HAL_UART_MspInit+0x90>)
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	4a1a      	ldr	r2, [pc, #104]	; (800494c <HAL_UART_MspInit+0x90>)
 80048e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e8:	61d3      	str	r3, [r2, #28]
 80048ea:	4b18      	ldr	r3, [pc, #96]	; (800494c <HAL_UART_MspInit+0x90>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	4b15      	ldr	r3, [pc, #84]	; (800494c <HAL_UART_MspInit+0x90>)
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4a14      	ldr	r2, [pc, #80]	; (800494c <HAL_UART_MspInit+0x90>)
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004900:	6153      	str	r3, [r2, #20]
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <HAL_UART_MspInit+0x90>)
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800490e:	230c      	movs	r3, #12
 8004910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004912:	2302      	movs	r3, #2
 8004914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800491a:	2303      	movs	r3, #3
 800491c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800491e:	2307      	movs	r3, #7
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	4619      	mov	r1, r3
 8004928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800492c:	f001 fdc4 	bl	80064b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004930:	2200      	movs	r2, #0
 8004932:	2100      	movs	r1, #0
 8004934:	2026      	movs	r0, #38	; 0x26
 8004936:	f001 f986 	bl	8005c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800493a:	2026      	movs	r0, #38	; 0x26
 800493c:	f001 f99f 	bl	8005c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004940:	bf00      	nop
 8004942:	3728      	adds	r7, #40	; 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40004400 	.word	0x40004400
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <HAL_PCD_MspInit+0x38>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10b      	bne.n	800497a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004962:	4b0a      	ldr	r3, [pc, #40]	; (800498c <HAL_PCD_MspInit+0x3c>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <HAL_PCD_MspInit+0x3c>)
 8004968:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800496c:	61d3      	str	r3, [r2, #28]
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <HAL_PCD_MspInit+0x3c>)
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40005c00 	.word	0x40005c00
 800498c:	40021000 	.word	0x40021000

08004990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049a2:	e7fe      	b.n	80049a2 <HardFault_Handler+0x4>

080049a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049a8:	e7fe      	b.n	80049a8 <MemManage_Handler+0x4>

080049aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ae:	e7fe      	b.n	80049ae <BusFault_Handler+0x4>

080049b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b4:	e7fe      	b.n	80049b4 <UsageFault_Handler+0x4>

080049b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e4:	f000 f8d6 	bl	8004b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e8:	bf00      	nop
 80049ea:	bd80      	pop	{r7, pc}

080049ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049f0:	4804      	ldr	r0, [pc, #16]	; (8004a04 <TIM2_IRQHandler+0x18>)
 80049f2:	f004 f8d5 	bl	8008ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  updateDisplay();
 80049f6:	f7fe f837 	bl	8002a68 <updateDisplay>
  sendCameraData();
 80049fa:	f7ff f95f 	bl	8003cbc <sendCameraData>

  /* USER CODE END TIM2_IRQn 1 */
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20001308 	.word	0x20001308

08004a08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a0c:	4802      	ldr	r0, [pc, #8]	; (8004a18 <USART2_IRQHandler+0x10>)
 8004a0e:	f004 fd91 	bl	8009534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200013b0 	.word	0x200013b0

08004a1c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004a20:	4802      	ldr	r0, [pc, #8]	; (8004a2c <DMA2_Channel1_IRQHandler+0x10>)
 8004a22:	f001 fa63 	bl	8005eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20001434 	.word	0x20001434

08004a30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <_sbrk+0x50>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <_sbrk+0x16>
		heap_end = &end;
 8004a40:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <_sbrk+0x50>)
 8004a42:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <_sbrk+0x54>)
 8004a44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <_sbrk+0x50>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <_sbrk+0x50>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	466a      	mov	r2, sp
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d907      	bls.n	8004a6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004a5a:	f005 fbe5 	bl	800a228 <__errno>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	220c      	movs	r2, #12
 8004a62:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295
 8004a68:	e006      	b.n	8004a78 <_sbrk+0x48>
	}

	heap_end += incr;
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <_sbrk+0x50>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	4a03      	ldr	r2, [pc, #12]	; (8004a80 <_sbrk+0x50>)
 8004a74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004a76:	68fb      	ldr	r3, [r7, #12]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	200004e8 	.word	0x200004e8
 8004a84:	20001a48 	.word	0x20001a48

08004a88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a8c:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <SystemInit+0x28>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	4a07      	ldr	r2, [pc, #28]	; (8004ab0 <SystemInit+0x28>)
 8004a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <SystemInit+0x28>)
 8004a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004aa2:	609a      	str	r2, [r3, #8]
#endif
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004aec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ab8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004aba:	e003      	b.n	8004ac4 <LoopCopyDataInit>

08004abc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004abc:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004abe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ac0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004ac2:	3104      	adds	r1, #4

08004ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ac4:	480b      	ldr	r0, [pc, #44]	; (8004af4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ac8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004aca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004acc:	d3f6      	bcc.n	8004abc <CopyDataInit>
	ldr	r2, =_sbss
 8004ace:	4a0b      	ldr	r2, [pc, #44]	; (8004afc <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ad0:	e002      	b.n	8004ad8 <LoopFillZerobss>

08004ad2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004ad2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ad4:	f842 3b04 	str.w	r3, [r2], #4

08004ad8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <LoopForever+0x16>)
	cmp	r2, r3
 8004ada:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004adc:	d3f9      	bcc.n	8004ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ade:	f7ff ffd3 	bl	8004a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ae2:	f005 fba7 	bl	800a234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ae6:	f7fb ffbb 	bl	8000a60 <main>

08004aea <LoopForever>:

LoopForever:
    b LoopForever
 8004aea:	e7fe      	b.n	8004aea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004aec:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004af0:	0800b3a4 	.word	0x0800b3a4
	ldr	r0, =_sdata
 8004af4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004af8:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 8004afc:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 8004b00:	20001a48 	.word	0x20001a48

08004b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b04:	e7fe      	b.n	8004b04 <ADC1_2_IRQHandler>
	...

08004b08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b0c:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <HAL_Init+0x28>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <HAL_Init+0x28>)
 8004b12:	f043 0310 	orr.w	r3, r3, #16
 8004b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b18:	2003      	movs	r0, #3
 8004b1a:	f001 f889 	bl	8005c30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f000 f808 	bl	8004b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b24:	f7ff fd14 	bl	8004550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40022000 	.word	0x40022000

08004b34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <HAL_InitTick+0x54>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_InitTick+0x58>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 f8a1 	bl	8005c9a <HAL_SYSTICK_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e00e      	b.n	8004b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b0f      	cmp	r3, #15
 8004b66:	d80a      	bhi.n	8004b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b68:	2200      	movs	r2, #0
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	f001 f869 	bl	8005c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b74:	4a06      	ldr	r2, [pc, #24]	; (8004b90 <HAL_InitTick+0x5c>)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e000      	b.n	8004b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	2000002c 	.word	0x2000002c
 8004b8c:	20000034 	.word	0x20000034
 8004b90:	20000030 	.word	0x20000030

08004b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_IncTick+0x20>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_IncTick+0x24>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <HAL_IncTick+0x24>)
 8004ba6:	6013      	str	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000034 	.word	0x20000034
 8004bb8:	20001a14 	.word	0x20001a14

08004bbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <HAL_GetTick+0x14>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20001a14 	.word	0x20001a14

08004bd4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bdc:	f7ff ffee 	bl	8004bbc <HAL_GetTick>
 8004be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d005      	beq.n	8004bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_Delay+0x44>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004bfa:	bf00      	nop
 8004bfc:	f7ff ffde 	bl	8004bbc <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d8f7      	bhi.n	8004bfc <HAL_Delay+0x28>
  {
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000034 	.word	0x20000034

08004c1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b09a      	sub	sp, #104	; 0x68
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e1e3      	b.n	800502c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d176      	bne.n	8004d64 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d152      	bne.n	8004d24 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fc7d 	bl	8004598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d13b      	bne.n	8004d24 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fe8f 	bl	80059d0 <ADC_Disable>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d12f      	bne.n	8004d24 <HAL_ADC_Init+0xe0>
 8004cc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d12b      	bne.n	8004d24 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cd4:	f023 0302 	bic.w	r3, r3, #2
 8004cd8:	f043 0202 	orr.w	r2, r3, #2
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cfe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d00:	4b92      	ldr	r3, [pc, #584]	; (8004f4c <HAL_ADC_Init+0x308>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a92      	ldr	r2, [pc, #584]	; (8004f50 <HAL_ADC_Init+0x30c>)
 8004d06:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0a:	0c9a      	lsrs	r2, r3, #18
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d16:	e002      	b.n	8004d1e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f9      	bne.n	8004d18 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d40:	d110      	bne.n	8004d64 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f023 0312 	bic.w	r3, r3, #18
 8004d4a:	f043 0210 	orr.w	r2, r3, #16
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f040 8150 	bne.w	8005012 <HAL_ADC_Init+0x3ce>
 8004d72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 814b 	bne.w	8005012 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f040 8143 	bne.w	8005012 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004d94:	f043 0202 	orr.w	r2, r3, #2
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004da4:	d004      	beq.n	8004db0 <HAL_ADC_Init+0x16c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a6a      	ldr	r2, [pc, #424]	; (8004f54 <HAL_ADC_Init+0x310>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_Init+0x170>
 8004db0:	4b69      	ldr	r3, [pc, #420]	; (8004f58 <HAL_ADC_Init+0x314>)
 8004db2:	e000      	b.n	8004db6 <HAL_ADC_Init+0x172>
 8004db4:	4b69      	ldr	r3, [pc, #420]	; (8004f5c <HAL_ADC_Init+0x318>)
 8004db6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dc0:	d102      	bne.n	8004dc8 <HAL_ADC_Init+0x184>
 8004dc2:	4b64      	ldr	r3, [pc, #400]	; (8004f54 <HAL_ADC_Init+0x310>)
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e01a      	b.n	8004dfe <HAL_ADC_Init+0x1ba>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a61      	ldr	r2, [pc, #388]	; (8004f54 <HAL_ADC_Init+0x310>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d103      	bne.n	8004dda <HAL_ADC_Init+0x196>
 8004dd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e011      	b.n	8004dfe <HAL_ADC_Init+0x1ba>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a60      	ldr	r2, [pc, #384]	; (8004f60 <HAL_ADC_Init+0x31c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d102      	bne.n	8004dea <HAL_ADC_Init+0x1a6>
 8004de4:	4b5f      	ldr	r3, [pc, #380]	; (8004f64 <HAL_ADC_Init+0x320>)
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e009      	b.n	8004dfe <HAL_ADC_Init+0x1ba>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a5d      	ldr	r2, [pc, #372]	; (8004f64 <HAL_ADC_Init+0x320>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d102      	bne.n	8004dfa <HAL_ADC_Init+0x1b6>
 8004df4:	4b5a      	ldr	r3, [pc, #360]	; (8004f60 <HAL_ADC_Init+0x31c>)
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e001      	b.n	8004dfe <HAL_ADC_Init+0x1ba>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d108      	bne.n	8004e1e <HAL_ADC_Init+0x1da>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_Init+0x1da>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <HAL_ADC_Init+0x1dc>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d11c      	bne.n	8004e5e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e24:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d010      	beq.n	8004e4c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <HAL_ADC_Init+0x202>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_ADC_Init+0x202>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <HAL_ADC_Init+0x204>
 8004e46:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d108      	bne.n	8004e5e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	7e5b      	ldrb	r3, [r3, #25]
 8004e62:	035b      	lsls	r3, r3, #13
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e68:	2a01      	cmp	r2, #1
 8004e6a:	d002      	beq.n	8004e72 <HAL_ADC_Init+0x22e>
 8004e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e70:	e000      	b.n	8004e74 <HAL_ADC_Init+0x230>
 8004e72:	2200      	movs	r2, #0
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e84:	4313      	orrs	r3, r2
 8004e86:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d11b      	bne.n	8004eca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	7e5b      	ldrb	r3, [r3, #25]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	045a      	lsls	r2, r3, #17
 8004ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8004eac:	e00d      	b.n	8004eca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004eb6:	f043 0220 	orr.w	r2, r3, #32
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f043 0201 	orr.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d054      	beq.n	8004f7c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_ADC_Init+0x31c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_ADC_Init+0x2a2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	; (8004f64 <HAL_ADC_Init+0x320>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d140      	bne.n	8004f68 <HAL_ADC_Init+0x324>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004eee:	d02a      	beq.n	8004f46 <HAL_ADC_Init+0x302>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef8:	d022      	beq.n	8004f40 <HAL_ADC_Init+0x2fc>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004f02:	d01a      	beq.n	8004f3a <HAL_ADC_Init+0x2f6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8004f0c:	d012      	beq.n	8004f34 <HAL_ADC_Init+0x2f0>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8004f16:	d00a      	beq.n	8004f2e <HAL_ADC_Init+0x2ea>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8004f20:	d002      	beq.n	8004f28 <HAL_ADC_Init+0x2e4>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	e023      	b.n	8004f70 <HAL_ADC_Init+0x32c>
 8004f28:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004f2c:	e020      	b.n	8004f70 <HAL_ADC_Init+0x32c>
 8004f2e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004f32:	e01d      	b.n	8004f70 <HAL_ADC_Init+0x32c>
 8004f34:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004f38:	e01a      	b.n	8004f70 <HAL_ADC_Init+0x32c>
 8004f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f3e:	e017      	b.n	8004f70 <HAL_ADC_Init+0x32c>
 8004f40:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004f44:	e014      	b.n	8004f70 <HAL_ADC_Init+0x32c>
 8004f46:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004f4a:	e011      	b.n	8004f70 <HAL_ADC_Init+0x32c>
 8004f4c:	2000002c 	.word	0x2000002c
 8004f50:	431bde83 	.word	0x431bde83
 8004f54:	50000100 	.word	0x50000100
 8004f58:	50000300 	.word	0x50000300
 8004f5c:	50000700 	.word	0x50000700
 8004f60:	50000400 	.word	0x50000400
 8004f64:	50000500 	.word	0x50000500
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f74:	4313      	orrs	r3, r2
 8004f76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d114      	bne.n	8004fb4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f98:	f023 0302 	bic.w	r3, r3, #2
 8004f9c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	7e1b      	ldrb	r3, [r3, #24]
 8004fa2:	039a      	lsls	r2, r3, #14
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	4313      	orrs	r3, r2
 8004fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <HAL_ADC_Init+0x3f0>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d10c      	bne.n	8004fea <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	f023 010f 	bic.w	r1, r3, #15
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8004fe8:	e007      	b.n	8004ffa <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 020f 	bic.w	r2, r2, #15
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	f023 0303 	bic.w	r3, r3, #3
 8005008:	f043 0201 	orr.w	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	641a      	str	r2, [r3, #64]	; 0x40
 8005010:	e00a      	b.n	8005028 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f023 0312 	bic.w	r3, r3, #18
 800501a:	f043 0210 	orr.w	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8005022:	2301      	movs	r3, #1
 8005024:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005028:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800502c:	4618      	mov	r0, r3
 800502e:	3768      	adds	r7, #104	; 0x68
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	fff0c007 	.word	0xfff0c007

08005038 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	f040 80f7 	bne.w	8005246 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_ADC_Start_DMA+0x2e>
 8005062:	2302      	movs	r3, #2
 8005064:	e0f2      	b.n	800524c <HAL_ADC_Start_DMA+0x214>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005076:	d004      	beq.n	8005082 <HAL_ADC_Start_DMA+0x4a>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a75      	ldr	r2, [pc, #468]	; (8005254 <HAL_ADC_Start_DMA+0x21c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d109      	bne.n	8005096 <HAL_ADC_Start_DMA+0x5e>
 8005082:	4b75      	ldr	r3, [pc, #468]	; (8005258 <HAL_ADC_Start_DMA+0x220>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e008      	b.n	80050a8 <HAL_ADC_Start_DMA+0x70>
 8005096:	4b71      	ldr	r3, [pc, #452]	; (800525c <HAL_ADC_Start_DMA+0x224>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf0c      	ite	eq
 80050a2:	2301      	moveq	r3, #1
 80050a4:	2300      	movne	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80c5 	beq.w	8005238 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fc30 	bl	8005914 <ADC_Enable>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 80b7 	bne.w	800522e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050dc:	d004      	beq.n	80050e8 <HAL_ADC_Start_DMA+0xb0>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a5c      	ldr	r2, [pc, #368]	; (8005254 <HAL_ADC_Start_DMA+0x21c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d106      	bne.n	80050f6 <HAL_ADC_Start_DMA+0xbe>
 80050e8:	4b5b      	ldr	r3, [pc, #364]	; (8005258 <HAL_ADC_Start_DMA+0x220>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d010      	beq.n	8005116 <HAL_ADC_Start_DMA+0xde>
 80050f4:	e005      	b.n	8005102 <HAL_ADC_Start_DMA+0xca>
 80050f6:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_ADC_Start_DMA+0x224>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <HAL_ADC_Start_DMA+0xde>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800510a:	d004      	beq.n	8005116 <HAL_ADC_Start_DMA+0xde>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a53      	ldr	r2, [pc, #332]	; (8005260 <HAL_ADC_Start_DMA+0x228>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d115      	bne.n	8005142 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d036      	beq.n	800519e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005138:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005140:	e02d      	b.n	800519e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005156:	d004      	beq.n	8005162 <HAL_ADC_Start_DMA+0x12a>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3d      	ldr	r2, [pc, #244]	; (8005254 <HAL_ADC_Start_DMA+0x21c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d10a      	bne.n	8005178 <HAL_ADC_Start_DMA+0x140>
 8005162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e008      	b.n	800518a <HAL_ADC_Start_DMA+0x152>
 8005178:	4b39      	ldr	r3, [pc, #228]	; (8005260 <HAL_ADC_Start_DMA+0x228>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005196:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051aa:	d106      	bne.n	80051ba <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	f023 0206 	bic.w	r2, r3, #6
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	645a      	str	r2, [r3, #68]	; 0x44
 80051b8:	e002      	b.n	80051c0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	4a25      	ldr	r2, [pc, #148]	; (8005264 <HAL_ADC_Start_DMA+0x22c>)
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	4a24      	ldr	r2, [pc, #144]	; (8005268 <HAL_ADC_Start_DMA+0x230>)
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	4a23      	ldr	r2, [pc, #140]	; (800526c <HAL_ADC_Start_DMA+0x234>)
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	221c      	movs	r2, #28
 80051e6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0210 	orr.w	r2, r2, #16
 80051f6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3340      	adds	r3, #64	; 0x40
 8005212:	4619      	mov	r1, r3
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f000 fd92 	bl	8005d40 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0204 	orr.w	r2, r2, #4
 800522a:	609a      	str	r2, [r3, #8]
 800522c:	e00d      	b.n	800524a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005236:	e008      	b.n	800524a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005244:	e001      	b.n	800524a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	50000100 	.word	0x50000100
 8005258:	50000300 	.word	0x50000300
 800525c:	50000700 	.word	0x50000700
 8005260:	50000400 	.word	0x50000400
 8005264:	08005849 	.word	0x08005849
 8005268:	080058c3 	.word	0x080058c3
 800526c:	080058df 	.word	0x080058df

08005270 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005270:	b480      	push	{r7}
 8005272:	b09b      	sub	sp, #108	; 0x6c
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x22>
 800528e:	2302      	movs	r3, #2
 8005290:	e2cb      	b.n	800582a <HAL_ADC_ConfigChannel+0x5ba>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f040 82af 	bne.w	8005808 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d81c      	bhi.n	80052ec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	461a      	mov	r2, r3
 80052c6:	231f      	movs	r3, #31
 80052c8:	4093      	lsls	r3, r2
 80052ca:	43db      	mvns	r3, r3
 80052cc:	4019      	ands	r1, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	4413      	add	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	fa00 f203 	lsl.w	r2, r0, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
 80052ea:	e063      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b09      	cmp	r3, #9
 80052f2:	d81e      	bhi.n	8005332 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	4413      	add	r3, r2
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	3b1e      	subs	r3, #30
 8005308:	221f      	movs	r2, #31
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	4019      	ands	r1, r3
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	4413      	add	r3, r2
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	3b1e      	subs	r3, #30
 8005324:	fa00 f203 	lsl.w	r2, r0, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	635a      	str	r2, [r3, #52]	; 0x34
 8005330:	e040      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b0e      	cmp	r3, #14
 8005338:	d81e      	bhi.n	8005378 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	3b3c      	subs	r3, #60	; 0x3c
 800534e:	221f      	movs	r2, #31
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	4019      	ands	r1, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4413      	add	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	3b3c      	subs	r3, #60	; 0x3c
 800536a:	fa00 f203 	lsl.w	r2, r0, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
 8005376:	e01d      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	3b5a      	subs	r3, #90	; 0x5a
 800538c:	221f      	movs	r2, #31
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	4019      	ands	r1, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	3b5a      	subs	r3, #90	; 0x5a
 80053a8:	fa00 f203 	lsl.w	r2, r0, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f040 80e5 	bne.w	800558e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b09      	cmp	r3, #9
 80053ca:	d91c      	bls.n	8005406 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6999      	ldr	r1, [r3, #24]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4613      	mov	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4413      	add	r3, r2
 80053dc:	3b1e      	subs	r3, #30
 80053de:	2207      	movs	r2, #7
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	4019      	ands	r1, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6898      	ldr	r0, [r3, #8]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	4413      	add	r3, r2
 80053f6:	3b1e      	subs	r3, #30
 80053f8:	fa00 f203 	lsl.w	r2, r0, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	619a      	str	r2, [r3, #24]
 8005404:	e019      	b.n	800543a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6959      	ldr	r1, [r3, #20]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	4413      	add	r3, r2
 8005416:	2207      	movs	r2, #7
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	4019      	ands	r1, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6898      	ldr	r0, [r3, #8]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	4413      	add	r3, r2
 800542e:	fa00 f203 	lsl.w	r2, r0, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	08db      	lsrs	r3, r3, #3
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	3b01      	subs	r3, #1
 8005458:	2b03      	cmp	r3, #3
 800545a:	d84f      	bhi.n	80054fc <HAL_ADC_ConfigChannel+0x28c>
 800545c:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <HAL_ADC_ConfigChannel+0x1f4>)
 800545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005462:	bf00      	nop
 8005464:	08005475 	.word	0x08005475
 8005468:	08005497 	.word	0x08005497
 800546c:	080054b9 	.word	0x080054b9
 8005470:	080054db 	.word	0x080054db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800547a:	4b9f      	ldr	r3, [pc, #636]	; (80056f8 <HAL_ADC_ConfigChannel+0x488>)
 800547c:	4013      	ands	r3, r2
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	0691      	lsls	r1, r2, #26
 8005484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005486:	430a      	orrs	r2, r1
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005492:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005494:	e07e      	b.n	8005594 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800549c:	4b96      	ldr	r3, [pc, #600]	; (80056f8 <HAL_ADC_ConfigChannel+0x488>)
 800549e:	4013      	ands	r3, r2
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	0691      	lsls	r1, r2, #26
 80054a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054a8:	430a      	orrs	r2, r1
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80054b4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80054b6:	e06d      	b.n	8005594 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80054be:	4b8e      	ldr	r3, [pc, #568]	; (80056f8 <HAL_ADC_ConfigChannel+0x488>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	0691      	lsls	r1, r2, #26
 80054c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ca:	430a      	orrs	r2, r1
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80054d6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80054d8:	e05c      	b.n	8005594 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80054e0:	4b85      	ldr	r3, [pc, #532]	; (80056f8 <HAL_ADC_ConfigChannel+0x488>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	0691      	lsls	r1, r2, #26
 80054ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ec:	430a      	orrs	r2, r1
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80054f8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80054fa:	e04b      	b.n	8005594 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005502:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	069b      	lsls	r3, r3, #26
 800550c:	429a      	cmp	r2, r3
 800550e:	d107      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800551e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005526:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	069b      	lsls	r3, r3, #26
 8005530:	429a      	cmp	r2, r3
 8005532:	d107      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005542:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800554a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	069b      	lsls	r3, r3, #26
 8005554:	429a      	cmp	r2, r3
 8005556:	d107      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005566:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800556e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	069b      	lsls	r3, r3, #26
 8005578:	429a      	cmp	r2, r3
 800557a:	d10a      	bne.n	8005592 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800558a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800558c:	e001      	b.n	8005592 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <HAL_ADC_ConfigChannel+0x324>
      break;
 8005592:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d108      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x344>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x344>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x346>
 80055b4:	2300      	movs	r3, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f040 8131 	bne.w	800581e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d00f      	beq.n	80055e4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43da      	mvns	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	400a      	ands	r2, r1
 80055de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80055e2:	e049      	b.n	8005678 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2201      	movs	r2, #1
 80055f2:	409a      	lsls	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b09      	cmp	r3, #9
 8005604:	d91c      	bls.n	8005640 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6999      	ldr	r1, [r3, #24]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	4413      	add	r3, r2
 8005616:	3b1b      	subs	r3, #27
 8005618:	2207      	movs	r2, #7
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43db      	mvns	r3, r3
 8005620:	4019      	ands	r1, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6898      	ldr	r0, [r3, #8]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	4413      	add	r3, r2
 8005630:	3b1b      	subs	r3, #27
 8005632:	fa00 f203 	lsl.w	r2, r0, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	619a      	str	r2, [r3, #24]
 800563e:	e01b      	b.n	8005678 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6959      	ldr	r1, [r3, #20]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	2207      	movs	r2, #7
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	4019      	ands	r1, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6898      	ldr	r0, [r3, #8]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	4613      	mov	r3, r2
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	4413      	add	r3, r2
 800566c:	fa00 f203 	lsl.w	r2, r0, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005680:	d004      	beq.n	800568c <HAL_ADC_ConfigChannel+0x41c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <HAL_ADC_ConfigChannel+0x48c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d101      	bne.n	8005690 <HAL_ADC_ConfigChannel+0x420>
 800568c:	4b1c      	ldr	r3, [pc, #112]	; (8005700 <HAL_ADC_ConfigChannel+0x490>)
 800568e:	e000      	b.n	8005692 <HAL_ADC_ConfigChannel+0x422>
 8005690:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <HAL_ADC_ConfigChannel+0x494>)
 8005692:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b10      	cmp	r3, #16
 800569a:	d105      	bne.n	80056a8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800569c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80056ac:	2b11      	cmp	r3, #17
 80056ae:	d105      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80056b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00b      	beq.n	80056d4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80056c0:	2b12      	cmp	r3, #18
 80056c2:	f040 80ac 	bne.w	800581e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80056c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f040 80a5 	bne.w	800581e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056dc:	d102      	bne.n	80056e4 <HAL_ADC_ConfigChannel+0x474>
 80056de:	4b07      	ldr	r3, [pc, #28]	; (80056fc <HAL_ADC_ConfigChannel+0x48c>)
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e023      	b.n	800572c <HAL_ADC_ConfigChannel+0x4bc>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a04      	ldr	r2, [pc, #16]	; (80056fc <HAL_ADC_ConfigChannel+0x48c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d10c      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x498>
 80056ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e01a      	b.n	800572c <HAL_ADC_ConfigChannel+0x4bc>
 80056f6:	bf00      	nop
 80056f8:	83fff000 	.word	0x83fff000
 80056fc:	50000100 	.word	0x50000100
 8005700:	50000300 	.word	0x50000300
 8005704:	50000700 	.word	0x50000700
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a4a      	ldr	r2, [pc, #296]	; (8005838 <HAL_ADC_ConfigChannel+0x5c8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d102      	bne.n	8005718 <HAL_ADC_ConfigChannel+0x4a8>
 8005712:	4b4a      	ldr	r3, [pc, #296]	; (800583c <HAL_ADC_ConfigChannel+0x5cc>)
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e009      	b.n	800572c <HAL_ADC_ConfigChannel+0x4bc>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a47      	ldr	r2, [pc, #284]	; (800583c <HAL_ADC_ConfigChannel+0x5cc>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d102      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x4b8>
 8005722:	4b45      	ldr	r3, [pc, #276]	; (8005838 <HAL_ADC_ConfigChannel+0x5c8>)
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	e001      	b.n	800572c <HAL_ADC_ConfigChannel+0x4bc>
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d108      	bne.n	800574c <HAL_ADC_ConfigChannel+0x4dc>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_ADC_ConfigChannel+0x4dc>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <HAL_ADC_ConfigChannel+0x4de>
 800574c:	2300      	movs	r3, #0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d150      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005752:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005754:	2b00      	cmp	r3, #0
 8005756:	d010      	beq.n	800577a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x504>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x504>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <HAL_ADC_ConfigChannel+0x506>
 8005774:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005776:	2b00      	cmp	r3, #0
 8005778:	d13c      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b10      	cmp	r3, #16
 8005780:	d11d      	bne.n	80057be <HAL_ADC_ConfigChannel+0x54e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800578a:	d118      	bne.n	80057be <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800578c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005796:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005798:	4b29      	ldr	r3, [pc, #164]	; (8005840 <HAL_ADC_ConfigChannel+0x5d0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a29      	ldr	r2, [pc, #164]	; (8005844 <HAL_ADC_ConfigChannel+0x5d4>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	0c9a      	lsrs	r2, r3, #18
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80057ae:	e002      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f9      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80057bc:	e02e      	b.n	800581c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b11      	cmp	r3, #17
 80057c4:	d10b      	bne.n	80057de <HAL_ADC_ConfigChannel+0x56e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057ce:	d106      	bne.n	80057de <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80057d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80057d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057da:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80057dc:	e01e      	b.n	800581c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b12      	cmp	r3, #18
 80057e4:	d11a      	bne.n	800581c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80057e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80057f2:	e013      	b.n	800581c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	f043 0220 	orr.w	r2, r3, #32
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005806:	e00a      	b.n	800581e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f043 0220 	orr.w	r2, r3, #32
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800581a:	e000      	b.n	800581e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800581c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005826:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800582a:	4618      	mov	r0, r3
 800582c:	376c      	adds	r7, #108	; 0x6c
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	50000400 	.word	0x50000400
 800583c:	50000500 	.word	0x50000500
 8005840:	2000002c 	.word	0x2000002c
 8005844:	431bde83 	.word	0x431bde83

08005848 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800585e:	2b00      	cmp	r3, #0
 8005860:	d126      	bne.n	80058b0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005878:	2b00      	cmp	r3, #0
 800587a:	d115      	bne.n	80058a8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005880:	2b00      	cmp	r3, #0
 8005882:	d111      	bne.n	80058a8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	f043 0201 	orr.w	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7fc fcfb 	bl	80022a4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80058ae:	e004      	b.n	80058ba <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	4798      	blx	r3
}
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff f9a3 	bl	8004c1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80058d6:	bf00      	nop
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fc:	f043 0204 	orr.w	r2, r3, #4
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff f993 	bl	8004c30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d108      	bne.n	8005940 <ADC_Enable+0x2c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <ADC_Enable+0x2c>
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <ADC_Enable+0x2e>
 8005940:	2300      	movs	r3, #0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d13c      	bne.n	80059c0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	4b1f      	ldr	r3, [pc, #124]	; (80059cc <ADC_Enable+0xb8>)
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	f043 0210 	orr.w	r2, r3, #16
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005964:	f043 0201 	orr.w	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e028      	b.n	80059c2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005980:	f7ff f91c 	bl	8004bbc <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005986:	e014      	b.n	80059b2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005988:	f7ff f918 	bl	8004bbc <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d90d      	bls.n	80059b2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f043 0210 	orr.w	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	f043 0201 	orr.w	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e007      	b.n	80059c2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d1e3      	bne.n	8005988 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	8000003f 	.word	0x8000003f

080059d0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d108      	bne.n	80059fc <ADC_Disable+0x2c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <ADC_Disable+0x2c>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <ADC_Disable+0x2e>
 80059fc:	2300      	movs	r3, #0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d040      	beq.n	8005a84 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 030d 	and.w	r3, r3, #13
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d10f      	bne.n	8005a30 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0202 	orr.w	r2, r2, #2
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2203      	movs	r2, #3
 8005a26:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005a28:	f7ff f8c8 	bl	8004bbc <HAL_GetTick>
 8005a2c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005a2e:	e022      	b.n	8005a76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	f043 0210 	orr.w	r2, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	f043 0201 	orr.w	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e01c      	b.n	8005a86 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a4c:	f7ff f8b6 	bl	8004bbc <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d90d      	bls.n	8005a76 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f043 0210 	orr.w	r2, r3, #16
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f043 0201 	orr.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e007      	b.n	8005a86 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d0e3      	beq.n	8005a4c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005aac:	4013      	ands	r3, r2
 8005aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ac2:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	60d3      	str	r3, [r2, #12]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	e000ed00 	.word	0xe000ed00

08005ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <__NVIC_GetPriorityGrouping+0x18>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	f003 0307 	and.w	r3, r3, #7
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	e000ed00 	.word	0xe000ed00

08005af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	db0b      	blt.n	8005b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	f003 021f 	and.w	r2, r3, #31
 8005b0c:	4907      	ldr	r1, [pc, #28]	; (8005b2c <__NVIC_EnableIRQ+0x38>)
 8005b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	2001      	movs	r0, #1
 8005b16:	fa00 f202 	lsl.w	r2, r0, r2
 8005b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	e000e100 	.word	0xe000e100

08005b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	6039      	str	r1, [r7, #0]
 8005b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db0a      	blt.n	8005b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	490c      	ldr	r1, [pc, #48]	; (8005b7c <__NVIC_SetPriority+0x4c>)
 8005b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4e:	0112      	lsls	r2, r2, #4
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	440b      	add	r3, r1
 8005b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b58:	e00a      	b.n	8005b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	4908      	ldr	r1, [pc, #32]	; (8005b80 <__NVIC_SetPriority+0x50>)
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	3b04      	subs	r3, #4
 8005b68:	0112      	lsls	r2, r2, #4
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	761a      	strb	r2, [r3, #24]
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	e000e100 	.word	0xe000e100
 8005b80:	e000ed00 	.word	0xe000ed00

08005b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f1c3 0307 	rsb	r3, r3, #7
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	bf28      	it	cs
 8005ba2:	2304      	movcs	r3, #4
 8005ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d902      	bls.n	8005bb4 <NVIC_EncodePriority+0x30>
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3b03      	subs	r3, #3
 8005bb2:	e000      	b.n	8005bb6 <NVIC_EncodePriority+0x32>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43da      	mvns	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	401a      	ands	r2, r3
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd6:	43d9      	mvns	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bdc:	4313      	orrs	r3, r2
         );
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3724      	adds	r7, #36	; 0x24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bfc:	d301      	bcc.n	8005c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e00f      	b.n	8005c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c02:	4a0a      	ldr	r2, [pc, #40]	; (8005c2c <SysTick_Config+0x40>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c0a:	210f      	movs	r1, #15
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	f7ff ff8e 	bl	8005b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <SysTick_Config+0x40>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c1a:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <SysTick_Config+0x40>)
 8005c1c:	2207      	movs	r2, #7
 8005c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	e000e010 	.word	0xe000e010

08005c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ff29 	bl	8005a90 <__NVIC_SetPriorityGrouping>
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b086      	sub	sp, #24
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c58:	f7ff ff3e 	bl	8005ad8 <__NVIC_GetPriorityGrouping>
 8005c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	6978      	ldr	r0, [r7, #20]
 8005c64:	f7ff ff8e 	bl	8005b84 <NVIC_EncodePriority>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ff5d 	bl	8005b30 <__NVIC_SetPriority>
}
 8005c76:	bf00      	nop
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	4603      	mov	r3, r0
 8005c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff ff31 	bl	8005af4 <__NVIC_EnableIRQ>
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff ffa2 	bl	8005bec <SysTick_Config>
 8005ca8:	4603      	mov	r3, r0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e037      	b.n	8005d38 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005cde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005ce2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f9b8 	bl	8006090 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}  
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_DMA_Start_IT+0x20>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e04a      	b.n	8005df6 <HAL_DMA_Start_IT+0xb6>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d13a      	bne.n	8005de8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f94b 	bl	8006032 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 020e 	orr.w	r2, r2, #14
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e00f      	b.n	8005dd6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 020a 	orr.w	r2, r2, #10
 8005dc4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0204 	bic.w	r2, r2, #4
 8005dd4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	e005      	b.n	8005df4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
 8005df2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d008      	beq.n	8005e22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2204      	movs	r2, #4
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e020      	b.n	8005e64 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 020e 	bic.w	r2, r2, #14
 8005e30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d005      	beq.n	8005e92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	73fb      	strb	r3, [r7, #15]
 8005e90:	e027      	b.n	8005ee2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 020e 	bic.w	r2, r2, #14
 8005ea0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0201 	bic.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	2101      	movs	r1, #1
 8005ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
    } 
  }
  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	2204      	movs	r2, #4
 8005f0a:	409a      	lsls	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d024      	beq.n	8005f5e <HAL_DMA_IRQHandler+0x72>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01f      	beq.n	8005f5e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d107      	bne.n	8005f3c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0204 	bic.w	r2, r2, #4
 8005f3a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	2104      	movs	r1, #4
 8005f46:	fa01 f202 	lsl.w	r2, r1, r2
 8005f4a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d06a      	beq.n	800602a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005f5c:	e065      	b.n	800602a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	2202      	movs	r2, #2
 8005f64:	409a      	lsls	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d02c      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0xdc>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d027      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 020a 	bic.w	r2, r2, #10
 8005f94:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	2102      	movs	r1, #2
 8005fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fac:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d035      	beq.n	800602a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005fc6:	e030      	b.n	800602a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	2208      	movs	r2, #8
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d028      	beq.n	800602a <HAL_DMA_IRQHandler+0x13e>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d023      	beq.n	800602a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 020e 	bic.w	r2, r2, #14
 8005ff0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8006000:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	2b00      	cmp	r3, #0
 800601e:	d004      	beq.n	800602a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
    }
  }
}  
 8006028:	e7ff      	b.n	800602a <HAL_DMA_IRQHandler+0x13e>
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006048:	2101      	movs	r1, #1
 800604a:	fa01 f202 	lsl.w	r2, r1, r2
 800604e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b10      	cmp	r3, #16
 800605e:	d108      	bne.n	8006072 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006070:	e007      	b.n	8006082 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	60da      	str	r2, [r3, #12]
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <DMA_CalcBaseAndBitshift+0x60>)
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d80f      	bhi.n	80060c4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <DMA_CalcBaseAndBitshift+0x64>)
 80060ac:	4413      	add	r3, r2
 80060ae:	4a12      	ldr	r2, [pc, #72]	; (80060f8 <DMA_CalcBaseAndBitshift+0x68>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	009a      	lsls	r2, r3, #2
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a0f      	ldr	r2, [pc, #60]	; (80060fc <DMA_CalcBaseAndBitshift+0x6c>)
 80060c0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80060c2:	e00e      	b.n	80060e2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <DMA_CalcBaseAndBitshift+0x70>)
 80060cc:	4413      	add	r3, r2
 80060ce:	4a0a      	ldr	r2, [pc, #40]	; (80060f8 <DMA_CalcBaseAndBitshift+0x68>)
 80060d0:	fba2 2303 	umull	r2, r3, r2, r3
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	009a      	lsls	r2, r3, #2
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a09      	ldr	r2, [pc, #36]	; (8006104 <DMA_CalcBaseAndBitshift+0x74>)
 80060e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40020407 	.word	0x40020407
 80060f4:	bffdfff8 	.word	0xbffdfff8
 80060f8:	cccccccd 	.word	0xcccccccd
 80060fc:	40020000 	.word	0x40020000
 8006100:	bffdfbf8 	.word	0xbffdfbf8
 8006104:	40020400 	.word	0x40020400

08006108 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006122:	4b2f      	ldr	r3, [pc, #188]	; (80061e0 <HAL_FLASH_Program+0xd8>)
 8006124:	7e1b      	ldrb	r3, [r3, #24]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_FLASH_Program+0x26>
 800612a:	2302      	movs	r3, #2
 800612c:	e054      	b.n	80061d8 <HAL_FLASH_Program+0xd0>
 800612e:	4b2c      	ldr	r3, [pc, #176]	; (80061e0 <HAL_FLASH_Program+0xd8>)
 8006130:	2201      	movs	r2, #1
 8006132:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006134:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006138:	f000 f8a8 	bl	800628c <FLASH_WaitForLastOperation>
 800613c:	4603      	mov	r3, r0
 800613e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d144      	bne.n	80061d0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d102      	bne.n	8006152 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800614c:	2301      	movs	r3, #1
 800614e:	757b      	strb	r3, [r7, #21]
 8006150:	e007      	b.n	8006162 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d102      	bne.n	800615e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006158:	2302      	movs	r3, #2
 800615a:	757b      	strb	r3, [r7, #21]
 800615c:	e001      	b.n	8006162 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800615e:	2304      	movs	r3, #4
 8006160:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8006162:	2300      	movs	r3, #0
 8006164:	75bb      	strb	r3, [r7, #22]
 8006166:	e02d      	b.n	80061c4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006168:	7dbb      	ldrb	r3, [r7, #22]
 800616a:	005a      	lsls	r2, r3, #1
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	eb02 0c03 	add.w	ip, r2, r3
 8006172:	7dbb      	ldrb	r3, [r7, #22]
 8006174:	0119      	lsls	r1, r3, #4
 8006176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800617a:	f1c1 0620 	rsb	r6, r1, #32
 800617e:	f1a1 0020 	sub.w	r0, r1, #32
 8006182:	fa22 f401 	lsr.w	r4, r2, r1
 8006186:	fa03 f606 	lsl.w	r6, r3, r6
 800618a:	4334      	orrs	r4, r6
 800618c:	fa23 f000 	lsr.w	r0, r3, r0
 8006190:	4304      	orrs	r4, r0
 8006192:	fa23 f501 	lsr.w	r5, r3, r1
 8006196:	b2a3      	uxth	r3, r4
 8006198:	4619      	mov	r1, r3
 800619a:	4660      	mov	r0, ip
 800619c:	f000 f85a 	bl	8006254 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80061a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80061a4:	f000 f872 	bl	800628c <FLASH_WaitForLastOperation>
 80061a8:	4603      	mov	r3, r0
 80061aa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80061ac:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <HAL_FLASH_Program+0xdc>)
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	4a0c      	ldr	r2, [pc, #48]	; (80061e4 <HAL_FLASH_Program+0xdc>)
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80061be:	7dbb      	ldrb	r3, [r7, #22]
 80061c0:	3301      	adds	r3, #1
 80061c2:	75bb      	strb	r3, [r7, #22]
 80061c4:	7dba      	ldrb	r2, [r7, #22]
 80061c6:	7d7b      	ldrb	r3, [r7, #21]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d3cd      	bcc.n	8006168 <HAL_FLASH_Program+0x60>
 80061cc:	e000      	b.n	80061d0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80061ce:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80061d0:	4b03      	ldr	r3, [pc, #12]	; (80061e0 <HAL_FLASH_Program+0xd8>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	761a      	strb	r2, [r3, #24]

  return status;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e0:	20001a18 	.word	0x20001a18
 80061e4:	40022000 	.word	0x40022000

080061e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <HAL_FLASH_Unlock+0x40>)
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80061fe:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <HAL_FLASH_Unlock+0x40>)
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <HAL_FLASH_Unlock+0x44>)
 8006202:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006204:	4b08      	ldr	r3, [pc, #32]	; (8006228 <HAL_FLASH_Unlock+0x40>)
 8006206:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <HAL_FLASH_Unlock+0x48>)
 8006208:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <HAL_FLASH_Unlock+0x40>)
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800621a:	79fb      	ldrb	r3, [r7, #7]
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40022000 	.word	0x40022000
 800622c:	45670123 	.word	0x45670123
 8006230:	cdef89ab 	.word	0xcdef89ab

08006234 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <HAL_FLASH_Lock+0x1c>)
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	4a04      	ldr	r2, [pc, #16]	; (8006250 <HAL_FLASH_Lock+0x1c>)
 800623e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006242:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40022000 	.word	0x40022000

08006254 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006260:	4b08      	ldr	r3, [pc, #32]	; (8006284 <FLASH_Program_HalfWord+0x30>)
 8006262:	2200      	movs	r2, #0
 8006264:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <FLASH_Program_HalfWord+0x34>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	4a07      	ldr	r2, [pc, #28]	; (8006288 <FLASH_Program_HalfWord+0x34>)
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	887a      	ldrh	r2, [r7, #2]
 8006276:	801a      	strh	r2, [r3, #0]
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	20001a18 	.word	0x20001a18
 8006288:	40022000 	.word	0x40022000

0800628c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006294:	f7fe fc92 	bl	8004bbc <HAL_GetTick>
 8006298:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800629a:	e010      	b.n	80062be <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d00c      	beq.n	80062be <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <FLASH_WaitForLastOperation+0x2e>
 80062aa:	f7fe fc87 	bl	8004bbc <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d201      	bcs.n	80062be <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e01f      	b.n	80062fe <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80062be:	4b12      	ldr	r3, [pc, #72]	; (8006308 <FLASH_WaitForLastOperation+0x7c>)
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d0e8      	beq.n	800629c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80062ca:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <FLASH_WaitForLastOperation+0x7c>)
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d102      	bne.n	80062dc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80062d6:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <FLASH_WaitForLastOperation+0x7c>)
 80062d8:	2220      	movs	r2, #32
 80062da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <FLASH_WaitForLastOperation+0x7c>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d005      	beq.n	80062f4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80062e8:	4b07      	ldr	r3, [pc, #28]	; (8006308 <FLASH_WaitForLastOperation+0x7c>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d103      	bne.n	80062fc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80062f4:	f000 f80a 	bl	800630c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40022000 	.word	0x40022000

0800630c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006316:	4b14      	ldr	r3, [pc, #80]	; (8006368 <FLASH_SetErrorCode+0x5c>)
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	2b10      	cmp	r3, #16
 8006320:	d109      	bne.n	8006336 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006322:	4b12      	ldr	r3, [pc, #72]	; (800636c <FLASH_SetErrorCode+0x60>)
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f043 0302 	orr.w	r3, r3, #2
 800632a:	4a10      	ldr	r2, [pc, #64]	; (800636c <FLASH_SetErrorCode+0x60>)
 800632c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f043 0310 	orr.w	r3, r3, #16
 8006334:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <FLASH_SetErrorCode+0x5c>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b04      	cmp	r3, #4
 8006340:	d109      	bne.n	8006356 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006342:	4b0a      	ldr	r3, [pc, #40]	; (800636c <FLASH_SetErrorCode+0x60>)
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	4a08      	ldr	r2, [pc, #32]	; (800636c <FLASH_SetErrorCode+0x60>)
 800634c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f043 0304 	orr.w	r3, r3, #4
 8006354:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006356:	4a04      	ldr	r2, [pc, #16]	; (8006368 <FLASH_SetErrorCode+0x5c>)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60d3      	str	r3, [r2, #12]
}  
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	40022000 	.word	0x40022000
 800636c:	20001a18 	.word	0x20001a18

08006370 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006382:	4b2e      	ldr	r3, [pc, #184]	; (800643c <HAL_FLASHEx_Erase+0xcc>)
 8006384:	7e1b      	ldrb	r3, [r3, #24]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_FLASHEx_Erase+0x1e>
 800638a:	2302      	movs	r3, #2
 800638c:	e052      	b.n	8006434 <HAL_FLASHEx_Erase+0xc4>
 800638e:	4b2b      	ldr	r3, [pc, #172]	; (800643c <HAL_FLASHEx_Erase+0xcc>)
 8006390:	2201      	movs	r2, #1
 8006392:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d115      	bne.n	80063c8 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800639c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063a0:	f7ff ff74 	bl	800628c <FLASH_WaitForLastOperation>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d140      	bne.n	800642c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80063aa:	f000 f84b 	bl	8006444 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063b2:	f7ff ff6b 	bl	800628c <FLASH_WaitForLastOperation>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80063ba:	4b21      	ldr	r3, [pc, #132]	; (8006440 <HAL_FLASHEx_Erase+0xd0>)
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	4a20      	ldr	r2, [pc, #128]	; (8006440 <HAL_FLASHEx_Erase+0xd0>)
 80063c0:	f023 0304 	bic.w	r3, r3, #4
 80063c4:	6113      	str	r3, [r2, #16]
 80063c6:	e031      	b.n	800642c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80063c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063cc:	f7ff ff5e 	bl	800628c <FLASH_WaitForLastOperation>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d12a      	bne.n	800642c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f04f 32ff 	mov.w	r2, #4294967295
 80063dc:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	60bb      	str	r3, [r7, #8]
 80063e4:	e019      	b.n	800641a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80063e6:	68b8      	ldr	r0, [r7, #8]
 80063e8:	f000 f846 	bl	8006478 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063f0:	f7ff ff4c 	bl	800628c <FLASH_WaitForLastOperation>
 80063f4:	4603      	mov	r3, r0
 80063f6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80063f8:	4b11      	ldr	r3, [pc, #68]	; (8006440 <HAL_FLASHEx_Erase+0xd0>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	4a10      	ldr	r2, [pc, #64]	; (8006440 <HAL_FLASHEx_Erase+0xd0>)
 80063fe:	f023 0302 	bic.w	r3, r3, #2
 8006402:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	601a      	str	r2, [r3, #0]
            break;
 8006410:	e00c      	b.n	800642c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006418:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	02da      	lsls	r2, r3, #11
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	429a      	cmp	r2, r3
 800642a:	d3dc      	bcc.n	80063e6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800642c:	4b03      	ldr	r3, [pc, #12]	; (800643c <HAL_FLASHEx_Erase+0xcc>)
 800642e:	2200      	movs	r2, #0
 8006430:	761a      	strb	r2, [r3, #24]

  return status;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20001a18 	.word	0x20001a18
 8006440:	40022000 	.word	0x40022000

08006444 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <FLASH_MassErase+0x2c>)
 800644a:	2200      	movs	r2, #0
 800644c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <FLASH_MassErase+0x30>)
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	4a08      	ldr	r2, [pc, #32]	; (8006474 <FLASH_MassErase+0x30>)
 8006454:	f043 0304 	orr.w	r3, r3, #4
 8006458:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <FLASH_MassErase+0x30>)
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	4a05      	ldr	r2, [pc, #20]	; (8006474 <FLASH_MassErase+0x30>)
 8006460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006464:	6113      	str	r3, [r2, #16]
}
 8006466:	bf00      	nop
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20001a18 	.word	0x20001a18
 8006474:	40022000 	.word	0x40022000

08006478 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <FLASH_PageErase+0x38>)
 8006482:	2200      	movs	r2, #0
 8006484:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006486:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <FLASH_PageErase+0x3c>)
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	4a0a      	ldr	r2, [pc, #40]	; (80064b4 <FLASH_PageErase+0x3c>)
 800648c:	f043 0302 	orr.w	r3, r3, #2
 8006490:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006492:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <FLASH_PageErase+0x3c>)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <FLASH_PageErase+0x3c>)
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <FLASH_PageErase+0x3c>)
 800649e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a2:	6113      	str	r3, [r2, #16]
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	20001a18 	.word	0x20001a18
 80064b4:	40022000 	.word	0x40022000

080064b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064c6:	e160      	b.n	800678a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	2101      	movs	r1, #1
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	fa01 f303 	lsl.w	r3, r1, r3
 80064d4:	4013      	ands	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8152 	beq.w	8006784 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d00b      	beq.n	8006500 <HAL_GPIO_Init+0x48>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d007      	beq.n	8006500 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064f4:	2b11      	cmp	r3, #17
 80064f6:	d003      	beq.n	8006500 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	2b12      	cmp	r3, #18
 80064fe:	d130      	bne.n	8006562 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	2203      	movs	r2, #3
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	43db      	mvns	r3, r3
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4013      	ands	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006536:	2201      	movs	r2, #1
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	43db      	mvns	r3, r3
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4013      	ands	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	091b      	lsrs	r3, r3, #4
 800654c:	f003 0201 	and.w	r2, r3, #1
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	2203      	movs	r2, #3
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43db      	mvns	r3, r3
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4013      	ands	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d003      	beq.n	80065a2 <HAL_GPIO_Init+0xea>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b12      	cmp	r3, #18
 80065a0:	d123      	bne.n	80065ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	08da      	lsrs	r2, r3, #3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3208      	adds	r2, #8
 80065aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	220f      	movs	r2, #15
 80065ba:	fa02 f303 	lsl.w	r3, r2, r3
 80065be:	43db      	mvns	r3, r3
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4013      	ands	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	fa02 f303 	lsl.w	r3, r2, r3
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	08da      	lsrs	r2, r3, #3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3208      	adds	r2, #8
 80065e4:	6939      	ldr	r1, [r7, #16]
 80065e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	2203      	movs	r2, #3
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43db      	mvns	r3, r3
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4013      	ands	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f003 0203 	and.w	r2, r3, #3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 80ac 	beq.w	8006784 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800662c:	4b5e      	ldr	r3, [pc, #376]	; (80067a8 <HAL_GPIO_Init+0x2f0>)
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	4a5d      	ldr	r2, [pc, #372]	; (80067a8 <HAL_GPIO_Init+0x2f0>)
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	6193      	str	r3, [r2, #24]
 8006638:	4b5b      	ldr	r3, [pc, #364]	; (80067a8 <HAL_GPIO_Init+0x2f0>)
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	60bb      	str	r3, [r7, #8]
 8006642:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006644:	4a59      	ldr	r2, [pc, #356]	; (80067ac <HAL_GPIO_Init+0x2f4>)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	089b      	lsrs	r3, r3, #2
 800664a:	3302      	adds	r3, #2
 800664c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006650:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	220f      	movs	r2, #15
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	43db      	mvns	r3, r3
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4013      	ands	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800666e:	d025      	beq.n	80066bc <HAL_GPIO_Init+0x204>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a4f      	ldr	r2, [pc, #316]	; (80067b0 <HAL_GPIO_Init+0x2f8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d01f      	beq.n	80066b8 <HAL_GPIO_Init+0x200>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a4e      	ldr	r2, [pc, #312]	; (80067b4 <HAL_GPIO_Init+0x2fc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d019      	beq.n	80066b4 <HAL_GPIO_Init+0x1fc>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a4d      	ldr	r2, [pc, #308]	; (80067b8 <HAL_GPIO_Init+0x300>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d013      	beq.n	80066b0 <HAL_GPIO_Init+0x1f8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a4c      	ldr	r2, [pc, #304]	; (80067bc <HAL_GPIO_Init+0x304>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00d      	beq.n	80066ac <HAL_GPIO_Init+0x1f4>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a4b      	ldr	r2, [pc, #300]	; (80067c0 <HAL_GPIO_Init+0x308>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d007      	beq.n	80066a8 <HAL_GPIO_Init+0x1f0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a4a      	ldr	r2, [pc, #296]	; (80067c4 <HAL_GPIO_Init+0x30c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d101      	bne.n	80066a4 <HAL_GPIO_Init+0x1ec>
 80066a0:	2306      	movs	r3, #6
 80066a2:	e00c      	b.n	80066be <HAL_GPIO_Init+0x206>
 80066a4:	2307      	movs	r3, #7
 80066a6:	e00a      	b.n	80066be <HAL_GPIO_Init+0x206>
 80066a8:	2305      	movs	r3, #5
 80066aa:	e008      	b.n	80066be <HAL_GPIO_Init+0x206>
 80066ac:	2304      	movs	r3, #4
 80066ae:	e006      	b.n	80066be <HAL_GPIO_Init+0x206>
 80066b0:	2303      	movs	r3, #3
 80066b2:	e004      	b.n	80066be <HAL_GPIO_Init+0x206>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e002      	b.n	80066be <HAL_GPIO_Init+0x206>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <HAL_GPIO_Init+0x206>
 80066bc:	2300      	movs	r3, #0
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	f002 0203 	and.w	r2, r2, #3
 80066c4:	0092      	lsls	r2, r2, #2
 80066c6:	4093      	lsls	r3, r2
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80066ce:	4937      	ldr	r1, [pc, #220]	; (80067ac <HAL_GPIO_Init+0x2f4>)
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	089b      	lsrs	r3, r3, #2
 80066d4:	3302      	adds	r3, #2
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066dc:	4b3a      	ldr	r3, [pc, #232]	; (80067c8 <HAL_GPIO_Init+0x310>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4013      	ands	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006700:	4a31      	ldr	r2, [pc, #196]	; (80067c8 <HAL_GPIO_Init+0x310>)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006706:	4b30      	ldr	r3, [pc, #192]	; (80067c8 <HAL_GPIO_Init+0x310>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	43db      	mvns	r3, r3
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4013      	ands	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800672a:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <HAL_GPIO_Init+0x310>)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006730:	4b25      	ldr	r3, [pc, #148]	; (80067c8 <HAL_GPIO_Init+0x310>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	43db      	mvns	r3, r3
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4013      	ands	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006754:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <HAL_GPIO_Init+0x310>)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800675a:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <HAL_GPIO_Init+0x310>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	43db      	mvns	r3, r3
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4013      	ands	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800677e:	4a12      	ldr	r2, [pc, #72]	; (80067c8 <HAL_GPIO_Init+0x310>)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	3301      	adds	r3, #1
 8006788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	f47f ae97 	bne.w	80064c8 <HAL_GPIO_Init+0x10>
  }
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	40021000 	.word	0x40021000
 80067ac:	40010000 	.word	0x40010000
 80067b0:	48000400 	.word	0x48000400
 80067b4:	48000800 	.word	0x48000800
 80067b8:	48000c00 	.word	0x48000c00
 80067bc:	48001000 	.word	0x48001000
 80067c0:	48001400 	.word	0x48001400
 80067c4:	48001800 	.word	0x48001800
 80067c8:	40010400 	.word	0x40010400

080067cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	887b      	ldrh	r3, [r7, #2]
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067e4:	2301      	movs	r3, #1
 80067e6:	73fb      	strb	r3, [r7, #15]
 80067e8:	e001      	b.n	80067ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
 8006808:	4613      	mov	r3, r2
 800680a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800680c:	787b      	ldrb	r3, [r7, #1]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006812:	887a      	ldrh	r2, [r7, #2]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006818:	e002      	b.n	8006820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800681a:	887a      	ldrh	r2, [r7, #2]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800682c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682e:	b08b      	sub	sp, #44	; 0x2c
 8006830:	af06      	add	r7, sp, #24
 8006832:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e0d0      	b.n	80069e0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fe f87c 	bl	8004950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2203      	movs	r2, #3
 800685c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f003 fca2 	bl	800a1ae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]
 800686e:	e04c      	b.n	800690a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	440b      	add	r3, r1
 8006880:	3301      	adds	r3, #1
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	440b      	add	r3, r1
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800689a:	7bfa      	ldrb	r2, [r7, #15]
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	b298      	uxth	r0, r3
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	440b      	add	r3, r1
 80068ac:	3336      	adds	r3, #54	; 0x36
 80068ae:	4602      	mov	r2, r0
 80068b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	440b      	add	r3, r1
 80068c2:	3303      	adds	r3, #3
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068c8:	7bfa      	ldrb	r2, [r7, #15]
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	440b      	add	r3, r1
 80068d6:	3338      	adds	r3, #56	; 0x38
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068dc:	7bfa      	ldrb	r2, [r7, #15]
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	440b      	add	r3, r1
 80068ea:	333c      	adds	r3, #60	; 0x3c
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068f0:	7bfa      	ldrb	r2, [r7, #15]
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	440b      	add	r3, r1
 80068fe:	3340      	adds	r3, #64	; 0x40
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	3301      	adds	r3, #1
 8006908:	73fb      	strb	r3, [r7, #15]
 800690a:	7bfa      	ldrb	r2, [r7, #15]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d3ad      	bcc.n	8006870 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
 8006918:	e044      	b.n	80069a4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800691a:	7bfa      	ldrb	r2, [r7, #15]
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	440b      	add	r3, r1
 8006928:	f203 1369 	addw	r3, r3, #361	; 0x169
 800692c:	2200      	movs	r2, #0
 800692e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006930:	7bfa      	ldrb	r2, [r7, #15]
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	440b      	add	r3, r1
 800693e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006942:	7bfa      	ldrb	r2, [r7, #15]
 8006944:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006946:	7bfa      	ldrb	r2, [r7, #15]
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	440b      	add	r3, r1
 8006954:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800695c:	7bfa      	ldrb	r2, [r7, #15]
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	440b      	add	r3, r1
 800696a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006972:	7bfa      	ldrb	r2, [r7, #15]
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	440b      	add	r3, r1
 8006980:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006988:	7bfa      	ldrb	r2, [r7, #15]
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	440b      	add	r3, r1
 8006996:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	3301      	adds	r3, #1
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	7bfa      	ldrb	r2, [r7, #15]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d3b5      	bcc.n	800691a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	687e      	ldr	r6, [r7, #4]
 80069b6:	466d      	mov	r5, sp
 80069b8:	f106 0410 	add.w	r4, r6, #16
 80069bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	1d33      	adds	r3, r6, #4
 80069c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069c8:	6838      	ldr	r0, [r7, #0]
 80069ca:	f003 fc0b 	bl	800a1e4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	1d3b      	adds	r3, r7, #4
 80069f2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069f4:	1d3b      	adds	r3, r7, #4
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f000 bf01 	b.w	8007804 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a02:	1d3b      	adds	r3, r7, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8160 	beq.w	8006cd2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006a12:	4bae      	ldr	r3, [pc, #696]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f003 030c 	and.w	r3, r3, #12
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d00c      	beq.n	8006a38 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a1e:	4bab      	ldr	r3, [pc, #684]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f003 030c 	and.w	r3, r3, #12
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d159      	bne.n	8006ade <HAL_RCC_OscConfig+0xf6>
 8006a2a:	4ba8      	ldr	r3, [pc, #672]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a36:	d152      	bne.n	8006ade <HAL_RCC_OscConfig+0xf6>
 8006a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a3c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a40:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006a44:	fa93 f3a3 	rbit	r3, r3
 8006a48:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a50:	fab3 f383 	clz	r3, r3
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d102      	bne.n	8006a6a <HAL_RCC_OscConfig+0x82>
 8006a64:	4b99      	ldr	r3, [pc, #612]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	e015      	b.n	8006a96 <HAL_RCC_OscConfig+0xae>
 8006a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a6e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8006a76:	fa93 f3a3 	rbit	r3, r3
 8006a7a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006a86:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006a8a:	fa93 f3a3 	rbit	r3, r3
 8006a8e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006a92:	4b8e      	ldr	r3, [pc, #568]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a9a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006a9e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8006aa2:	fa92 f2a2 	rbit	r2, r2
 8006aa6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8006aaa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006aae:	fab2 f282 	clz	r2, r2
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	f042 0220 	orr.w	r2, r2, #32
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	f002 021f 	and.w	r2, r2, #31
 8006abe:	2101      	movs	r1, #1
 8006ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8102 	beq.w	8006cd0 <HAL_RCC_OscConfig+0x2e8>
 8006acc:	1d3b      	adds	r3, r7, #4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 80fc 	bne.w	8006cd0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f000 be93 	b.w	8007804 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ade:	1d3b      	adds	r3, r7, #4
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae8:	d106      	bne.n	8006af8 <HAL_RCC_OscConfig+0x110>
 8006aea:	4b78      	ldr	r3, [pc, #480]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a77      	ldr	r2, [pc, #476]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e030      	b.n	8006b5a <HAL_RCC_OscConfig+0x172>
 8006af8:	1d3b      	adds	r3, r7, #4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10c      	bne.n	8006b1c <HAL_RCC_OscConfig+0x134>
 8006b02:	4b72      	ldr	r3, [pc, #456]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a71      	ldr	r2, [pc, #452]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	4b6f      	ldr	r3, [pc, #444]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6e      	ldr	r2, [pc, #440]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e01e      	b.n	8006b5a <HAL_RCC_OscConfig+0x172>
 8006b1c:	1d3b      	adds	r3, r7, #4
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b26:	d10c      	bne.n	8006b42 <HAL_RCC_OscConfig+0x15a>
 8006b28:	4b68      	ldr	r3, [pc, #416]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a67      	ldr	r2, [pc, #412]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	4b65      	ldr	r3, [pc, #404]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a64      	ldr	r2, [pc, #400]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	e00b      	b.n	8006b5a <HAL_RCC_OscConfig+0x172>
 8006b42:	4b62      	ldr	r3, [pc, #392]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a61      	ldr	r2, [pc, #388]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	4b5f      	ldr	r3, [pc, #380]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a5e      	ldr	r2, [pc, #376]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b58:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b5a:	1d3b      	adds	r3, r7, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d059      	beq.n	8006c18 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b64:	f7fe f82a 	bl	8004bbc <HAL_GetTick>
 8006b68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b6e:	f7fe f825 	bl	8004bbc <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b64      	cmp	r3, #100	; 0x64
 8006b7c:	d902      	bls.n	8006b84 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	f000 be40 	b.w	8007804 <HAL_RCC_OscConfig+0xe1c>
 8006b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006b90:	fa93 f3a3 	rbit	r3, r3
 8006b94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8006b98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b9c:	fab3 f383 	clz	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f043 0301 	orr.w	r3, r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d102      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x1ce>
 8006bb0:	4b46      	ldr	r3, [pc, #280]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	e015      	b.n	8006be2 <HAL_RCC_OscConfig+0x1fa>
 8006bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8006bc2:	fa93 f3a3 	rbit	r3, r3
 8006bc6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006bd2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8006bd6:	fa93 f3a3 	rbit	r3, r3
 8006bda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006bde:	4b3b      	ldr	r3, [pc, #236]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006be6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8006bea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8006bee:	fa92 f2a2 	rbit	r2, r2
 8006bf2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8006bf6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006bfa:	fab2 f282 	clz	r2, r2
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	f042 0220 	orr.w	r2, r2, #32
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	f002 021f 	and.w	r2, r2, #31
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0ab      	beq.n	8006b6e <HAL_RCC_OscConfig+0x186>
 8006c16:	e05c      	b.n	8006cd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fd ffd0 	bl	8004bbc <HAL_GetTick>
 8006c1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c20:	e00a      	b.n	8006c38 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c22:	f7fd ffcb 	bl	8004bbc <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b64      	cmp	r3, #100	; 0x64
 8006c30:	d902      	bls.n	8006c38 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	f000 bde6 	b.w	8007804 <HAL_RCC_OscConfig+0xe1c>
 8006c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c3c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8006c44:	fa93 f3a3 	rbit	r3, r3
 8006c48:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8006c4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c50:	fab3 f383 	clz	r3, r3
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d102      	bne.n	8006c6a <HAL_RCC_OscConfig+0x282>
 8006c64:	4b19      	ldr	r3, [pc, #100]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	e015      	b.n	8006c96 <HAL_RCC_OscConfig+0x2ae>
 8006c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006c76:	fa93 f3a3 	rbit	r3, r3
 8006c7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006c7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c82:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006c86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006c8a:	fa93 f3a3 	rbit	r3, r3
 8006c8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006c92:	4b0e      	ldr	r3, [pc, #56]	; (8006ccc <HAL_RCC_OscConfig+0x2e4>)
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c9a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006c9e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006ca2:	fa92 f2a2 	rbit	r2, r2
 8006ca6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006caa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006cae:	fab2 f282 	clz	r2, r2
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	f042 0220 	orr.w	r2, r2, #32
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	f002 021f 	and.w	r2, r2, #31
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1ab      	bne.n	8006c22 <HAL_RCC_OscConfig+0x23a>
 8006cca:	e002      	b.n	8006cd2 <HAL_RCC_OscConfig+0x2ea>
 8006ccc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8170 	beq.w	8006fc2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006ce2:	4bd0      	ldr	r3, [pc, #832]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f003 030c 	and.w	r3, r3, #12
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00c      	beq.n	8006d08 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006cee:	4bcd      	ldr	r3, [pc, #820]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d16d      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x3ee>
 8006cfa:	4bca      	ldr	r3, [pc, #808]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d06:	d166      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x3ee>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8006d12:	fa93 f3a3 	rbit	r3, r3
 8006d16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8006d1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d1e:	fab3 f383 	clz	r3, r3
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f043 0301 	orr.w	r3, r3, #1
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d102      	bne.n	8006d38 <HAL_RCC_OscConfig+0x350>
 8006d32:	4bbc      	ldr	r3, [pc, #752]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	e013      	b.n	8006d60 <HAL_RCC_OscConfig+0x378>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8006d42:	fa93 f3a3 	rbit	r3, r3
 8006d46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006d50:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006d54:	fa93 f3a3 	rbit	r3, r3
 8006d58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006d5c:	4bb1      	ldr	r3, [pc, #708]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	2202      	movs	r2, #2
 8006d62:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006d66:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006d6a:	fa92 f2a2 	rbit	r2, r2
 8006d6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8006d72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006d76:	fab2 f282 	clz	r2, r2
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	f042 0220 	orr.w	r2, r2, #32
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	f002 021f 	and.w	r2, r2, #31
 8006d86:	2101      	movs	r1, #1
 8006d88:	fa01 f202 	lsl.w	r2, r1, r2
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <HAL_RCC_OscConfig+0x3ba>
 8006d92:	1d3b      	adds	r3, r7, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d002      	beq.n	8006da2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f000 bd31 	b.w	8007804 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006da2:	4ba0      	ldr	r3, [pc, #640]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	21f8      	movs	r1, #248	; 0xf8
 8006db2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006dba:	fa91 f1a1 	rbit	r1, r1
 8006dbe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006dc2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006dc6:	fab1 f181 	clz	r1, r1
 8006dca:	b2c9      	uxtb	r1, r1
 8006dcc:	408b      	lsls	r3, r1
 8006dce:	4995      	ldr	r1, [pc, #596]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dd4:	e0f5      	b.n	8006fc2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dd6:	1d3b      	adds	r3, r7, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8085 	beq.w	8006eec <HAL_RCC_OscConfig+0x504>
 8006de2:	2301      	movs	r3, #1
 8006de4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006dec:	fa93 f3a3 	rbit	r3, r3
 8006df0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8006df4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006df8:	fab3 f383 	clz	r3, r3
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0e:	f7fd fed5 	bl	8004bbc <HAL_GetTick>
 8006e12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e16:	e00a      	b.n	8006e2e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e18:	f7fd fed0 	bl	8004bbc <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d902      	bls.n	8006e2e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	f000 bceb 	b.w	8007804 <HAL_RCC_OscConfig+0xe1c>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e34:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006e38:	fa93 f3a3 	rbit	r3, r3
 8006e3c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8006e40:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e44:	fab3 f383 	clz	r3, r3
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d102      	bne.n	8006e5e <HAL_RCC_OscConfig+0x476>
 8006e58:	4b72      	ldr	r3, [pc, #456]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	e013      	b.n	8006e86 <HAL_RCC_OscConfig+0x49e>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e64:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006e68:	fa93 f3a3 	rbit	r3, r3
 8006e6c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006e70:	2302      	movs	r3, #2
 8006e72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006e76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006e7a:	fa93 f3a3 	rbit	r3, r3
 8006e7e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006e82:	4b68      	ldr	r3, [pc, #416]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	2202      	movs	r2, #2
 8006e88:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006e8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006e90:	fa92 f2a2 	rbit	r2, r2
 8006e94:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006e98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006e9c:	fab2 f282 	clz	r2, r2
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	f042 0220 	orr.w	r2, r2, #32
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	f002 021f 	and.w	r2, r2, #31
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0af      	beq.n	8006e18 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb8:	4b5a      	ldr	r3, [pc, #360]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ec0:	1d3b      	adds	r3, r7, #4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	21f8      	movs	r1, #248	; 0xf8
 8006ec8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ecc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006ed0:	fa91 f1a1 	rbit	r1, r1
 8006ed4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006ed8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006edc:	fab1 f181 	clz	r1, r1
 8006ee0:	b2c9      	uxtb	r1, r1
 8006ee2:	408b      	lsls	r3, r1
 8006ee4:	494f      	ldr	r1, [pc, #316]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	600b      	str	r3, [r1, #0]
 8006eea:	e06a      	b.n	8006fc2 <HAL_RCC_OscConfig+0x5da>
 8006eec:	2301      	movs	r3, #1
 8006eee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006ef6:	fa93 f3a3 	rbit	r3, r3
 8006efa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8006efe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f02:	fab3 f383 	clz	r3, r3
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	461a      	mov	r2, r3
 8006f14:	2300      	movs	r3, #0
 8006f16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f18:	f7fd fe50 	bl	8004bbc <HAL_GetTick>
 8006f1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f20:	e00a      	b.n	8006f38 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f22:	f7fd fe4b 	bl	8004bbc <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d902      	bls.n	8006f38 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	f000 bc66 	b.w	8007804 <HAL_RCC_OscConfig+0xe1c>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f42:	fa93 f3a3 	rbit	r3, r3
 8006f46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8006f4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f4e:	fab3 f383 	clz	r3, r3
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d102      	bne.n	8006f68 <HAL_RCC_OscConfig+0x580>
 8006f62:	4b30      	ldr	r3, [pc, #192]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	e013      	b.n	8006f90 <HAL_RCC_OscConfig+0x5a8>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f72:	fa93 f3a3 	rbit	r3, r3
 8006f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f84:	fa93 f3a3 	rbit	r3, r3
 8006f88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f8c:	4b25      	ldr	r3, [pc, #148]	; (8007024 <HAL_RCC_OscConfig+0x63c>)
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	2202      	movs	r2, #2
 8006f92:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006f96:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006f9a:	fa92 f2a2 	rbit	r2, r2
 8006f9e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8006fa2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006fa6:	fab2 f282 	clz	r2, r2
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	f042 0220 	orr.w	r2, r2, #32
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	f002 021f 	and.w	r2, r2, #31
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1af      	bne.n	8006f22 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fc2:	1d3b      	adds	r3, r7, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80da 	beq.w	8007186 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fd2:	1d3b      	adds	r3, r7, #4
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d069      	beq.n	80070b0 <HAL_RCC_OscConfig+0x6c8>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe6:	fa93 f3a3 	rbit	r3, r3
 8006fea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8006fee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ff2:	fab3 f383 	clz	r3, r3
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4b0b      	ldr	r3, [pc, #44]	; (8007028 <HAL_RCC_OscConfig+0x640>)
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	461a      	mov	r2, r3
 8007002:	2301      	movs	r3, #1
 8007004:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007006:	f7fd fdd9 	bl	8004bbc <HAL_GetTick>
 800700a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800700e:	e00d      	b.n	800702c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007010:	f7fd fdd4 	bl	8004bbc <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d905      	bls.n	800702c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e3ef      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
 8007024:	40021000 	.word	0x40021000
 8007028:	10908120 	.word	0x10908120
 800702c:	2302      	movs	r3, #2
 800702e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007036:	fa93 f2a3 	rbit	r2, r3
 800703a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007044:	2202      	movs	r2, #2
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	fa93 f2a3 	rbit	r2, r3
 8007052:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800705c:	2202      	movs	r2, #2
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	fa93 f2a3 	rbit	r2, r3
 800706a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800706e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007070:	4ba4      	ldr	r3, [pc, #656]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007074:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007078:	2102      	movs	r1, #2
 800707a:	6019      	str	r1, [r3, #0]
 800707c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	fa93 f1a3 	rbit	r1, r3
 8007086:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800708a:	6019      	str	r1, [r3, #0]
  return result;
 800708c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	fab3 f383 	clz	r3, r3
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	2101      	movs	r1, #1
 80070a4:	fa01 f303 	lsl.w	r3, r1, r3
 80070a8:	4013      	ands	r3, r2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0b0      	beq.n	8007010 <HAL_RCC_OscConfig+0x628>
 80070ae:	e06a      	b.n	8007186 <HAL_RCC_OscConfig+0x79e>
 80070b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80070b4:	2201      	movs	r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	fa93 f2a3 	rbit	r2, r3
 80070c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80070c6:	601a      	str	r2, [r3, #0]
  return result;
 80070c8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80070cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070ce:	fab3 f383 	clz	r3, r3
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	461a      	mov	r2, r3
 80070d6:	4b8c      	ldr	r3, [pc, #560]	; (8007308 <HAL_RCC_OscConfig+0x920>)
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	461a      	mov	r2, r3
 80070de:	2300      	movs	r3, #0
 80070e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070e2:	f7fd fd6b 	bl	8004bbc <HAL_GetTick>
 80070e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070ea:	e009      	b.n	8007100 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070ec:	f7fd fd66 	bl	8004bbc <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e381      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
 8007100:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007104:	2202      	movs	r2, #2
 8007106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007108:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	fa93 f2a3 	rbit	r2, r3
 8007112:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800711c:	2202      	movs	r2, #2
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	fa93 f2a3 	rbit	r2, r3
 800712a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007134:	2202      	movs	r2, #2
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	fa93 f2a3 	rbit	r2, r3
 8007142:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007146:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007148:	4b6e      	ldr	r3, [pc, #440]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 800714a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800714c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007150:	2102      	movs	r1, #2
 8007152:	6019      	str	r1, [r3, #0]
 8007154:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	fa93 f1a3 	rbit	r1, r3
 800715e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007162:	6019      	str	r1, [r3, #0]
  return result;
 8007164:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	fab3 f383 	clz	r3, r3
 800716e:	b2db      	uxtb	r3, r3
 8007170:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f003 031f 	and.w	r3, r3, #31
 800717a:	2101      	movs	r1, #1
 800717c:	fa01 f303 	lsl.w	r3, r1, r3
 8007180:	4013      	ands	r3, r2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1b2      	bne.n	80070ec <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007186:	1d3b      	adds	r3, r7, #4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8157 	beq.w	8007444 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007196:	2300      	movs	r3, #0
 8007198:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719c:	4b59      	ldr	r3, [pc, #356]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d112      	bne.n	80071ce <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a8:	4b56      	ldr	r3, [pc, #344]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	4a55      	ldr	r2, [pc, #340]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 80071ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b2:	61d3      	str	r3, [r2, #28]
 80071b4:	4b53      	ldr	r3, [pc, #332]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80071bc:	f107 030c 	add.w	r3, r7, #12
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	f107 030c 	add.w	r3, r7, #12
 80071c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ce:	4b4f      	ldr	r3, [pc, #316]	; (800730c <HAL_RCC_OscConfig+0x924>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d11a      	bne.n	8007210 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071da:	4b4c      	ldr	r3, [pc, #304]	; (800730c <HAL_RCC_OscConfig+0x924>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a4b      	ldr	r2, [pc, #300]	; (800730c <HAL_RCC_OscConfig+0x924>)
 80071e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071e6:	f7fd fce9 	bl	8004bbc <HAL_GetTick>
 80071ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ee:	e009      	b.n	8007204 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f0:	f7fd fce4 	bl	8004bbc <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b64      	cmp	r3, #100	; 0x64
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e2ff      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007204:	4b41      	ldr	r3, [pc, #260]	; (800730c <HAL_RCC_OscConfig+0x924>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0ef      	beq.n	80071f0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007210:	1d3b      	adds	r3, r7, #4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d106      	bne.n	8007228 <HAL_RCC_OscConfig+0x840>
 800721a:	4b3a      	ldr	r3, [pc, #232]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	4a39      	ldr	r2, [pc, #228]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007220:	f043 0301 	orr.w	r3, r3, #1
 8007224:	6213      	str	r3, [r2, #32]
 8007226:	e02f      	b.n	8007288 <HAL_RCC_OscConfig+0x8a0>
 8007228:	1d3b      	adds	r3, r7, #4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10c      	bne.n	800724c <HAL_RCC_OscConfig+0x864>
 8007232:	4b34      	ldr	r3, [pc, #208]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	4a33      	ldr	r2, [pc, #204]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	6213      	str	r3, [r2, #32]
 800723e:	4b31      	ldr	r3, [pc, #196]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	4a30      	ldr	r2, [pc, #192]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007244:	f023 0304 	bic.w	r3, r3, #4
 8007248:	6213      	str	r3, [r2, #32]
 800724a:	e01d      	b.n	8007288 <HAL_RCC_OscConfig+0x8a0>
 800724c:	1d3b      	adds	r3, r7, #4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b05      	cmp	r3, #5
 8007254:	d10c      	bne.n	8007270 <HAL_RCC_OscConfig+0x888>
 8007256:	4b2b      	ldr	r3, [pc, #172]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	4a2a      	ldr	r2, [pc, #168]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 800725c:	f043 0304 	orr.w	r3, r3, #4
 8007260:	6213      	str	r3, [r2, #32]
 8007262:	4b28      	ldr	r3, [pc, #160]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	4a27      	ldr	r2, [pc, #156]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	6213      	str	r3, [r2, #32]
 800726e:	e00b      	b.n	8007288 <HAL_RCC_OscConfig+0x8a0>
 8007270:	4b24      	ldr	r3, [pc, #144]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	4a23      	ldr	r2, [pc, #140]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007276:	f023 0301 	bic.w	r3, r3, #1
 800727a:	6213      	str	r3, [r2, #32]
 800727c:	4b21      	ldr	r3, [pc, #132]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	4a20      	ldr	r2, [pc, #128]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007282:	f023 0304 	bic.w	r3, r3, #4
 8007286:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007288:	1d3b      	adds	r3, r7, #4
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d06a      	beq.n	8007368 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007292:	f7fd fc93 	bl	8004bbc <HAL_GetTick>
 8007296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729a:	e00b      	b.n	80072b4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800729c:	f7fd fc8e 	bl	8004bbc <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e2a7      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
 80072b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80072b8:	2202      	movs	r2, #2
 80072ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	fa93 f2a3 	rbit	r2, r3
 80072c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80072d0:	2202      	movs	r2, #2
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	fa93 f2a3 	rbit	r2, r3
 80072de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80072e2:	601a      	str	r2, [r3, #0]
  return result;
 80072e4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80072e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ea:	fab3 f383 	clz	r3, r3
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f043 0302 	orr.w	r3, r3, #2
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d108      	bne.n	8007310 <HAL_RCC_OscConfig+0x928>
 80072fe:	4b01      	ldr	r3, [pc, #4]	; (8007304 <HAL_RCC_OscConfig+0x91c>)
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	e013      	b.n	800732c <HAL_RCC_OscConfig+0x944>
 8007304:	40021000 	.word	0x40021000
 8007308:	10908120 	.word	0x10908120
 800730c:	40007000 	.word	0x40007000
 8007310:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007314:	2202      	movs	r2, #2
 8007316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007318:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	fa93 f2a3 	rbit	r2, r3
 8007322:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	4bc0      	ldr	r3, [pc, #768]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007330:	2102      	movs	r1, #2
 8007332:	6011      	str	r1, [r2, #0]
 8007334:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	fa92 f1a2 	rbit	r1, r2
 800733e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007342:	6011      	str	r1, [r2, #0]
  return result;
 8007344:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	fab2 f282 	clz	r2, r2
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	f002 021f 	and.w	r2, r2, #31
 800735a:	2101      	movs	r1, #1
 800735c:	fa01 f202 	lsl.w	r2, r1, r2
 8007360:	4013      	ands	r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d09a      	beq.n	800729c <HAL_RCC_OscConfig+0x8b4>
 8007366:	e063      	b.n	8007430 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007368:	f7fd fc28 	bl	8004bbc <HAL_GetTick>
 800736c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007370:	e00b      	b.n	800738a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007372:	f7fd fc23 	bl	8004bbc <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007382:	4293      	cmp	r3, r2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e23c      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
 800738a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800738e:	2202      	movs	r2, #2
 8007390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007392:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	fa93 f2a3 	rbit	r2, r3
 800739c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80073a6:	2202      	movs	r2, #2
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	fa93 f2a3 	rbit	r2, r3
 80073b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80073b8:	601a      	str	r2, [r3, #0]
  return result;
 80073ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80073be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073c0:	fab3 f383 	clz	r3, r3
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f043 0302 	orr.w	r3, r3, #2
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d102      	bne.n	80073da <HAL_RCC_OscConfig+0x9f2>
 80073d4:	4b95      	ldr	r3, [pc, #596]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	e00d      	b.n	80073f6 <HAL_RCC_OscConfig+0xa0e>
 80073da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80073de:	2202      	movs	r2, #2
 80073e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	fa93 f2a3 	rbit	r2, r3
 80073ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	4b8e      	ldr	r3, [pc, #568]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80073fa:	2102      	movs	r1, #2
 80073fc:	6011      	str	r1, [r2, #0]
 80073fe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8007402:	6812      	ldr	r2, [r2, #0]
 8007404:	fa92 f1a2 	rbit	r1, r2
 8007408:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800740c:	6011      	str	r1, [r2, #0]
  return result;
 800740e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	fab2 f282 	clz	r2, r2
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	f002 021f 	and.w	r2, r2, #31
 8007424:	2101      	movs	r1, #1
 8007426:	fa01 f202 	lsl.w	r2, r1, r2
 800742a:	4013      	ands	r3, r2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1a0      	bne.n	8007372 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007430:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007434:	2b01      	cmp	r3, #1
 8007436:	d105      	bne.n	8007444 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007438:	4b7c      	ldr	r3, [pc, #496]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	4a7b      	ldr	r2, [pc, #492]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 800743e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007442:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007444:	1d3b      	adds	r3, r7, #4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 81d9 	beq.w	8007802 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007450:	4b76      	ldr	r3, [pc, #472]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f003 030c 	and.w	r3, r3, #12
 8007458:	2b08      	cmp	r3, #8
 800745a:	f000 81a6 	beq.w	80077aa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800745e:	1d3b      	adds	r3, r7, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	2b02      	cmp	r3, #2
 8007466:	f040 811e 	bne.w	80076a6 <HAL_RCC_OscConfig+0xcbe>
 800746a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800746e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007474:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	fa93 f2a3 	rbit	r2, r3
 800747e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007482:	601a      	str	r2, [r3, #0]
  return result;
 8007484:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007488:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800748a:	fab3 f383 	clz	r3, r3
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007494:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	461a      	mov	r2, r3
 800749c:	2300      	movs	r3, #0
 800749e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7fd fb8c 	bl	8004bbc <HAL_GetTick>
 80074a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074a8:	e009      	b.n	80074be <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074aa:	f7fd fb87 	bl	8004bbc <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e1a2      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
 80074be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80074c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80074c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	fa93 f2a3 	rbit	r2, r3
 80074d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80074d6:	601a      	str	r2, [r3, #0]
  return result;
 80074d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80074dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074de:	fab3 f383 	clz	r3, r3
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	095b      	lsrs	r3, r3, #5
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f043 0301 	orr.w	r3, r3, #1
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d102      	bne.n	80074f8 <HAL_RCC_OscConfig+0xb10>
 80074f2:	4b4e      	ldr	r3, [pc, #312]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	e01b      	b.n	8007530 <HAL_RCC_OscConfig+0xb48>
 80074f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80074fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007502:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	fa93 f2a3 	rbit	r2, r3
 800750c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	fa93 f2a3 	rbit	r2, r3
 8007526:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	4b3f      	ldr	r3, [pc, #252]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007534:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007538:	6011      	str	r1, [r2, #0]
 800753a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	fa92 f1a2 	rbit	r1, r2
 8007544:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007548:	6011      	str	r1, [r2, #0]
  return result;
 800754a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800754e:	6812      	ldr	r2, [r2, #0]
 8007550:	fab2 f282 	clz	r2, r2
 8007554:	b2d2      	uxtb	r2, r2
 8007556:	f042 0220 	orr.w	r2, r2, #32
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	f002 021f 	and.w	r2, r2, #31
 8007560:	2101      	movs	r1, #1
 8007562:	fa01 f202 	lsl.w	r2, r1, r2
 8007566:	4013      	ands	r3, r2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d19e      	bne.n	80074aa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800756c:	4b2f      	ldr	r3, [pc, #188]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	f023 020f 	bic.w	r2, r3, #15
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	492c      	ldr	r1, [pc, #176]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 800757c:	4313      	orrs	r3, r2
 800757e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007580:	4b2a      	ldr	r3, [pc, #168]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8007588:	1d3b      	adds	r3, r7, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a19      	ldr	r1, [r3, #32]
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	430b      	orrs	r3, r1
 8007596:	4925      	ldr	r1, [pc, #148]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 8007598:	4313      	orrs	r3, r2
 800759a:	604b      	str	r3, [r1, #4]
 800759c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80075a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	fa93 f2a3 	rbit	r2, r3
 80075b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075b4:	601a      	str	r2, [r3, #0]
  return result;
 80075b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075ba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075bc:	fab3 f383 	clz	r3, r3
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80075c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	461a      	mov	r2, r3
 80075ce:	2301      	movs	r3, #1
 80075d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d2:	f7fd faf3 	bl	8004bbc <HAL_GetTick>
 80075d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075da:	e009      	b.n	80075f0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075dc:	f7fd faee 	bl	8004bbc <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d901      	bls.n	80075f0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e109      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
 80075f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80075f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	fa93 f2a3 	rbit	r2, r3
 8007604:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007608:	601a      	str	r2, [r3, #0]
  return result;
 800760a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800760e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007610:	fab3 f383 	clz	r3, r3
 8007614:	b2db      	uxtb	r3, r3
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b01      	cmp	r3, #1
 8007622:	d105      	bne.n	8007630 <HAL_RCC_OscConfig+0xc48>
 8007624:	4b01      	ldr	r3, [pc, #4]	; (800762c <HAL_RCC_OscConfig+0xc44>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	e01e      	b.n	8007668 <HAL_RCC_OscConfig+0xc80>
 800762a:	bf00      	nop
 800762c:	40021000 	.word	0x40021000
 8007630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007634:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800763a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	fa93 f2a3 	rbit	r2, r3
 8007644:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800764e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	fa93 f2a3 	rbit	r2, r3
 800765e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	4b6a      	ldr	r3, [pc, #424]	; (8007810 <HAL_RCC_OscConfig+0xe28>)
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800766c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007670:	6011      	str	r1, [r2, #0]
 8007672:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	fa92 f1a2 	rbit	r1, r2
 800767c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007680:	6011      	str	r1, [r2, #0]
  return result;
 8007682:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	fab2 f282 	clz	r2, r2
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	f042 0220 	orr.w	r2, r2, #32
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	f002 021f 	and.w	r2, r2, #31
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f202 	lsl.w	r2, r1, r2
 800769e:	4013      	ands	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d09b      	beq.n	80075dc <HAL_RCC_OscConfig+0xbf4>
 80076a4:	e0ad      	b.n	8007802 <HAL_RCC_OscConfig+0xe1a>
 80076a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80076aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	fa93 f2a3 	rbit	r2, r3
 80076ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076be:	601a      	str	r2, [r3, #0]
  return result;
 80076c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076c6:	fab3 f383 	clz	r3, r3
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80076d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	461a      	mov	r2, r3
 80076d8:	2300      	movs	r3, #0
 80076da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076dc:	f7fd fa6e 	bl	8004bbc <HAL_GetTick>
 80076e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076e4:	e009      	b.n	80076fa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e6:	f7fd fa69 	bl	8004bbc <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e084      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
 80076fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80076fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	fa93 f2a3 	rbit	r2, r3
 800770e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007712:	601a      	str	r2, [r3, #0]
  return result;
 8007714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007718:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800771a:	fab3 f383 	clz	r3, r3
 800771e:	b2db      	uxtb	r3, r3
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b01      	cmp	r3, #1
 800772c:	d102      	bne.n	8007734 <HAL_RCC_OscConfig+0xd4c>
 800772e:	4b38      	ldr	r3, [pc, #224]	; (8007810 <HAL_RCC_OscConfig+0xe28>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	e01b      	b.n	800776c <HAL_RCC_OscConfig+0xd84>
 8007734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800773c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800773e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	fa93 f2a3 	rbit	r2, r3
 8007748:	f107 0320 	add.w	r3, r7, #32
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	f107 031c 	add.w	r3, r7, #28
 8007752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f107 031c 	add.w	r3, r7, #28
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	fa93 f2a3 	rbit	r2, r3
 8007762:	f107 0318 	add.w	r3, r7, #24
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	4b29      	ldr	r3, [pc, #164]	; (8007810 <HAL_RCC_OscConfig+0xe28>)
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	f107 0214 	add.w	r2, r7, #20
 8007770:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	f107 0214 	add.w	r2, r7, #20
 800777a:	6812      	ldr	r2, [r2, #0]
 800777c:	fa92 f1a2 	rbit	r1, r2
 8007780:	f107 0210 	add.w	r2, r7, #16
 8007784:	6011      	str	r1, [r2, #0]
  return result;
 8007786:	f107 0210 	add.w	r2, r7, #16
 800778a:	6812      	ldr	r2, [r2, #0]
 800778c:	fab2 f282 	clz	r2, r2
 8007790:	b2d2      	uxtb	r2, r2
 8007792:	f042 0220 	orr.w	r2, r2, #32
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	f002 021f 	and.w	r2, r2, #31
 800779c:	2101      	movs	r1, #1
 800779e:	fa01 f202 	lsl.w	r2, r1, r2
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d19e      	bne.n	80076e6 <HAL_RCC_OscConfig+0xcfe>
 80077a8:	e02b      	b.n	8007802 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077aa:	1d3b      	adds	r3, r7, #4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e025      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80077b8:	4b15      	ldr	r3, [pc, #84]	; (8007810 <HAL_RCC_OscConfig+0xe28>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80077c0:	4b13      	ldr	r3, [pc, #76]	; (8007810 <HAL_RCC_OscConfig+0xe28>)
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80077c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80077cc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80077d0:	1d3b      	adds	r3, r7, #4
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d111      	bne.n	80077fe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80077da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80077de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80077e2:	1d3b      	adds	r3, r7, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d108      	bne.n	80077fe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80077ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077f0:	f003 020f 	and.w	r2, r3, #15
 80077f4:	1d3b      	adds	r3, r7, #4
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d001      	beq.n	8007802 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e000      	b.n	8007804 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40021000 	.word	0x40021000

08007814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b09e      	sub	sp, #120	; 0x78
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e162      	b.n	8007af2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800782c:	4b90      	ldr	r3, [pc, #576]	; (8007a70 <HAL_RCC_ClockConfig+0x25c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d910      	bls.n	800785c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800783a:	4b8d      	ldr	r3, [pc, #564]	; (8007a70 <HAL_RCC_ClockConfig+0x25c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f023 0207 	bic.w	r2, r3, #7
 8007842:	498b      	ldr	r1, [pc, #556]	; (8007a70 <HAL_RCC_ClockConfig+0x25c>)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	4313      	orrs	r3, r2
 8007848:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800784a:	4b89      	ldr	r3, [pc, #548]	; (8007a70 <HAL_RCC_ClockConfig+0x25c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	429a      	cmp	r2, r3
 8007856:	d001      	beq.n	800785c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e14a      	b.n	8007af2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d008      	beq.n	800787a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007868:	4b82      	ldr	r3, [pc, #520]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	497f      	ldr	r1, [pc, #508]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 8007876:	4313      	orrs	r3, r2
 8007878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80dc 	beq.w	8007a40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d13c      	bne.n	800790a <HAL_RCC_ClockConfig+0xf6>
 8007890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007894:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007898:	fa93 f3a3 	rbit	r3, r3
 800789c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800789e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078a0:	fab3 f383 	clz	r3, r3
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	f043 0301 	orr.w	r3, r3, #1
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d102      	bne.n	80078ba <HAL_RCC_ClockConfig+0xa6>
 80078b4:	4b6f      	ldr	r3, [pc, #444]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	e00f      	b.n	80078da <HAL_RCC_ClockConfig+0xc6>
 80078ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078c2:	fa93 f3a3 	rbit	r3, r3
 80078c6:	667b      	str	r3, [r7, #100]	; 0x64
 80078c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078cc:	663b      	str	r3, [r7, #96]	; 0x60
 80078ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078d0:	fa93 f3a3 	rbit	r3, r3
 80078d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078d6:	4b67      	ldr	r3, [pc, #412]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80078de:	65ba      	str	r2, [r7, #88]	; 0x58
 80078e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078e2:	fa92 f2a2 	rbit	r2, r2
 80078e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80078e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078ea:	fab2 f282 	clz	r2, r2
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	f042 0220 	orr.w	r2, r2, #32
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	f002 021f 	and.w	r2, r2, #31
 80078fa:	2101      	movs	r1, #1
 80078fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007900:	4013      	ands	r3, r2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d17b      	bne.n	80079fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e0f3      	b.n	8007af2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d13c      	bne.n	800798c <HAL_RCC_ClockConfig+0x178>
 8007912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007916:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800791a:	fa93 f3a3 	rbit	r3, r3
 800791e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007922:	fab3 f383 	clz	r3, r3
 8007926:	b2db      	uxtb	r3, r3
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b01      	cmp	r3, #1
 8007934:	d102      	bne.n	800793c <HAL_RCC_ClockConfig+0x128>
 8007936:	4b4f      	ldr	r3, [pc, #316]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	e00f      	b.n	800795c <HAL_RCC_ClockConfig+0x148>
 800793c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007940:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007944:	fa93 f3a3 	rbit	r3, r3
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
 800794a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800794e:	643b      	str	r3, [r7, #64]	; 0x40
 8007950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007952:	fa93 f3a3 	rbit	r3, r3
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007958:	4b46      	ldr	r3, [pc, #280]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007960:	63ba      	str	r2, [r7, #56]	; 0x38
 8007962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007964:	fa92 f2a2 	rbit	r2, r2
 8007968:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800796a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800796c:	fab2 f282 	clz	r2, r2
 8007970:	b2d2      	uxtb	r2, r2
 8007972:	f042 0220 	orr.w	r2, r2, #32
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	f002 021f 	and.w	r2, r2, #31
 800797c:	2101      	movs	r1, #1
 800797e:	fa01 f202 	lsl.w	r2, r1, r2
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d13a      	bne.n	80079fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e0b2      	b.n	8007af2 <HAL_RCC_ClockConfig+0x2de>
 800798c:	2302      	movs	r3, #2
 800798e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	fa93 f3a3 	rbit	r3, r3
 8007996:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800799a:	fab3 f383 	clz	r3, r3
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d102      	bne.n	80079b4 <HAL_RCC_ClockConfig+0x1a0>
 80079ae:	4b31      	ldr	r3, [pc, #196]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	e00d      	b.n	80079d0 <HAL_RCC_ClockConfig+0x1bc>
 80079b4:	2302      	movs	r3, #2
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	fa93 f3a3 	rbit	r3, r3
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
 80079c0:	2302      	movs	r3, #2
 80079c2:	623b      	str	r3, [r7, #32]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	fa93 f3a3 	rbit	r3, r3
 80079ca:	61fb      	str	r3, [r7, #28]
 80079cc:	4b29      	ldr	r3, [pc, #164]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2202      	movs	r2, #2
 80079d2:	61ba      	str	r2, [r7, #24]
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	fa92 f2a2 	rbit	r2, r2
 80079da:	617a      	str	r2, [r7, #20]
  return result;
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	fab2 f282 	clz	r2, r2
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	f042 0220 	orr.w	r2, r2, #32
 80079e8:	b2d2      	uxtb	r2, r2
 80079ea:	f002 021f 	and.w	r2, r2, #31
 80079ee:	2101      	movs	r1, #1
 80079f0:	fa01 f202 	lsl.w	r2, r1, r2
 80079f4:	4013      	ands	r3, r2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e079      	b.n	8007af2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079fe:	4b1d      	ldr	r3, [pc, #116]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f023 0203 	bic.w	r2, r3, #3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	491a      	ldr	r1, [pc, #104]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a10:	f7fd f8d4 	bl	8004bbc <HAL_GetTick>
 8007a14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a16:	e00a      	b.n	8007a2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a18:	f7fd f8d0 	bl	8004bbc <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e061      	b.n	8007af2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a2e:	4b11      	ldr	r3, [pc, #68]	; (8007a74 <HAL_RCC_ClockConfig+0x260>)
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f003 020c 	and.w	r2, r3, #12
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d1eb      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a40:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <HAL_RCC_ClockConfig+0x25c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d214      	bcs.n	8007a78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a4e:	4b08      	ldr	r3, [pc, #32]	; (8007a70 <HAL_RCC_ClockConfig+0x25c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f023 0207 	bic.w	r2, r3, #7
 8007a56:	4906      	ldr	r1, [pc, #24]	; (8007a70 <HAL_RCC_ClockConfig+0x25c>)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a5e:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <HAL_RCC_ClockConfig+0x25c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d005      	beq.n	8007a78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e040      	b.n	8007af2 <HAL_RCC_ClockConfig+0x2de>
 8007a70:	40022000 	.word	0x40022000
 8007a74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a84:	4b1d      	ldr	r3, [pc, #116]	; (8007afc <HAL_RCC_ClockConfig+0x2e8>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	491a      	ldr	r1, [pc, #104]	; (8007afc <HAL_RCC_ClockConfig+0x2e8>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0308 	and.w	r3, r3, #8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d009      	beq.n	8007ab6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aa2:	4b16      	ldr	r3, [pc, #88]	; (8007afc <HAL_RCC_ClockConfig+0x2e8>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4912      	ldr	r1, [pc, #72]	; (8007afc <HAL_RCC_ClockConfig+0x2e8>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007ab6:	f000 f829 	bl	8007b0c <HAL_RCC_GetSysClockFreq>
 8007aba:	4601      	mov	r1, r0
 8007abc:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <HAL_RCC_ClockConfig+0x2e8>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ac4:	22f0      	movs	r2, #240	; 0xf0
 8007ac6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	fa92 f2a2 	rbit	r2, r2
 8007ace:	60fa      	str	r2, [r7, #12]
  return result;
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	fab2 f282 	clz	r2, r2
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	40d3      	lsrs	r3, r2
 8007ada:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <HAL_RCC_ClockConfig+0x2ec>)
 8007adc:	5cd3      	ldrb	r3, [r2, r3]
 8007ade:	fa21 f303 	lsr.w	r3, r1, r3
 8007ae2:	4a08      	ldr	r2, [pc, #32]	; (8007b04 <HAL_RCC_ClockConfig+0x2f0>)
 8007ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007ae6:	4b08      	ldr	r3, [pc, #32]	; (8007b08 <HAL_RCC_ClockConfig+0x2f4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fd f822 	bl	8004b34 <HAL_InitTick>
  
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3778      	adds	r7, #120	; 0x78
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40021000 	.word	0x40021000
 8007b00:	0800b330 	.word	0x0800b330
 8007b04:	2000002c 	.word	0x2000002c
 8007b08:	20000030 	.word	0x20000030

08007b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b08b      	sub	sp, #44	; 0x2c
 8007b10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	2300      	movs	r3, #0
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007b26:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f003 030c 	and.w	r3, r3, #12
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d002      	beq.n	8007b3c <HAL_RCC_GetSysClockFreq+0x30>
 8007b36:	2b08      	cmp	r3, #8
 8007b38:	d003      	beq.n	8007b42 <HAL_RCC_GetSysClockFreq+0x36>
 8007b3a:	e03f      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b3e:	623b      	str	r3, [r7, #32]
      break;
 8007b40:	e03f      	b.n	8007bc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007b48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007b4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	fa92 f2a2 	rbit	r2, r2
 8007b54:	607a      	str	r2, [r7, #4]
  return result;
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	fab2 f282 	clz	r2, r2
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	40d3      	lsrs	r3, r2
 8007b60:	4a1d      	ldr	r2, [pc, #116]	; (8007bd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b62:	5cd3      	ldrb	r3, [r2, r3]
 8007b64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	220f      	movs	r2, #15
 8007b70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	fa92 f2a2 	rbit	r2, r2
 8007b78:	60fa      	str	r2, [r7, #12]
  return result;
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	fab2 f282 	clz	r2, r2
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	40d3      	lsrs	r3, r2
 8007b84:	4a15      	ldr	r2, [pc, #84]	; (8007bdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b86:	5cd3      	ldrb	r3, [r2, r3]
 8007b88:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007b94:	4a0f      	ldr	r2, [pc, #60]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba4:	e007      	b.n	8007bb6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007ba6:	4a0b      	ldr	r2, [pc, #44]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	fb02 f303 	mul.w	r3, r2, r3
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	623b      	str	r3, [r7, #32]
      break;
 8007bba:	e002      	b.n	8007bc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007bbe:	623b      	str	r3, [r7, #32]
      break;
 8007bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	372c      	adds	r7, #44	; 0x2c
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	40021000 	.word	0x40021000
 8007bd4:	007a1200 	.word	0x007a1200
 8007bd8:	0800b348 	.word	0x0800b348
 8007bdc:	0800b358 	.word	0x0800b358

08007be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007be4:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007be6:	681b      	ldr	r3, [r3, #0]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	2000002c 	.word	0x2000002c

08007bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007bfe:	f7ff ffef 	bl	8007be0 <HAL_RCC_GetHCLKFreq>
 8007c02:	4601      	mov	r1, r0
 8007c04:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007c10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	fa92 f2a2 	rbit	r2, r2
 8007c18:	603a      	str	r2, [r7, #0]
  return result;
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	fab2 f282 	clz	r2, r2
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	40d3      	lsrs	r3, r2
 8007c24:	4a04      	ldr	r2, [pc, #16]	; (8007c38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007c26:	5cd3      	ldrb	r3, [r2, r3]
 8007c28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40021000 	.word	0x40021000
 8007c38:	0800b340 	.word	0x0800b340

08007c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007c42:	f7ff ffcd 	bl	8007be0 <HAL_RCC_GetHCLKFreq>
 8007c46:	4601      	mov	r1, r0
 8007c48:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007c50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007c54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	fa92 f2a2 	rbit	r2, r2
 8007c5c:	603a      	str	r2, [r7, #0]
  return result;
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	fab2 f282 	clz	r2, r2
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	40d3      	lsrs	r3, r2
 8007c68:	4a04      	ldr	r2, [pc, #16]	; (8007c7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8007c6a:	5cd3      	ldrb	r3, [r2, r3]
 8007c6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40021000 	.word	0x40021000
 8007c7c:	0800b340 	.word	0x0800b340

08007c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b092      	sub	sp, #72	; 0x48
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007c90:	2300      	movs	r3, #0
 8007c92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80d4 	beq.w	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ca4:	4b4e      	ldr	r3, [pc, #312]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10e      	bne.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cb0:	4b4b      	ldr	r3, [pc, #300]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	4a4a      	ldr	r2, [pc, #296]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cba:	61d3      	str	r3, [r2, #28]
 8007cbc:	4b48      	ldr	r3, [pc, #288]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	60bb      	str	r3, [r7, #8]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cce:	4b45      	ldr	r3, [pc, #276]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d118      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cda:	4b42      	ldr	r3, [pc, #264]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a41      	ldr	r2, [pc, #260]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ce6:	f7fc ff69 	bl	8004bbc <HAL_GetTick>
 8007cea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cec:	e008      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cee:	f7fc ff65 	bl	8004bbc <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b64      	cmp	r3, #100	; 0x64
 8007cfa:	d901      	bls.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e1d6      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d00:	4b38      	ldr	r3, [pc, #224]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0f0      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d0c:	4b34      	ldr	r3, [pc, #208]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 8084 	beq.w	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d07c      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d2c:	4b2c      	ldr	r3, [pc, #176]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d2e:	6a1b      	ldr	r3, [r3, #32]
 8007d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	fa93 f3a3 	rbit	r3, r3
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d46:	fab3 f383 	clz	r3, r3
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4b26      	ldr	r3, [pc, #152]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	461a      	mov	r2, r3
 8007d56:	2301      	movs	r3, #1
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	fa93 f3a3 	rbit	r3, r3
 8007d66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d6a:	fab3 f383 	clz	r3, r3
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	461a      	mov	r2, r3
 8007d72:	4b1d      	ldr	r3, [pc, #116]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d7e:	4a18      	ldr	r2, [pc, #96]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d04b      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d8e:	f7fc ff15 	bl	8004bbc <HAL_GetTick>
 8007d92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d94:	e00a      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d96:	f7fc ff11 	bl	8004bbc <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d901      	bls.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e180      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007dac:	2302      	movs	r3, #2
 8007dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	fa93 f3a3 	rbit	r3, r3
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
 8007db8:	2302      	movs	r3, #2
 8007dba:	623b      	str	r3, [r7, #32]
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	fa93 f3a3 	rbit	r3, r3
 8007dc2:	61fb      	str	r3, [r7, #28]
  return result;
 8007dc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc6:	fab3 f383 	clz	r3, r3
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f043 0302 	orr.w	r3, r3, #2
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d108      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007dda:	4b01      	ldr	r3, [pc, #4]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	e00d      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007de0:	40021000 	.word	0x40021000
 8007de4:	40007000 	.word	0x40007000
 8007de8:	10908100 	.word	0x10908100
 8007dec:	2302      	movs	r3, #2
 8007dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	fa93 f3a3 	rbit	r3, r3
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	4ba0      	ldr	r3, [pc, #640]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	613a      	str	r2, [r7, #16]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	fa92 f2a2 	rbit	r2, r2
 8007e06:	60fa      	str	r2, [r7, #12]
  return result;
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	fab2 f282 	clz	r2, r2
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	f002 021f 	and.w	r2, r2, #31
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8007e20:	4013      	ands	r3, r2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0b7      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007e26:	4b95      	ldr	r3, [pc, #596]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	4992      	ldr	r1, [pc, #584]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007e38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d105      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e40:	4b8e      	ldr	r3, [pc, #568]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	4a8d      	ldr	r2, [pc, #564]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d008      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e58:	4b88      	ldr	r3, [pc, #544]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	f023 0203 	bic.w	r2, r3, #3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	4985      	ldr	r1, [pc, #532]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d008      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e76:	4b81      	ldr	r3, [pc, #516]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	497e      	ldr	r1, [pc, #504]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d008      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e94:	4b79      	ldr	r3, [pc, #484]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	4976      	ldr	r1, [pc, #472]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007eb2:	4b72      	ldr	r3, [pc, #456]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	f023 0210 	bic.w	r2, r3, #16
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	496f      	ldr	r1, [pc, #444]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d008      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007ed0:	4b6a      	ldr	r3, [pc, #424]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007edc:	4967      	ldr	r1, [pc, #412]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d008      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007eee:	4b63      	ldr	r3, [pc, #396]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	f023 0220 	bic.w	r2, r3, #32
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	4960      	ldr	r1, [pc, #384]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d008      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f0c:	4b5b      	ldr	r3, [pc, #364]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	4958      	ldr	r1, [pc, #352]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d008      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f2a:	4b54      	ldr	r3, [pc, #336]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	4951      	ldr	r1, [pc, #324]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d008      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f48:	4b4c      	ldr	r3, [pc, #304]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	4949      	ldr	r1, [pc, #292]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d008      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f66:	4b45      	ldr	r3, [pc, #276]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f72:	4942      	ldr	r1, [pc, #264]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d008      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f84:	4b3d      	ldr	r3, [pc, #244]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	493a      	ldr	r1, [pc, #232]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d008      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007fa2:	4b36      	ldr	r3, [pc, #216]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	4933      	ldr	r1, [pc, #204]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d008      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007fc0:	4b2e      	ldr	r3, [pc, #184]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fcc:	492b      	ldr	r1, [pc, #172]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007fde:	4b27      	ldr	r3, [pc, #156]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	4924      	ldr	r1, [pc, #144]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d008      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007ffc:	4b1f      	ldr	r3, [pc, #124]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008000:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008008:	491c      	ldr	r1, [pc, #112]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800800a:	4313      	orrs	r3, r2
 800800c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d008      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800801a:	4b18      	ldr	r3, [pc, #96]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008026:	4915      	ldr	r1, [pc, #84]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008028:	4313      	orrs	r3, r2
 800802a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d008      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008044:	490d      	ldr	r1, [pc, #52]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008046:	4313      	orrs	r3, r2
 8008048:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d008      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008062:	4906      	ldr	r1, [pc, #24]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008064:	4313      	orrs	r3, r2
 8008066:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00c      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008074:	4b01      	ldr	r3, [pc, #4]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008078:	e002      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800807a:	bf00      	nop
 800807c:	40021000 	.word	0x40021000
 8008080:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008088:	490b      	ldr	r1, [pc, #44]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800808a:	4313      	orrs	r3, r2
 800808c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d008      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800809a:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800809c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a6:	4904      	ldr	r1, [pc, #16]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3748      	adds	r7, #72	; 0x48
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40021000 	.word	0x40021000

080080bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e09d      	b.n	800820a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d108      	bne.n	80080e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080de:	d009      	beq.n	80080f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	61da      	str	r2, [r3, #28]
 80080e6:	e005      	b.n	80080f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fc fac6 	bl	80046a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800812a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008134:	d902      	bls.n	800813c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	e002      	b.n	8008142 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800813c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008140:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800814a:	d007      	beq.n	800815c <HAL_SPI_Init+0xa0>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008154:	d002      	beq.n	800815c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800816c:	431a      	orrs	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	ea42 0103 	orr.w	r1, r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	0c1b      	lsrs	r3, r3, #16
 80081b8:	f003 0204 	and.w	r2, r3, #4
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	f003 0310 	and.w	r3, r3, #16
 80081c4:	431a      	orrs	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ca:	f003 0308 	and.w	r3, r3, #8
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80081d8:	ea42 0103 	orr.w	r1, r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69da      	ldr	r2, [r3, #28]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b088      	sub	sp, #32
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	603b      	str	r3, [r7, #0]
 800821e:	4613      	mov	r3, r2
 8008220:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800822c:	2b01      	cmp	r3, #1
 800822e:	d101      	bne.n	8008234 <HAL_SPI_Transmit+0x22>
 8008230:	2302      	movs	r3, #2
 8008232:	e158      	b.n	80084e6 <HAL_SPI_Transmit+0x2d4>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800823c:	f7fc fcbe 	bl	8004bbc <HAL_GetTick>
 8008240:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	d002      	beq.n	8008258 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008252:	2302      	movs	r3, #2
 8008254:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008256:	e13d      	b.n	80084d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_SPI_Transmit+0x52>
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008268:	e134      	b.n	80084d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2203      	movs	r2, #3
 800826e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	88fa      	ldrh	r2, [r7, #6]
 8008282:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	88fa      	ldrh	r2, [r7, #6]
 8008288:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b4:	d10f      	bne.n	80082d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e0:	2b40      	cmp	r3, #64	; 0x40
 80082e2:	d007      	beq.n	80082f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082fc:	d94b      	bls.n	8008396 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <HAL_SPI_Transmit+0xfa>
 8008306:	8afb      	ldrh	r3, [r7, #22]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d13e      	bne.n	800838a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	881a      	ldrh	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	1c9a      	adds	r2, r3, #2
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008326:	b29b      	uxth	r3, r3
 8008328:	3b01      	subs	r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008330:	e02b      	b.n	800838a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b02      	cmp	r3, #2
 800833e:	d112      	bne.n	8008366 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008344:	881a      	ldrh	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	1c9a      	adds	r2, r3, #2
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800835a:	b29b      	uxth	r3, r3
 800835c:	3b01      	subs	r3, #1
 800835e:	b29a      	uxth	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008364:	e011      	b.n	800838a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008366:	f7fc fc29 	bl	8004bbc <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d803      	bhi.n	800837e <HAL_SPI_Transmit+0x16c>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d102      	bne.n	8008384 <HAL_SPI_Transmit+0x172>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d102      	bne.n	800838a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008388:	e0a4      	b.n	80084d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800838e:	b29b      	uxth	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1ce      	bne.n	8008332 <HAL_SPI_Transmit+0x120>
 8008394:	e07c      	b.n	8008490 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <HAL_SPI_Transmit+0x192>
 800839e:	8afb      	ldrh	r3, [r7, #22]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d170      	bne.n	8008486 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d912      	bls.n	80083d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	881a      	ldrh	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	1c9a      	adds	r2, r3, #2
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b02      	subs	r3, #2
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083d2:	e058      	b.n	8008486 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	330c      	adds	r3, #12
 80083de:	7812      	ldrb	r2, [r2, #0]
 80083e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	3b01      	subs	r3, #1
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80083fa:	e044      	b.n	8008486 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b02      	cmp	r3, #2
 8008408:	d12b      	bne.n	8008462 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800840e:	b29b      	uxth	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	d912      	bls.n	800843a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	881a      	ldrh	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	1c9a      	adds	r2, r3, #2
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800842e:	b29b      	uxth	r3, r3
 8008430:	3b02      	subs	r3, #2
 8008432:	b29a      	uxth	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008438:	e025      	b.n	8008486 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	330c      	adds	r3, #12
 8008444:	7812      	ldrb	r2, [r2, #0]
 8008446:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008456:	b29b      	uxth	r3, r3
 8008458:	3b01      	subs	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008460:	e011      	b.n	8008486 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008462:	f7fc fbab 	bl	8004bbc <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d803      	bhi.n	800847a <HAL_SPI_Transmit+0x268>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d102      	bne.n	8008480 <HAL_SPI_Transmit+0x26e>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008484:	e026      	b.n	80084d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1b5      	bne.n	80083fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f941 	bl	800871c <SPI_EndRxTxTransaction>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10a      	bne.n	80084c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084ae:	2300      	movs	r3, #0
 80084b0:	613b      	str	r3, [r7, #16]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	613b      	str	r3, [r7, #16]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	77fb      	strb	r3, [r7, #31]
 80084d0:	e000      	b.n	80084d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80084d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3720      	adds	r7, #32
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008500:	f7fc fb5c 	bl	8004bbc <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	1a9b      	subs	r3, r3, r2
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	4413      	add	r3, r2
 800850e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008510:	f7fc fb54 	bl	8004bbc <HAL_GetTick>
 8008514:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008516:	4b39      	ldr	r3, [pc, #228]	; (80085fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	015b      	lsls	r3, r3, #5
 800851c:	0d1b      	lsrs	r3, r3, #20
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	fb02 f303 	mul.w	r3, r2, r3
 8008524:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008526:	e054      	b.n	80085d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852e:	d050      	beq.n	80085d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008530:	f7fc fb44 	bl	8004bbc <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	69fa      	ldr	r2, [r7, #28]
 800853c:	429a      	cmp	r2, r3
 800853e:	d902      	bls.n	8008546 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d13d      	bne.n	80085c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800855e:	d111      	bne.n	8008584 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008568:	d004      	beq.n	8008574 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008572:	d107      	bne.n	8008584 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800858c:	d10f      	bne.n	80085ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e017      	b.n	80085f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4013      	ands	r3, r2
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	429a      	cmp	r2, r3
 80085e0:	bf0c      	ite	eq
 80085e2:	2301      	moveq	r3, #1
 80085e4:	2300      	movne	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d19b      	bne.n	8008528 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	2000002c 	.word	0x2000002c

08008600 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800860e:	f7fc fad5 	bl	8004bbc <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	1a9b      	subs	r3, r3, r2
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	4413      	add	r3, r2
 800861c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800861e:	f7fc facd 	bl	8004bbc <HAL_GetTick>
 8008622:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008624:	4b3c      	ldr	r3, [pc, #240]	; (8008718 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	00da      	lsls	r2, r3, #3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	0d1b      	lsrs	r3, r3, #20
 8008634:	69fa      	ldr	r2, [r7, #28]
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800863c:	e05f      	b.n	80086fe <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008644:	d106      	bne.n	8008654 <SPI_WaitFifoStateUntilTimeout+0x54>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d103      	bne.n	8008654 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	d050      	beq.n	80086fe <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800865c:	f7fc faae 	bl	8004bbc <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	429a      	cmp	r2, r3
 800866a:	d902      	bls.n	8008672 <SPI_WaitFifoStateUntilTimeout+0x72>
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d13d      	bne.n	80086ee <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800868a:	d111      	bne.n	80086b0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008694:	d004      	beq.n	80086a0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869e:	d107      	bne.n	80086b0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b8:	d10f      	bne.n	80086da <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e010      	b.n	8008710 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4013      	ands	r3, r2
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	429a      	cmp	r2, r3
 800870c:	d197      	bne.n	800863e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3720      	adds	r7, #32
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	2000002c 	.word	0x2000002c

0800871c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2200      	movs	r2, #0
 8008730:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7ff ff63 	bl	8008600 <SPI_WaitFifoStateUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008744:	f043 0220 	orr.w	r2, r3, #32
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e027      	b.n	80087a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2200      	movs	r2, #0
 8008758:	2180      	movs	r1, #128	; 0x80
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff fec8 	bl	80084f0 <SPI_WaitFlagStateUntilTimeout>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876a:	f043 0220 	orr.w	r2, r3, #32
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e014      	b.n	80087a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2200      	movs	r2, #0
 800877e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7ff ff3c 	bl	8008600 <SPI_WaitFifoStateUntilTimeout>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d007      	beq.n	800879e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008792:	f043 0220 	orr.w	r2, r3, #32
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e000      	b.n	80087a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e049      	b.n	800884e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fc f850 	bl	8004874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f000 fbf2 	bl	8008fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b01      	cmp	r3, #1
 800886a:	d001      	beq.n	8008870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e04f      	b.n	8008910 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0201 	orr.w	r2, r2, #1
 8008886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a23      	ldr	r2, [pc, #140]	; (800891c <HAL_TIM_Base_Start_IT+0xc4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01d      	beq.n	80088ce <HAL_TIM_Base_Start_IT+0x76>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889a:	d018      	beq.n	80088ce <HAL_TIM_Base_Start_IT+0x76>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a1f      	ldr	r2, [pc, #124]	; (8008920 <HAL_TIM_Base_Start_IT+0xc8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d013      	beq.n	80088ce <HAL_TIM_Base_Start_IT+0x76>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a1e      	ldr	r2, [pc, #120]	; (8008924 <HAL_TIM_Base_Start_IT+0xcc>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00e      	beq.n	80088ce <HAL_TIM_Base_Start_IT+0x76>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a1c      	ldr	r2, [pc, #112]	; (8008928 <HAL_TIM_Base_Start_IT+0xd0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d009      	beq.n	80088ce <HAL_TIM_Base_Start_IT+0x76>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a1b      	ldr	r2, [pc, #108]	; (800892c <HAL_TIM_Base_Start_IT+0xd4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d004      	beq.n	80088ce <HAL_TIM_Base_Start_IT+0x76>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a19      	ldr	r2, [pc, #100]	; (8008930 <HAL_TIM_Base_Start_IT+0xd8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d115      	bne.n	80088fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	4b17      	ldr	r3, [pc, #92]	; (8008934 <HAL_TIM_Base_Start_IT+0xdc>)
 80088d6:	4013      	ands	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b06      	cmp	r3, #6
 80088de:	d015      	beq.n	800890c <HAL_TIM_Base_Start_IT+0xb4>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e6:	d011      	beq.n	800890c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0201 	orr.w	r2, r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088f8:	e008      	b.n	800890c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f042 0201 	orr.w	r2, r2, #1
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	e000      	b.n	800890e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800890c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	40012c00 	.word	0x40012c00
 8008920:	40000400 	.word	0x40000400
 8008924:	40000800 	.word	0x40000800
 8008928:	40013400 	.word	0x40013400
 800892c:	40014000 	.word	0x40014000
 8008930:	40015000 	.word	0x40015000
 8008934:	00010007 	.word	0x00010007

08008938 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e097      	b.n	8008a7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d106      	bne.n	8008966 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7fb fee1 	bl	8004728 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2202      	movs	r2, #2
 800896a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6812      	ldr	r2, [r2, #0]
 8008978:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3304      	adds	r3, #4
 800898a:	4619      	mov	r1, r3
 800898c:	4610      	mov	r0, r2
 800898e:	f000 fb1f 	bl	8008fd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ba:	f023 0303 	bic.w	r3, r3, #3
 80089be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	021b      	lsls	r3, r3, #8
 80089ca:	4313      	orrs	r3, r2
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80089d8:	f023 030c 	bic.w	r3, r3, #12
 80089dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	021b      	lsls	r3, r3, #8
 80089f4:	4313      	orrs	r3, r2
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	011a      	lsls	r2, r3, #4
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	031b      	lsls	r3, r3, #12
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008a16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008a1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aa4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d110      	bne.n	8008ad6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d102      	bne.n	8008ac0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008aba:	7b7b      	ldrb	r3, [r7, #13]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d001      	beq.n	8008ac4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e069      	b.n	8008b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ad4:	e031      	b.n	8008b3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d110      	bne.n	8008afe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d102      	bne.n	8008ae8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ae2:	7b3b      	ldrb	r3, [r7, #12]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d001      	beq.n	8008aec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e055      	b.n	8008b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008afc:	e01d      	b.n	8008b3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d108      	bne.n	8008b16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d105      	bne.n	8008b16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b0a:	7b7b      	ldrb	r3, [r7, #13]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d102      	bne.n	8008b16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b10:	7b3b      	ldrb	r3, [r7, #12]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d001      	beq.n	8008b1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e03e      	b.n	8008b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2202      	movs	r2, #2
 8008b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2202      	movs	r2, #2
 8008b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <HAL_TIM_Encoder_Start+0xc4>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d008      	beq.n	8008b58 <HAL_TIM_Encoder_Start+0xd4>
 8008b46:	e00f      	b.n	8008b68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	2100      	movs	r1, #0
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fb75 	bl	8009240 <TIM_CCxChannelCmd>
      break;
 8008b56:	e016      	b.n	8008b86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	2104      	movs	r1, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fb6d 	bl	8009240 <TIM_CCxChannelCmd>
      break;
 8008b66:	e00e      	b.n	8008b86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fb65 	bl	8009240 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	2104      	movs	r1, #4
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fb5e 	bl	8009240 <TIM_CCxChannelCmd>
      break;
 8008b84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f042 0201 	orr.w	r2, r2, #1
 8008b94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d122      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f003 0302 	and.w	r3, r3, #2
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d11b      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f06f 0202 	mvn.w	r2, #2
 8008bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f9d5 	bl	8008f92 <HAL_TIM_IC_CaptureCallback>
 8008be8:	e005      	b.n	8008bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f9c7 	bl	8008f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f9d8 	bl	8008fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f003 0304 	and.w	r3, r3, #4
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d122      	bne.n	8008c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d11b      	bne.n	8008c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f06f 0204 	mvn.w	r2, #4
 8008c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2202      	movs	r2, #2
 8008c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f9ab 	bl	8008f92 <HAL_TIM_IC_CaptureCallback>
 8008c3c:	e005      	b.n	8008c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f99d 	bl	8008f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f9ae 	bl	8008fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d122      	bne.n	8008ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0308 	and.w	r3, r3, #8
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d11b      	bne.n	8008ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f06f 0208 	mvn.w	r2, #8
 8008c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2204      	movs	r2, #4
 8008c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f981 	bl	8008f92 <HAL_TIM_IC_CaptureCallback>
 8008c90:	e005      	b.n	8008c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f973 	bl	8008f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f984 	bl	8008fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	f003 0310 	and.w	r3, r3, #16
 8008cae:	2b10      	cmp	r3, #16
 8008cb0:	d122      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f003 0310 	and.w	r3, r3, #16
 8008cbc:	2b10      	cmp	r3, #16
 8008cbe:	d11b      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f06f 0210 	mvn.w	r2, #16
 8008cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2208      	movs	r2, #8
 8008cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f957 	bl	8008f92 <HAL_TIM_IC_CaptureCallback>
 8008ce4:	e005      	b.n	8008cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f949 	bl	8008f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f95a 	bl	8008fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d10e      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d107      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f06f 0201 	mvn.w	r2, #1
 8008d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f923 	bl	8008f6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2e:	2b80      	cmp	r3, #128	; 0x80
 8008d30:	d10e      	bne.n	8008d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3c:	2b80      	cmp	r3, #128	; 0x80
 8008d3e:	d107      	bne.n	8008d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fb34 	bl	80093b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d5e:	d10e      	bne.n	8008d7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6a:	2b80      	cmp	r3, #128	; 0x80
 8008d6c:	d107      	bne.n	8008d7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fb27 	bl	80093cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d88:	2b40      	cmp	r3, #64	; 0x40
 8008d8a:	d10e      	bne.n	8008daa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d96:	2b40      	cmp	r3, #64	; 0x40
 8008d98:	d107      	bne.n	8008daa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f908 	bl	8008fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	d10e      	bne.n	8008dd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b20      	cmp	r3, #32
 8008dc4:	d107      	bne.n	8008dd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f06f 0220 	mvn.w	r2, #32
 8008dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fae7 	bl	80093a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d101      	bne.n	8008df6 <HAL_TIM_ConfigClockSource+0x18>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e0b5      	b.n	8008f62 <HAL_TIM_ConfigClockSource+0x184>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e18:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e20:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e32:	d03e      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0xd4>
 8008e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e38:	f200 8087 	bhi.w	8008f4a <HAL_TIM_ConfigClockSource+0x16c>
 8008e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e40:	f000 8085 	beq.w	8008f4e <HAL_TIM_ConfigClockSource+0x170>
 8008e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e48:	d87f      	bhi.n	8008f4a <HAL_TIM_ConfigClockSource+0x16c>
 8008e4a:	2b70      	cmp	r3, #112	; 0x70
 8008e4c:	d01a      	beq.n	8008e84 <HAL_TIM_ConfigClockSource+0xa6>
 8008e4e:	2b70      	cmp	r3, #112	; 0x70
 8008e50:	d87b      	bhi.n	8008f4a <HAL_TIM_ConfigClockSource+0x16c>
 8008e52:	2b60      	cmp	r3, #96	; 0x60
 8008e54:	d050      	beq.n	8008ef8 <HAL_TIM_ConfigClockSource+0x11a>
 8008e56:	2b60      	cmp	r3, #96	; 0x60
 8008e58:	d877      	bhi.n	8008f4a <HAL_TIM_ConfigClockSource+0x16c>
 8008e5a:	2b50      	cmp	r3, #80	; 0x50
 8008e5c:	d03c      	beq.n	8008ed8 <HAL_TIM_ConfigClockSource+0xfa>
 8008e5e:	2b50      	cmp	r3, #80	; 0x50
 8008e60:	d873      	bhi.n	8008f4a <HAL_TIM_ConfigClockSource+0x16c>
 8008e62:	2b40      	cmp	r3, #64	; 0x40
 8008e64:	d058      	beq.n	8008f18 <HAL_TIM_ConfigClockSource+0x13a>
 8008e66:	2b40      	cmp	r3, #64	; 0x40
 8008e68:	d86f      	bhi.n	8008f4a <HAL_TIM_ConfigClockSource+0x16c>
 8008e6a:	2b30      	cmp	r3, #48	; 0x30
 8008e6c:	d064      	beq.n	8008f38 <HAL_TIM_ConfigClockSource+0x15a>
 8008e6e:	2b30      	cmp	r3, #48	; 0x30
 8008e70:	d86b      	bhi.n	8008f4a <HAL_TIM_ConfigClockSource+0x16c>
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	d060      	beq.n	8008f38 <HAL_TIM_ConfigClockSource+0x15a>
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	d867      	bhi.n	8008f4a <HAL_TIM_ConfigClockSource+0x16c>
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d05c      	beq.n	8008f38 <HAL_TIM_ConfigClockSource+0x15a>
 8008e7e:	2b10      	cmp	r3, #16
 8008e80:	d05a      	beq.n	8008f38 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008e82:	e062      	b.n	8008f4a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	6899      	ldr	r1, [r3, #8]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f000 f9b4 	bl	8009200 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ea6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	609a      	str	r2, [r3, #8]
      break;
 8008eb0:	e04e      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	6899      	ldr	r1, [r3, #8]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f000 f99d 	bl	8009200 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ed4:	609a      	str	r2, [r3, #8]
      break;
 8008ed6:	e03b      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6818      	ldr	r0, [r3, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	6859      	ldr	r1, [r3, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f000 f911 	bl	800910c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2150      	movs	r1, #80	; 0x50
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f96a 	bl	80091ca <TIM_ITRx_SetConfig>
      break;
 8008ef6:	e02b      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	6859      	ldr	r1, [r3, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	461a      	mov	r2, r3
 8008f06:	f000 f930 	bl	800916a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2160      	movs	r1, #96	; 0x60
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 f95a 	bl	80091ca <TIM_ITRx_SetConfig>
      break;
 8008f16:	e01b      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	6859      	ldr	r1, [r3, #4]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	461a      	mov	r2, r3
 8008f26:	f000 f8f1 	bl	800910c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2140      	movs	r1, #64	; 0x40
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 f94a 	bl	80091ca <TIM_ITRx_SetConfig>
      break;
 8008f36:	e00b      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f000 f941 	bl	80091ca <TIM_ITRx_SetConfig>
        break;
 8008f48:	e002      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8008f4a:	bf00      	nop
 8008f4c:	e000      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8008f4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f9a:	bf00      	nop
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fc2:	bf00      	nop
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
	...

08008fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a42      	ldr	r2, [pc, #264]	; (80090ec <TIM_Base_SetConfig+0x11c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d013      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fee:	d00f      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a3f      	ldr	r2, [pc, #252]	; (80090f0 <TIM_Base_SetConfig+0x120>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00b      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a3e      	ldr	r2, [pc, #248]	; (80090f4 <TIM_Base_SetConfig+0x124>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d007      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a3d      	ldr	r2, [pc, #244]	; (80090f8 <TIM_Base_SetConfig+0x128>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d003      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a3c      	ldr	r2, [pc, #240]	; (80090fc <TIM_Base_SetConfig+0x12c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d108      	bne.n	8009022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a31      	ldr	r2, [pc, #196]	; (80090ec <TIM_Base_SetConfig+0x11c>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d01f      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009030:	d01b      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a2e      	ldr	r2, [pc, #184]	; (80090f0 <TIM_Base_SetConfig+0x120>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d017      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a2d      	ldr	r2, [pc, #180]	; (80090f4 <TIM_Base_SetConfig+0x124>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d013      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a2c      	ldr	r2, [pc, #176]	; (80090f8 <TIM_Base_SetConfig+0x128>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00f      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a2c      	ldr	r2, [pc, #176]	; (8009100 <TIM_Base_SetConfig+0x130>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00b      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a2b      	ldr	r2, [pc, #172]	; (8009104 <TIM_Base_SetConfig+0x134>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d007      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a2a      	ldr	r2, [pc, #168]	; (8009108 <TIM_Base_SetConfig+0x138>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d003      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a25      	ldr	r2, [pc, #148]	; (80090fc <TIM_Base_SetConfig+0x12c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d108      	bne.n	800907c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a12      	ldr	r2, [pc, #72]	; (80090ec <TIM_Base_SetConfig+0x11c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d013      	beq.n	80090d0 <TIM_Base_SetConfig+0x100>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a13      	ldr	r2, [pc, #76]	; (80090f8 <TIM_Base_SetConfig+0x128>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00f      	beq.n	80090d0 <TIM_Base_SetConfig+0x100>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a13      	ldr	r2, [pc, #76]	; (8009100 <TIM_Base_SetConfig+0x130>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00b      	beq.n	80090d0 <TIM_Base_SetConfig+0x100>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a12      	ldr	r2, [pc, #72]	; (8009104 <TIM_Base_SetConfig+0x134>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <TIM_Base_SetConfig+0x100>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a11      	ldr	r2, [pc, #68]	; (8009108 <TIM_Base_SetConfig+0x138>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_Base_SetConfig+0x100>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a0c      	ldr	r2, [pc, #48]	; (80090fc <TIM_Base_SetConfig+0x12c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d103      	bne.n	80090d8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	691a      	ldr	r2, [r3, #16]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	615a      	str	r2, [r3, #20]
}
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	40012c00 	.word	0x40012c00
 80090f0:	40000400 	.word	0x40000400
 80090f4:	40000800 	.word	0x40000800
 80090f8:	40013400 	.word	0x40013400
 80090fc:	40015000 	.word	0x40015000
 8009100:	40014000 	.word	0x40014000
 8009104:	40014400 	.word	0x40014400
 8009108:	40014800 	.word	0x40014800

0800910c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	f023 0201 	bic.w	r2, r3, #1
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	4313      	orrs	r3, r2
 8009140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f023 030a 	bic.w	r3, r3, #10
 8009148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4313      	orrs	r3, r2
 8009150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	621a      	str	r2, [r3, #32]
}
 800915e:	bf00      	nop
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800916a:	b480      	push	{r7}
 800916c:	b087      	sub	sp, #28
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	f023 0210 	bic.w	r2, r3, #16
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	031b      	lsls	r3, r3, #12
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	4313      	orrs	r3, r2
 800919e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	621a      	str	r2, [r3, #32]
}
 80091be:	bf00      	nop
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f043 0307 	orr.w	r3, r3, #7
 80091ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	609a      	str	r2, [r3, #8]
}
 80091f4:	bf00      	nop
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800921a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	021a      	lsls	r2, r3, #8
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	431a      	orrs	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	4313      	orrs	r3, r2
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	609a      	str	r2, [r3, #8]
}
 8009234:	bf00      	nop
 8009236:	371c      	adds	r7, #28
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009240:	b480      	push	{r7}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f003 031f 	and.w	r3, r3, #31
 8009252:	2201      	movs	r2, #1
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a1a      	ldr	r2, [r3, #32]
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	43db      	mvns	r3, r3
 8009262:	401a      	ands	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6a1a      	ldr	r2, [r3, #32]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f003 031f 	and.w	r3, r3, #31
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	fa01 f303 	lsl.w	r3, r1, r3
 8009278:	431a      	orrs	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e06d      	b.n	8009380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a30      	ldr	r2, [pc, #192]	; (800938c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d009      	beq.n	80092e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a2f      	ldr	r2, [pc, #188]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d004      	beq.n	80092e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a2d      	ldr	r2, [pc, #180]	; (8009394 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d108      	bne.n	80092f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a1e      	ldr	r2, [pc, #120]	; (800938c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d01d      	beq.n	8009354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009320:	d018      	beq.n	8009354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a1c      	ldr	r2, [pc, #112]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d013      	beq.n	8009354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a1a      	ldr	r2, [pc, #104]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d00e      	beq.n	8009354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a15      	ldr	r2, [pc, #84]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d009      	beq.n	8009354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a16      	ldr	r2, [pc, #88]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d004      	beq.n	8009354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a11      	ldr	r2, [pc, #68]	; (8009394 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d10c      	bne.n	800936e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800935a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	4313      	orrs	r3, r2
 8009364:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	40012c00 	.word	0x40012c00
 8009390:	40013400 	.word	0x40013400
 8009394:	40015000 	.word	0x40015000
 8009398:	40000400 	.word	0x40000400
 800939c:	40000800 	.word	0x40000800
 80093a0:	40014000 	.word	0x40014000

080093a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e040      	b.n	8009474 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d106      	bne.n	8009408 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7fb fa5a 	bl	80048bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2224      	movs	r2, #36	; 0x24
 800940c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f022 0201 	bic.w	r2, r2, #1
 800941c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 faa8 	bl	8009974 <UART_SetConfig>
 8009424:	4603      	mov	r3, r0
 8009426:	2b01      	cmp	r3, #1
 8009428:	d101      	bne.n	800942e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e022      	b.n	8009474 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fc72 	bl	8009d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800944a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689a      	ldr	r2, [r3, #8]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800945a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0201 	orr.w	r2, r2, #1
 800946a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fcf9 	bl	8009e64 <UART_CheckIdleState>
 8009472:	4603      	mov	r3, r0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800948e:	2b20      	cmp	r3, #32
 8009490:	d145      	bne.n	800951e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <HAL_UART_Transmit_IT+0x22>
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e03e      	b.n	8009520 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_UART_Transmit_IT+0x34>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e037      	b.n	8009520 <HAL_UART_Transmit_IT+0xa4>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	88fa      	ldrh	r2, [r7, #6]
 80094c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	88fa      	ldrh	r2, [r7, #6]
 80094ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2221      	movs	r2, #33	; 0x21
 80094e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ea:	d107      	bne.n	80094fc <HAL_UART_Transmit_IT+0x80>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4a0d      	ldr	r2, [pc, #52]	; (800952c <HAL_UART_Transmit_IT+0xb0>)
 80094f8:	669a      	str	r2, [r3, #104]	; 0x68
 80094fa:	e002      	b.n	8009502 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4a0c      	ldr	r2, [pc, #48]	; (8009530 <HAL_UART_Transmit_IT+0xb4>)
 8009500:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009518:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	e000      	b.n	8009520 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800951e:	2302      	movs	r3, #2
  }
}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	0800a0ed 	.word	0x0800a0ed
 8009530:	0800a079 	.word	0x0800a079

08009534 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009554:	69fa      	ldr	r2, [r7, #28]
 8009556:	f640 030f 	movw	r3, #2063	; 0x80f
 800955a:	4013      	ands	r3, r2
 800955c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d113      	bne.n	800958c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00e      	beq.n	800958c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	f003 0320 	and.w	r3, r3, #32
 8009574:	2b00      	cmp	r3, #0
 8009576:	d009      	beq.n	800958c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 81cc 	beq.w	800991a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
      }
      return;
 800958a:	e1c6      	b.n	800991a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80e3 	beq.w	800975a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d105      	bne.n	80095aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	4ba5      	ldr	r3, [pc, #660]	; (8009838 <HAL_UART_IRQHandler+0x304>)
 80095a2:	4013      	ands	r3, r2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 80d8 	beq.w	800975a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d010      	beq.n	80095d6 <HAL_UART_IRQHandler+0xa2>
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00b      	beq.n	80095d6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2201      	movs	r2, #1
 80095c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095cc:	f043 0201 	orr.w	r2, r3, #1
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d010      	beq.n	8009602 <HAL_UART_IRQHandler+0xce>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2202      	movs	r2, #2
 80095f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095f8:	f043 0204 	orr.w	r2, r3, #4
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d010      	beq.n	800962e <HAL_UART_IRQHandler+0xfa>
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00b      	beq.n	800962e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2204      	movs	r2, #4
 800961c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009624:	f043 0202 	orr.w	r2, r3, #2
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	f003 0308 	and.w	r3, r3, #8
 8009634:	2b00      	cmp	r3, #0
 8009636:	d015      	beq.n	8009664 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	f003 0320 	and.w	r3, r3, #32
 800963e:	2b00      	cmp	r3, #0
 8009640:	d104      	bne.n	800964c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2208      	movs	r2, #8
 8009652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800965a:	f043 0208 	orr.w	r2, r3, #8
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800966a:	2b00      	cmp	r3, #0
 800966c:	d011      	beq.n	8009692 <HAL_UART_IRQHandler+0x15e>
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009688:	f043 0220 	orr.w	r2, r3, #32
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 8140 	beq.w	800991e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	f003 0320 	and.w	r3, r3, #32
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00c      	beq.n	80096c2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b40      	cmp	r3, #64	; 0x40
 80096d6:	d004      	beq.n	80096e2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d031      	beq.n	8009746 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fc83 	bl	8009fee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f2:	2b40      	cmp	r3, #64	; 0x40
 80096f4:	d123      	bne.n	800973e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	689a      	ldr	r2, [r3, #8]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009704:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970a:	2b00      	cmp	r3, #0
 800970c:	d013      	beq.n	8009736 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009712:	4a4a      	ldr	r2, [pc, #296]	; (800983c <HAL_UART_IRQHandler+0x308>)
 8009714:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971a:	4618      	mov	r0, r3
 800971c:	f7fc fba8 	bl	8005e70 <HAL_DMA_Abort_IT>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d017      	beq.n	8009756 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	e00f      	b.n	8009756 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f906 	bl	8009948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800973c:	e00b      	b.n	8009756 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f902 	bl	8009948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009744:	e007      	b.n	8009756 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f8fe 	bl	8009948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009754:	e0e3      	b.n	800991e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009756:	bf00      	nop
    return;
 8009758:	e0e1      	b.n	800991e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800975e:	2b01      	cmp	r3, #1
 8009760:	f040 80a7 	bne.w	80098b2 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	f003 0310 	and.w	r3, r3, #16
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80a1 	beq.w	80098b2 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	f003 0310 	and.w	r3, r3, #16
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 809b 	beq.w	80098b2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2210      	movs	r2, #16
 8009782:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978e:	2b40      	cmp	r3, #64	; 0x40
 8009790:	d156      	bne.n	8009840 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800979c:	893b      	ldrh	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 80bf 	beq.w	8009922 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80097aa:	893a      	ldrh	r2, [r7, #8]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	f080 80b8 	bcs.w	8009922 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	893a      	ldrh	r2, [r7, #8]
 80097b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b20      	cmp	r3, #32
 80097c2:	d02a      	beq.n	800981a <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689a      	ldr	r2, [r3, #8]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0201 	bic.w	r2, r2, #1
 80097e2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	689a      	ldr	r2, [r3, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2220      	movs	r2, #32
 80097f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0210 	bic.w	r2, r2, #16
 800980e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009814:	4618      	mov	r0, r3
 8009816:	f7fc faf2 	bl	8005dfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009826:	b29b      	uxth	r3, r3
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	b29b      	uxth	r3, r3
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f894 	bl	800995c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009834:	e075      	b.n	8009922 <HAL_UART_IRQHandler+0x3ee>
 8009836:	bf00      	nop
 8009838:	04000120 	.word	0x04000120
 800983c:	0800a04d 	.word	0x0800a04d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800984c:	b29b      	uxth	r3, r3
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d063      	beq.n	8009926 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 800985e:	897b      	ldrh	r3, [r7, #10]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d060      	beq.n	8009926 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009872:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0201 	bic.w	r2, r2, #1
 8009882:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 0210 	bic.w	r2, r2, #16
 80098a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098a6:	897b      	ldrh	r3, [r7, #10]
 80098a8:	4619      	mov	r1, r3
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f856 	bl	800995c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80098b0:	e039      	b.n	8009926 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00d      	beq.n	80098d8 <HAL_UART_IRQHandler+0x3a4>
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d008      	beq.n	80098d8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80098ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fc62 	bl	800a19a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098d6:	e029      	b.n	800992c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00d      	beq.n	80098fe <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d008      	beq.n	80098fe <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01a      	beq.n	800992a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	4798      	blx	r3
    }
    return;
 80098fc:	e015      	b.n	800992a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009904:	2b00      	cmp	r3, #0
 8009906:	d011      	beq.n	800992c <HAL_UART_IRQHandler+0x3f8>
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00c      	beq.n	800992c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fc28 	bl	800a168 <UART_EndTransmit_IT>
    return;
 8009918:	e008      	b.n	800992c <HAL_UART_IRQHandler+0x3f8>
      return;
 800991a:	bf00      	nop
 800991c:	e006      	b.n	800992c <HAL_UART_IRQHandler+0x3f8>
    return;
 800991e:	bf00      	nop
 8009920:	e004      	b.n	800992c <HAL_UART_IRQHandler+0x3f8>
      return;
 8009922:	bf00      	nop
 8009924:	e002      	b.n	800992c <HAL_UART_IRQHandler+0x3f8>
      return;
 8009926:	bf00      	nop
 8009928:	e000      	b.n	800992c <HAL_UART_IRQHandler+0x3f8>
    return;
 800992a:	bf00      	nop
  }

}
 800992c:	3720      	adds	r7, #32
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop

08009934 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	431a      	orrs	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	4313      	orrs	r3, r2
 8009996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	4bab      	ldr	r3, [pc, #684]	; (8009c4c <UART_SetConfig+0x2d8>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6812      	ldr	r2, [r2, #0]
 80099a6:	6979      	ldr	r1, [r7, #20]
 80099a8:	430b      	orrs	r3, r1
 80099aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a99      	ldr	r2, [pc, #612]	; (8009c50 <UART_SetConfig+0x2dc>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d120      	bne.n	8009a32 <UART_SetConfig+0xbe>
 80099f0:	4b98      	ldr	r3, [pc, #608]	; (8009c54 <UART_SetConfig+0x2e0>)
 80099f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d817      	bhi.n	8009a2c <UART_SetConfig+0xb8>
 80099fc:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <UART_SetConfig+0x90>)
 80099fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a02:	bf00      	nop
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a21 	.word	0x08009a21
 8009a0c:	08009a27 	.word	0x08009a27
 8009a10:	08009a1b 	.word	0x08009a1b
 8009a14:	2301      	movs	r3, #1
 8009a16:	77fb      	strb	r3, [r7, #31]
 8009a18:	e0b5      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	77fb      	strb	r3, [r7, #31]
 8009a1e:	e0b2      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a20:	2304      	movs	r3, #4
 8009a22:	77fb      	strb	r3, [r7, #31]
 8009a24:	e0af      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a26:	2308      	movs	r3, #8
 8009a28:	77fb      	strb	r3, [r7, #31]
 8009a2a:	e0ac      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	77fb      	strb	r3, [r7, #31]
 8009a30:	e0a9      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a88      	ldr	r2, [pc, #544]	; (8009c58 <UART_SetConfig+0x2e4>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d124      	bne.n	8009a86 <UART_SetConfig+0x112>
 8009a3c:	4b85      	ldr	r3, [pc, #532]	; (8009c54 <UART_SetConfig+0x2e0>)
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a48:	d011      	beq.n	8009a6e <UART_SetConfig+0xfa>
 8009a4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a4e:	d817      	bhi.n	8009a80 <UART_SetConfig+0x10c>
 8009a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a54:	d011      	beq.n	8009a7a <UART_SetConfig+0x106>
 8009a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a5a:	d811      	bhi.n	8009a80 <UART_SetConfig+0x10c>
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <UART_SetConfig+0xf4>
 8009a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a64:	d006      	beq.n	8009a74 <UART_SetConfig+0x100>
 8009a66:	e00b      	b.n	8009a80 <UART_SetConfig+0x10c>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	77fb      	strb	r3, [r7, #31]
 8009a6c:	e08b      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	77fb      	strb	r3, [r7, #31]
 8009a72:	e088      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a74:	2304      	movs	r3, #4
 8009a76:	77fb      	strb	r3, [r7, #31]
 8009a78:	e085      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	77fb      	strb	r3, [r7, #31]
 8009a7e:	e082      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a80:	2310      	movs	r3, #16
 8009a82:	77fb      	strb	r3, [r7, #31]
 8009a84:	e07f      	b.n	8009b86 <UART_SetConfig+0x212>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a74      	ldr	r2, [pc, #464]	; (8009c5c <UART_SetConfig+0x2e8>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d124      	bne.n	8009ada <UART_SetConfig+0x166>
 8009a90:	4b70      	ldr	r3, [pc, #448]	; (8009c54 <UART_SetConfig+0x2e0>)
 8009a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009a98:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009a9c:	d011      	beq.n	8009ac2 <UART_SetConfig+0x14e>
 8009a9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009aa2:	d817      	bhi.n	8009ad4 <UART_SetConfig+0x160>
 8009aa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009aa8:	d011      	beq.n	8009ace <UART_SetConfig+0x15a>
 8009aaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009aae:	d811      	bhi.n	8009ad4 <UART_SetConfig+0x160>
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d003      	beq.n	8009abc <UART_SetConfig+0x148>
 8009ab4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ab8:	d006      	beq.n	8009ac8 <UART_SetConfig+0x154>
 8009aba:	e00b      	b.n	8009ad4 <UART_SetConfig+0x160>
 8009abc:	2300      	movs	r3, #0
 8009abe:	77fb      	strb	r3, [r7, #31]
 8009ac0:	e061      	b.n	8009b86 <UART_SetConfig+0x212>
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	77fb      	strb	r3, [r7, #31]
 8009ac6:	e05e      	b.n	8009b86 <UART_SetConfig+0x212>
 8009ac8:	2304      	movs	r3, #4
 8009aca:	77fb      	strb	r3, [r7, #31]
 8009acc:	e05b      	b.n	8009b86 <UART_SetConfig+0x212>
 8009ace:	2308      	movs	r3, #8
 8009ad0:	77fb      	strb	r3, [r7, #31]
 8009ad2:	e058      	b.n	8009b86 <UART_SetConfig+0x212>
 8009ad4:	2310      	movs	r3, #16
 8009ad6:	77fb      	strb	r3, [r7, #31]
 8009ad8:	e055      	b.n	8009b86 <UART_SetConfig+0x212>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a60      	ldr	r2, [pc, #384]	; (8009c60 <UART_SetConfig+0x2ec>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d124      	bne.n	8009b2e <UART_SetConfig+0x1ba>
 8009ae4:	4b5b      	ldr	r3, [pc, #364]	; (8009c54 <UART_SetConfig+0x2e0>)
 8009ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009af0:	d011      	beq.n	8009b16 <UART_SetConfig+0x1a2>
 8009af2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009af6:	d817      	bhi.n	8009b28 <UART_SetConfig+0x1b4>
 8009af8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009afc:	d011      	beq.n	8009b22 <UART_SetConfig+0x1ae>
 8009afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b02:	d811      	bhi.n	8009b28 <UART_SetConfig+0x1b4>
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d003      	beq.n	8009b10 <UART_SetConfig+0x19c>
 8009b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b0c:	d006      	beq.n	8009b1c <UART_SetConfig+0x1a8>
 8009b0e:	e00b      	b.n	8009b28 <UART_SetConfig+0x1b4>
 8009b10:	2300      	movs	r3, #0
 8009b12:	77fb      	strb	r3, [r7, #31]
 8009b14:	e037      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b16:	2302      	movs	r3, #2
 8009b18:	77fb      	strb	r3, [r7, #31]
 8009b1a:	e034      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b1c:	2304      	movs	r3, #4
 8009b1e:	77fb      	strb	r3, [r7, #31]
 8009b20:	e031      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b22:	2308      	movs	r3, #8
 8009b24:	77fb      	strb	r3, [r7, #31]
 8009b26:	e02e      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b28:	2310      	movs	r3, #16
 8009b2a:	77fb      	strb	r3, [r7, #31]
 8009b2c:	e02b      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a4c      	ldr	r2, [pc, #304]	; (8009c64 <UART_SetConfig+0x2f0>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d124      	bne.n	8009b82 <UART_SetConfig+0x20e>
 8009b38:	4b46      	ldr	r3, [pc, #280]	; (8009c54 <UART_SetConfig+0x2e0>)
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009b40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b44:	d011      	beq.n	8009b6a <UART_SetConfig+0x1f6>
 8009b46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b4a:	d817      	bhi.n	8009b7c <UART_SetConfig+0x208>
 8009b4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b50:	d011      	beq.n	8009b76 <UART_SetConfig+0x202>
 8009b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b56:	d811      	bhi.n	8009b7c <UART_SetConfig+0x208>
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <UART_SetConfig+0x1f0>
 8009b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b60:	d006      	beq.n	8009b70 <UART_SetConfig+0x1fc>
 8009b62:	e00b      	b.n	8009b7c <UART_SetConfig+0x208>
 8009b64:	2300      	movs	r3, #0
 8009b66:	77fb      	strb	r3, [r7, #31]
 8009b68:	e00d      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	77fb      	strb	r3, [r7, #31]
 8009b6e:	e00a      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b70:	2304      	movs	r3, #4
 8009b72:	77fb      	strb	r3, [r7, #31]
 8009b74:	e007      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b76:	2308      	movs	r3, #8
 8009b78:	77fb      	strb	r3, [r7, #31]
 8009b7a:	e004      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	77fb      	strb	r3, [r7, #31]
 8009b80:	e001      	b.n	8009b86 <UART_SetConfig+0x212>
 8009b82:	2310      	movs	r3, #16
 8009b84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b8e:	d16d      	bne.n	8009c6c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8009b90:	7ffb      	ldrb	r3, [r7, #31]
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	d827      	bhi.n	8009be6 <UART_SetConfig+0x272>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <UART_SetConfig+0x228>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bc1 	.word	0x08009bc1
 8009ba0:	08009bc9 	.word	0x08009bc9
 8009ba4:	08009bd1 	.word	0x08009bd1
 8009ba8:	08009be7 	.word	0x08009be7
 8009bac:	08009bd7 	.word	0x08009bd7
 8009bb0:	08009be7 	.word	0x08009be7
 8009bb4:	08009be7 	.word	0x08009be7
 8009bb8:	08009be7 	.word	0x08009be7
 8009bbc:	08009bdf 	.word	0x08009bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bc0:	f7fe f81a 	bl	8007bf8 <HAL_RCC_GetPCLK1Freq>
 8009bc4:	61b8      	str	r0, [r7, #24]
        break;
 8009bc6:	e013      	b.n	8009bf0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bc8:	f7fe f838 	bl	8007c3c <HAL_RCC_GetPCLK2Freq>
 8009bcc:	61b8      	str	r0, [r7, #24]
        break;
 8009bce:	e00f      	b.n	8009bf0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bd0:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <UART_SetConfig+0x2f4>)
 8009bd2:	61bb      	str	r3, [r7, #24]
        break;
 8009bd4:	e00c      	b.n	8009bf0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bd6:	f7fd ff99 	bl	8007b0c <HAL_RCC_GetSysClockFreq>
 8009bda:	61b8      	str	r0, [r7, #24]
        break;
 8009bdc:	e008      	b.n	8009bf0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009be2:	61bb      	str	r3, [r7, #24]
        break;
 8009be4:	e004      	b.n	8009bf0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	77bb      	strb	r3, [r7, #30]
        break;
 8009bee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 8086 	beq.w	8009d04 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	005a      	lsls	r2, r3, #1
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	085b      	lsrs	r3, r3, #1
 8009c02:	441a      	add	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2b0f      	cmp	r3, #15
 8009c14:	d916      	bls.n	8009c44 <UART_SetConfig+0x2d0>
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c1c:	d212      	bcs.n	8009c44 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	f023 030f 	bic.w	r3, r3, #15
 8009c26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	085b      	lsrs	r3, r3, #1
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	89fb      	ldrh	r3, [r7, #14]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	89fa      	ldrh	r2, [r7, #14]
 8009c40:	60da      	str	r2, [r3, #12]
 8009c42:	e05f      	b.n	8009d04 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	77bb      	strb	r3, [r7, #30]
 8009c48:	e05c      	b.n	8009d04 <UART_SetConfig+0x390>
 8009c4a:	bf00      	nop
 8009c4c:	efff69f3 	.word	0xefff69f3
 8009c50:	40013800 	.word	0x40013800
 8009c54:	40021000 	.word	0x40021000
 8009c58:	40004400 	.word	0x40004400
 8009c5c:	40004800 	.word	0x40004800
 8009c60:	40004c00 	.word	0x40004c00
 8009c64:	40005000 	.word	0x40005000
 8009c68:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c6c:	7ffb      	ldrb	r3, [r7, #31]
 8009c6e:	2b08      	cmp	r3, #8
 8009c70:	d827      	bhi.n	8009cc2 <UART_SetConfig+0x34e>
 8009c72:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <UART_SetConfig+0x304>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009c9d 	.word	0x08009c9d
 8009c7c:	08009ca5 	.word	0x08009ca5
 8009c80:	08009cad 	.word	0x08009cad
 8009c84:	08009cc3 	.word	0x08009cc3
 8009c88:	08009cb3 	.word	0x08009cb3
 8009c8c:	08009cc3 	.word	0x08009cc3
 8009c90:	08009cc3 	.word	0x08009cc3
 8009c94:	08009cc3 	.word	0x08009cc3
 8009c98:	08009cbb 	.word	0x08009cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c9c:	f7fd ffac 	bl	8007bf8 <HAL_RCC_GetPCLK1Freq>
 8009ca0:	61b8      	str	r0, [r7, #24]
        break;
 8009ca2:	e013      	b.n	8009ccc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ca4:	f7fd ffca 	bl	8007c3c <HAL_RCC_GetPCLK2Freq>
 8009ca8:	61b8      	str	r0, [r7, #24]
        break;
 8009caa:	e00f      	b.n	8009ccc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cac:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <UART_SetConfig+0x3a8>)
 8009cae:	61bb      	str	r3, [r7, #24]
        break;
 8009cb0:	e00c      	b.n	8009ccc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cb2:	f7fd ff2b 	bl	8007b0c <HAL_RCC_GetSysClockFreq>
 8009cb6:	61b8      	str	r0, [r7, #24]
        break;
 8009cb8:	e008      	b.n	8009ccc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cbe:	61bb      	str	r3, [r7, #24]
        break;
 8009cc0:	e004      	b.n	8009ccc <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	77bb      	strb	r3, [r7, #30]
        break;
 8009cca:	bf00      	nop
    }

    if (pclk != 0U)
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d018      	beq.n	8009d04 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	085a      	lsrs	r2, r3, #1
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	441a      	add	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	2b0f      	cmp	r3, #15
 8009cec:	d908      	bls.n	8009d00 <UART_SetConfig+0x38c>
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cf4:	d204      	bcs.n	8009d00 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	60da      	str	r2, [r3, #12]
 8009cfe:	e001      	b.n	8009d04 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009d10:	7fbb      	ldrb	r3, [r7, #30]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3720      	adds	r7, #32
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	007a1200 	.word	0x007a1200

08009d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00a      	beq.n	8009d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	f003 0302 	and.w	r3, r3, #2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00a      	beq.n	8009d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	f003 0304 	and.w	r3, r3, #4
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00a      	beq.n	8009d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d92:	f003 0308 	and.w	r3, r3, #8
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db4:	f003 0310 	and.w	r3, r3, #16
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00a      	beq.n	8009dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	f003 0320 	and.w	r3, r3, #32
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d01a      	beq.n	8009e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e1e:	d10a      	bne.n	8009e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	605a      	str	r2, [r3, #4]
  }
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e74:	f7fa fea2 	bl	8004bbc <HAL_GetTick>
 8009e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0308 	and.w	r3, r3, #8
 8009e84:	2b08      	cmp	r3, #8
 8009e86:	d10e      	bne.n	8009ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f82d 	bl	8009ef6 <UART_WaitOnFlagUntilTimeout>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e023      	b.n	8009eee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0304 	and.w	r3, r3, #4
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	d10e      	bne.n	8009ed2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f817 	bl	8009ef6 <UART_WaitOnFlagUntilTimeout>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e00d      	b.n	8009eee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2220      	movs	r2, #32
 8009edc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	60f8      	str	r0, [r7, #12]
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	603b      	str	r3, [r7, #0]
 8009f02:	4613      	mov	r3, r2
 8009f04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f06:	e05e      	b.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0e:	d05a      	beq.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f10:	f7fa fe54 	bl	8004bbc <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d302      	bcc.n	8009f26 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d11b      	bne.n	8009f5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f022 0201 	bic.w	r2, r2, #1
 8009f44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e043      	b.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d02c      	beq.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f7a:	d124      	bne.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f022 0201 	bic.w	r2, r2, #1
 8009fa4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2220      	movs	r2, #32
 8009faa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2220      	movs	r2, #32
 8009fb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2220      	movs	r2, #32
 8009fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e00f      	b.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	4013      	ands	r3, r2
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	bf0c      	ite	eq
 8009fd6:	2301      	moveq	r3, #1
 8009fd8:	2300      	movne	r3, #0
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	461a      	mov	r2, r3
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d091      	beq.n	8009f08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a004:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0201 	bic.w	r2, r2, #1
 800a014:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d107      	bne.n	800a02e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 0210 	bic.w	r2, r2, #16
 800a02c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2220      	movs	r2, #32
 800a032:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7ff fc6c 	bl	8009948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a070:	bf00      	nop
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a084:	2b21      	cmp	r3, #33	; 0x21
 800a086:	d12b      	bne.n	800a0e0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a08e:	b29b      	uxth	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d110      	bne.n	800a0b6 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0a2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0b2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a0b4:	e014      	b.n	800a0e0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ba:	781a      	ldrb	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	b292      	uxth	r2, r2
 800a0c2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0f8:	2b21      	cmp	r3, #33	; 0x21
 800a0fa:	d12f      	bne.n	800a15c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a102:	b29b      	uxth	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d110      	bne.n	800a12a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a116:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a126:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a128:	e018      	b.n	800a15c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a12e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	881a      	ldrh	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a13c:	b292      	uxth	r2, r2
 800a13e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a144:	1c9a      	adds	r2, r3, #2
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a150:	b29b      	uxth	r3, r3
 800a152:	3b01      	subs	r3, #1
 800a154:	b29a      	uxth	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a15c:	bf00      	nop
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a17e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2220      	movs	r2, #32
 800a184:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7ff fbd1 	bl	8009934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a192:	bf00      	nop
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1a2:	bf00      	nop
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b085      	sub	sp, #20
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a1b6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a1ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	43db      	mvns	r3, r3
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	f107 0014 	add.w	r0, r7, #20
 800a1f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	b004      	add	sp, #16
 800a224:	4770      	bx	lr
	...

0800a228 <__errno>:
 800a228:	4b01      	ldr	r3, [pc, #4]	; (800a230 <__errno+0x8>)
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20000038 	.word	0x20000038

0800a234 <__libc_init_array>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	4d0d      	ldr	r5, [pc, #52]	; (800a26c <__libc_init_array+0x38>)
 800a238:	4c0d      	ldr	r4, [pc, #52]	; (800a270 <__libc_init_array+0x3c>)
 800a23a:	1b64      	subs	r4, r4, r5
 800a23c:	10a4      	asrs	r4, r4, #2
 800a23e:	2600      	movs	r6, #0
 800a240:	42a6      	cmp	r6, r4
 800a242:	d109      	bne.n	800a258 <__libc_init_array+0x24>
 800a244:	4d0b      	ldr	r5, [pc, #44]	; (800a274 <__libc_init_array+0x40>)
 800a246:	4c0c      	ldr	r4, [pc, #48]	; (800a278 <__libc_init_array+0x44>)
 800a248:	f000 fc4e 	bl	800aae8 <_init>
 800a24c:	1b64      	subs	r4, r4, r5
 800a24e:	10a4      	asrs	r4, r4, #2
 800a250:	2600      	movs	r6, #0
 800a252:	42a6      	cmp	r6, r4
 800a254:	d105      	bne.n	800a262 <__libc_init_array+0x2e>
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	f855 3b04 	ldr.w	r3, [r5], #4
 800a25c:	4798      	blx	r3
 800a25e:	3601      	adds	r6, #1
 800a260:	e7ee      	b.n	800a240 <__libc_init_array+0xc>
 800a262:	f855 3b04 	ldr.w	r3, [r5], #4
 800a266:	4798      	blx	r3
 800a268:	3601      	adds	r6, #1
 800a26a:	e7f2      	b.n	800a252 <__libc_init_array+0x1e>
 800a26c:	0800b39c 	.word	0x0800b39c
 800a270:	0800b39c 	.word	0x0800b39c
 800a274:	0800b39c 	.word	0x0800b39c
 800a278:	0800b3a0 	.word	0x0800b3a0

0800a27c <memmove>:
 800a27c:	4288      	cmp	r0, r1
 800a27e:	b510      	push	{r4, lr}
 800a280:	eb01 0402 	add.w	r4, r1, r2
 800a284:	d902      	bls.n	800a28c <memmove+0x10>
 800a286:	4284      	cmp	r4, r0
 800a288:	4623      	mov	r3, r4
 800a28a:	d807      	bhi.n	800a29c <memmove+0x20>
 800a28c:	1e43      	subs	r3, r0, #1
 800a28e:	42a1      	cmp	r1, r4
 800a290:	d008      	beq.n	800a2a4 <memmove+0x28>
 800a292:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a29a:	e7f8      	b.n	800a28e <memmove+0x12>
 800a29c:	4402      	add	r2, r0
 800a29e:	4601      	mov	r1, r0
 800a2a0:	428a      	cmp	r2, r1
 800a2a2:	d100      	bne.n	800a2a6 <memmove+0x2a>
 800a2a4:	bd10      	pop	{r4, pc}
 800a2a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ae:	e7f7      	b.n	800a2a0 <memmove+0x24>

0800a2b0 <memset>:
 800a2b0:	4402      	add	r2, r0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d100      	bne.n	800a2ba <memset+0xa>
 800a2b8:	4770      	bx	lr
 800a2ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a2be:	e7f9      	b.n	800a2b4 <memset+0x4>

0800a2c0 <siprintf>:
 800a2c0:	b40e      	push	{r1, r2, r3}
 800a2c2:	b500      	push	{lr}
 800a2c4:	b09c      	sub	sp, #112	; 0x70
 800a2c6:	ab1d      	add	r3, sp, #116	; 0x74
 800a2c8:	9002      	str	r0, [sp, #8]
 800a2ca:	9006      	str	r0, [sp, #24]
 800a2cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2d0:	4809      	ldr	r0, [pc, #36]	; (800a2f8 <siprintf+0x38>)
 800a2d2:	9107      	str	r1, [sp, #28]
 800a2d4:	9104      	str	r1, [sp, #16]
 800a2d6:	4909      	ldr	r1, [pc, #36]	; (800a2fc <siprintf+0x3c>)
 800a2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2dc:	9105      	str	r1, [sp, #20]
 800a2de:	6800      	ldr	r0, [r0, #0]
 800a2e0:	9301      	str	r3, [sp, #4]
 800a2e2:	a902      	add	r1, sp, #8
 800a2e4:	f000 f868 	bl	800a3b8 <_svfiprintf_r>
 800a2e8:	9b02      	ldr	r3, [sp, #8]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	701a      	strb	r2, [r3, #0]
 800a2ee:	b01c      	add	sp, #112	; 0x70
 800a2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2f4:	b003      	add	sp, #12
 800a2f6:	4770      	bx	lr
 800a2f8:	20000038 	.word	0x20000038
 800a2fc:	ffff0208 	.word	0xffff0208

0800a300 <__ssputs_r>:
 800a300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a304:	688e      	ldr	r6, [r1, #8]
 800a306:	429e      	cmp	r6, r3
 800a308:	4682      	mov	sl, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	4690      	mov	r8, r2
 800a30e:	461f      	mov	r7, r3
 800a310:	d838      	bhi.n	800a384 <__ssputs_r+0x84>
 800a312:	898a      	ldrh	r2, [r1, #12]
 800a314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a318:	d032      	beq.n	800a380 <__ssputs_r+0x80>
 800a31a:	6825      	ldr	r5, [r4, #0]
 800a31c:	6909      	ldr	r1, [r1, #16]
 800a31e:	eba5 0901 	sub.w	r9, r5, r1
 800a322:	6965      	ldr	r5, [r4, #20]
 800a324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a328:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a32c:	3301      	adds	r3, #1
 800a32e:	444b      	add	r3, r9
 800a330:	106d      	asrs	r5, r5, #1
 800a332:	429d      	cmp	r5, r3
 800a334:	bf38      	it	cc
 800a336:	461d      	movcc	r5, r3
 800a338:	0553      	lsls	r3, r2, #21
 800a33a:	d531      	bpl.n	800a3a0 <__ssputs_r+0xa0>
 800a33c:	4629      	mov	r1, r5
 800a33e:	f000 fb2d 	bl	800a99c <_malloc_r>
 800a342:	4606      	mov	r6, r0
 800a344:	b950      	cbnz	r0, 800a35c <__ssputs_r+0x5c>
 800a346:	230c      	movs	r3, #12
 800a348:	f8ca 3000 	str.w	r3, [sl]
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a352:	81a3      	strh	r3, [r4, #12]
 800a354:	f04f 30ff 	mov.w	r0, #4294967295
 800a358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35c:	6921      	ldr	r1, [r4, #16]
 800a35e:	464a      	mov	r2, r9
 800a360:	f000 fabe 	bl	800a8e0 <memcpy>
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a36a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a36e:	81a3      	strh	r3, [r4, #12]
 800a370:	6126      	str	r6, [r4, #16]
 800a372:	6165      	str	r5, [r4, #20]
 800a374:	444e      	add	r6, r9
 800a376:	eba5 0509 	sub.w	r5, r5, r9
 800a37a:	6026      	str	r6, [r4, #0]
 800a37c:	60a5      	str	r5, [r4, #8]
 800a37e:	463e      	mov	r6, r7
 800a380:	42be      	cmp	r6, r7
 800a382:	d900      	bls.n	800a386 <__ssputs_r+0x86>
 800a384:	463e      	mov	r6, r7
 800a386:	4632      	mov	r2, r6
 800a388:	6820      	ldr	r0, [r4, #0]
 800a38a:	4641      	mov	r1, r8
 800a38c:	f7ff ff76 	bl	800a27c <memmove>
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	1b9b      	subs	r3, r3, r6
 800a396:	4432      	add	r2, r6
 800a398:	60a3      	str	r3, [r4, #8]
 800a39a:	6022      	str	r2, [r4, #0]
 800a39c:	2000      	movs	r0, #0
 800a39e:	e7db      	b.n	800a358 <__ssputs_r+0x58>
 800a3a0:	462a      	mov	r2, r5
 800a3a2:	f000 fb55 	bl	800aa50 <_realloc_r>
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d1e1      	bne.n	800a370 <__ssputs_r+0x70>
 800a3ac:	6921      	ldr	r1, [r4, #16]
 800a3ae:	4650      	mov	r0, sl
 800a3b0:	f000 faa4 	bl	800a8fc <_free_r>
 800a3b4:	e7c7      	b.n	800a346 <__ssputs_r+0x46>
	...

0800a3b8 <_svfiprintf_r>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	4698      	mov	r8, r3
 800a3be:	898b      	ldrh	r3, [r1, #12]
 800a3c0:	061b      	lsls	r3, r3, #24
 800a3c2:	b09d      	sub	sp, #116	; 0x74
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	d50e      	bpl.n	800a3ea <_svfiprintf_r+0x32>
 800a3cc:	690b      	ldr	r3, [r1, #16]
 800a3ce:	b963      	cbnz	r3, 800a3ea <_svfiprintf_r+0x32>
 800a3d0:	2140      	movs	r1, #64	; 0x40
 800a3d2:	f000 fae3 	bl	800a99c <_malloc_r>
 800a3d6:	6028      	str	r0, [r5, #0]
 800a3d8:	6128      	str	r0, [r5, #16]
 800a3da:	b920      	cbnz	r0, 800a3e6 <_svfiprintf_r+0x2e>
 800a3dc:	230c      	movs	r3, #12
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e4:	e0d1      	b.n	800a58a <_svfiprintf_r+0x1d2>
 800a3e6:	2340      	movs	r3, #64	; 0x40
 800a3e8:	616b      	str	r3, [r5, #20]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ee:	2320      	movs	r3, #32
 800a3f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f8:	2330      	movs	r3, #48	; 0x30
 800a3fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5a4 <_svfiprintf_r+0x1ec>
 800a3fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a402:	f04f 0901 	mov.w	r9, #1
 800a406:	4623      	mov	r3, r4
 800a408:	469a      	mov	sl, r3
 800a40a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a40e:	b10a      	cbz	r2, 800a414 <_svfiprintf_r+0x5c>
 800a410:	2a25      	cmp	r2, #37	; 0x25
 800a412:	d1f9      	bne.n	800a408 <_svfiprintf_r+0x50>
 800a414:	ebba 0b04 	subs.w	fp, sl, r4
 800a418:	d00b      	beq.n	800a432 <_svfiprintf_r+0x7a>
 800a41a:	465b      	mov	r3, fp
 800a41c:	4622      	mov	r2, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	4638      	mov	r0, r7
 800a422:	f7ff ff6d 	bl	800a300 <__ssputs_r>
 800a426:	3001      	adds	r0, #1
 800a428:	f000 80aa 	beq.w	800a580 <_svfiprintf_r+0x1c8>
 800a42c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a42e:	445a      	add	r2, fp
 800a430:	9209      	str	r2, [sp, #36]	; 0x24
 800a432:	f89a 3000 	ldrb.w	r3, [sl]
 800a436:	2b00      	cmp	r3, #0
 800a438:	f000 80a2 	beq.w	800a580 <_svfiprintf_r+0x1c8>
 800a43c:	2300      	movs	r3, #0
 800a43e:	f04f 32ff 	mov.w	r2, #4294967295
 800a442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a446:	f10a 0a01 	add.w	sl, sl, #1
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	9307      	str	r3, [sp, #28]
 800a44e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a452:	931a      	str	r3, [sp, #104]	; 0x68
 800a454:	4654      	mov	r4, sl
 800a456:	2205      	movs	r2, #5
 800a458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a45c:	4851      	ldr	r0, [pc, #324]	; (800a5a4 <_svfiprintf_r+0x1ec>)
 800a45e:	f7f5 febf 	bl	80001e0 <memchr>
 800a462:	9a04      	ldr	r2, [sp, #16]
 800a464:	b9d8      	cbnz	r0, 800a49e <_svfiprintf_r+0xe6>
 800a466:	06d0      	lsls	r0, r2, #27
 800a468:	bf44      	itt	mi
 800a46a:	2320      	movmi	r3, #32
 800a46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a470:	0711      	lsls	r1, r2, #28
 800a472:	bf44      	itt	mi
 800a474:	232b      	movmi	r3, #43	; 0x2b
 800a476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47a:	f89a 3000 	ldrb.w	r3, [sl]
 800a47e:	2b2a      	cmp	r3, #42	; 0x2a
 800a480:	d015      	beq.n	800a4ae <_svfiprintf_r+0xf6>
 800a482:	9a07      	ldr	r2, [sp, #28]
 800a484:	4654      	mov	r4, sl
 800a486:	2000      	movs	r0, #0
 800a488:	f04f 0c0a 	mov.w	ip, #10
 800a48c:	4621      	mov	r1, r4
 800a48e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a492:	3b30      	subs	r3, #48	; 0x30
 800a494:	2b09      	cmp	r3, #9
 800a496:	d94e      	bls.n	800a536 <_svfiprintf_r+0x17e>
 800a498:	b1b0      	cbz	r0, 800a4c8 <_svfiprintf_r+0x110>
 800a49a:	9207      	str	r2, [sp, #28]
 800a49c:	e014      	b.n	800a4c8 <_svfiprintf_r+0x110>
 800a49e:	eba0 0308 	sub.w	r3, r0, r8
 800a4a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	9304      	str	r3, [sp, #16]
 800a4aa:	46a2      	mov	sl, r4
 800a4ac:	e7d2      	b.n	800a454 <_svfiprintf_r+0x9c>
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	1d19      	adds	r1, r3, #4
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	9103      	str	r1, [sp, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfbb      	ittet	lt
 800a4ba:	425b      	neglt	r3, r3
 800a4bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a4c0:	9307      	strge	r3, [sp, #28]
 800a4c2:	9307      	strlt	r3, [sp, #28]
 800a4c4:	bfb8      	it	lt
 800a4c6:	9204      	strlt	r2, [sp, #16]
 800a4c8:	7823      	ldrb	r3, [r4, #0]
 800a4ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a4cc:	d10c      	bne.n	800a4e8 <_svfiprintf_r+0x130>
 800a4ce:	7863      	ldrb	r3, [r4, #1]
 800a4d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d2:	d135      	bne.n	800a540 <_svfiprintf_r+0x188>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	1d1a      	adds	r2, r3, #4
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	9203      	str	r2, [sp, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bfb8      	it	lt
 800a4e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4e4:	3402      	adds	r4, #2
 800a4e6:	9305      	str	r3, [sp, #20]
 800a4e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5b4 <_svfiprintf_r+0x1fc>
 800a4ec:	7821      	ldrb	r1, [r4, #0]
 800a4ee:	2203      	movs	r2, #3
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	f7f5 fe75 	bl	80001e0 <memchr>
 800a4f6:	b140      	cbz	r0, 800a50a <_svfiprintf_r+0x152>
 800a4f8:	2340      	movs	r3, #64	; 0x40
 800a4fa:	eba0 000a 	sub.w	r0, r0, sl
 800a4fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a502:	9b04      	ldr	r3, [sp, #16]
 800a504:	4303      	orrs	r3, r0
 800a506:	3401      	adds	r4, #1
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50e:	4826      	ldr	r0, [pc, #152]	; (800a5a8 <_svfiprintf_r+0x1f0>)
 800a510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a514:	2206      	movs	r2, #6
 800a516:	f7f5 fe63 	bl	80001e0 <memchr>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d038      	beq.n	800a590 <_svfiprintf_r+0x1d8>
 800a51e:	4b23      	ldr	r3, [pc, #140]	; (800a5ac <_svfiprintf_r+0x1f4>)
 800a520:	bb1b      	cbnz	r3, 800a56a <_svfiprintf_r+0x1b2>
 800a522:	9b03      	ldr	r3, [sp, #12]
 800a524:	3307      	adds	r3, #7
 800a526:	f023 0307 	bic.w	r3, r3, #7
 800a52a:	3308      	adds	r3, #8
 800a52c:	9303      	str	r3, [sp, #12]
 800a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a530:	4433      	add	r3, r6
 800a532:	9309      	str	r3, [sp, #36]	; 0x24
 800a534:	e767      	b.n	800a406 <_svfiprintf_r+0x4e>
 800a536:	fb0c 3202 	mla	r2, ip, r2, r3
 800a53a:	460c      	mov	r4, r1
 800a53c:	2001      	movs	r0, #1
 800a53e:	e7a5      	b.n	800a48c <_svfiprintf_r+0xd4>
 800a540:	2300      	movs	r3, #0
 800a542:	3401      	adds	r4, #1
 800a544:	9305      	str	r3, [sp, #20]
 800a546:	4619      	mov	r1, r3
 800a548:	f04f 0c0a 	mov.w	ip, #10
 800a54c:	4620      	mov	r0, r4
 800a54e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a552:	3a30      	subs	r2, #48	; 0x30
 800a554:	2a09      	cmp	r2, #9
 800a556:	d903      	bls.n	800a560 <_svfiprintf_r+0x1a8>
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0c5      	beq.n	800a4e8 <_svfiprintf_r+0x130>
 800a55c:	9105      	str	r1, [sp, #20]
 800a55e:	e7c3      	b.n	800a4e8 <_svfiprintf_r+0x130>
 800a560:	fb0c 2101 	mla	r1, ip, r1, r2
 800a564:	4604      	mov	r4, r0
 800a566:	2301      	movs	r3, #1
 800a568:	e7f0      	b.n	800a54c <_svfiprintf_r+0x194>
 800a56a:	ab03      	add	r3, sp, #12
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	462a      	mov	r2, r5
 800a570:	4b0f      	ldr	r3, [pc, #60]	; (800a5b0 <_svfiprintf_r+0x1f8>)
 800a572:	a904      	add	r1, sp, #16
 800a574:	4638      	mov	r0, r7
 800a576:	f3af 8000 	nop.w
 800a57a:	1c42      	adds	r2, r0, #1
 800a57c:	4606      	mov	r6, r0
 800a57e:	d1d6      	bne.n	800a52e <_svfiprintf_r+0x176>
 800a580:	89ab      	ldrh	r3, [r5, #12]
 800a582:	065b      	lsls	r3, r3, #25
 800a584:	f53f af2c 	bmi.w	800a3e0 <_svfiprintf_r+0x28>
 800a588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a58a:	b01d      	add	sp, #116	; 0x74
 800a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a590:	ab03      	add	r3, sp, #12
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	462a      	mov	r2, r5
 800a596:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <_svfiprintf_r+0x1f8>)
 800a598:	a904      	add	r1, sp, #16
 800a59a:	4638      	mov	r0, r7
 800a59c:	f000 f87a 	bl	800a694 <_printf_i>
 800a5a0:	e7eb      	b.n	800a57a <_svfiprintf_r+0x1c2>
 800a5a2:	bf00      	nop
 800a5a4:	0800b368 	.word	0x0800b368
 800a5a8:	0800b372 	.word	0x0800b372
 800a5ac:	00000000 	.word	0x00000000
 800a5b0:	0800a301 	.word	0x0800a301
 800a5b4:	0800b36e 	.word	0x0800b36e

0800a5b8 <_printf_common>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	4616      	mov	r6, r2
 800a5be:	4699      	mov	r9, r3
 800a5c0:	688a      	ldr	r2, [r1, #8]
 800a5c2:	690b      	ldr	r3, [r1, #16]
 800a5c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	bfb8      	it	lt
 800a5cc:	4613      	movlt	r3, r2
 800a5ce:	6033      	str	r3, [r6, #0]
 800a5d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	b10a      	cbz	r2, 800a5de <_printf_common+0x26>
 800a5da:	3301      	adds	r3, #1
 800a5dc:	6033      	str	r3, [r6, #0]
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	0699      	lsls	r1, r3, #26
 800a5e2:	bf42      	ittt	mi
 800a5e4:	6833      	ldrmi	r3, [r6, #0]
 800a5e6:	3302      	addmi	r3, #2
 800a5e8:	6033      	strmi	r3, [r6, #0]
 800a5ea:	6825      	ldr	r5, [r4, #0]
 800a5ec:	f015 0506 	ands.w	r5, r5, #6
 800a5f0:	d106      	bne.n	800a600 <_printf_common+0x48>
 800a5f2:	f104 0a19 	add.w	sl, r4, #25
 800a5f6:	68e3      	ldr	r3, [r4, #12]
 800a5f8:	6832      	ldr	r2, [r6, #0]
 800a5fa:	1a9b      	subs	r3, r3, r2
 800a5fc:	42ab      	cmp	r3, r5
 800a5fe:	dc26      	bgt.n	800a64e <_printf_common+0x96>
 800a600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a604:	1e13      	subs	r3, r2, #0
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	bf18      	it	ne
 800a60a:	2301      	movne	r3, #1
 800a60c:	0692      	lsls	r2, r2, #26
 800a60e:	d42b      	bmi.n	800a668 <_printf_common+0xb0>
 800a610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a614:	4649      	mov	r1, r9
 800a616:	4638      	mov	r0, r7
 800a618:	47c0      	blx	r8
 800a61a:	3001      	adds	r0, #1
 800a61c:	d01e      	beq.n	800a65c <_printf_common+0xa4>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	68e5      	ldr	r5, [r4, #12]
 800a622:	6832      	ldr	r2, [r6, #0]
 800a624:	f003 0306 	and.w	r3, r3, #6
 800a628:	2b04      	cmp	r3, #4
 800a62a:	bf08      	it	eq
 800a62c:	1aad      	subeq	r5, r5, r2
 800a62e:	68a3      	ldr	r3, [r4, #8]
 800a630:	6922      	ldr	r2, [r4, #16]
 800a632:	bf0c      	ite	eq
 800a634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a638:	2500      	movne	r5, #0
 800a63a:	4293      	cmp	r3, r2
 800a63c:	bfc4      	itt	gt
 800a63e:	1a9b      	subgt	r3, r3, r2
 800a640:	18ed      	addgt	r5, r5, r3
 800a642:	2600      	movs	r6, #0
 800a644:	341a      	adds	r4, #26
 800a646:	42b5      	cmp	r5, r6
 800a648:	d11a      	bne.n	800a680 <_printf_common+0xc8>
 800a64a:	2000      	movs	r0, #0
 800a64c:	e008      	b.n	800a660 <_printf_common+0xa8>
 800a64e:	2301      	movs	r3, #1
 800a650:	4652      	mov	r2, sl
 800a652:	4649      	mov	r1, r9
 800a654:	4638      	mov	r0, r7
 800a656:	47c0      	blx	r8
 800a658:	3001      	adds	r0, #1
 800a65a:	d103      	bne.n	800a664 <_printf_common+0xac>
 800a65c:	f04f 30ff 	mov.w	r0, #4294967295
 800a660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a664:	3501      	adds	r5, #1
 800a666:	e7c6      	b.n	800a5f6 <_printf_common+0x3e>
 800a668:	18e1      	adds	r1, r4, r3
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	2030      	movs	r0, #48	; 0x30
 800a66e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a672:	4422      	add	r2, r4
 800a674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a67c:	3302      	adds	r3, #2
 800a67e:	e7c7      	b.n	800a610 <_printf_common+0x58>
 800a680:	2301      	movs	r3, #1
 800a682:	4622      	mov	r2, r4
 800a684:	4649      	mov	r1, r9
 800a686:	4638      	mov	r0, r7
 800a688:	47c0      	blx	r8
 800a68a:	3001      	adds	r0, #1
 800a68c:	d0e6      	beq.n	800a65c <_printf_common+0xa4>
 800a68e:	3601      	adds	r6, #1
 800a690:	e7d9      	b.n	800a646 <_printf_common+0x8e>
	...

0800a694 <_printf_i>:
 800a694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a698:	460c      	mov	r4, r1
 800a69a:	4691      	mov	r9, r2
 800a69c:	7e27      	ldrb	r7, [r4, #24]
 800a69e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a6a0:	2f78      	cmp	r7, #120	; 0x78
 800a6a2:	4680      	mov	r8, r0
 800a6a4:	469a      	mov	sl, r3
 800a6a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6aa:	d807      	bhi.n	800a6bc <_printf_i+0x28>
 800a6ac:	2f62      	cmp	r7, #98	; 0x62
 800a6ae:	d80a      	bhi.n	800a6c6 <_printf_i+0x32>
 800a6b0:	2f00      	cmp	r7, #0
 800a6b2:	f000 80d8 	beq.w	800a866 <_printf_i+0x1d2>
 800a6b6:	2f58      	cmp	r7, #88	; 0x58
 800a6b8:	f000 80a3 	beq.w	800a802 <_printf_i+0x16e>
 800a6bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6c4:	e03a      	b.n	800a73c <_printf_i+0xa8>
 800a6c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6ca:	2b15      	cmp	r3, #21
 800a6cc:	d8f6      	bhi.n	800a6bc <_printf_i+0x28>
 800a6ce:	a001      	add	r0, pc, #4	; (adr r0, 800a6d4 <_printf_i+0x40>)
 800a6d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a6d4:	0800a72d 	.word	0x0800a72d
 800a6d8:	0800a741 	.word	0x0800a741
 800a6dc:	0800a6bd 	.word	0x0800a6bd
 800a6e0:	0800a6bd 	.word	0x0800a6bd
 800a6e4:	0800a6bd 	.word	0x0800a6bd
 800a6e8:	0800a6bd 	.word	0x0800a6bd
 800a6ec:	0800a741 	.word	0x0800a741
 800a6f0:	0800a6bd 	.word	0x0800a6bd
 800a6f4:	0800a6bd 	.word	0x0800a6bd
 800a6f8:	0800a6bd 	.word	0x0800a6bd
 800a6fc:	0800a6bd 	.word	0x0800a6bd
 800a700:	0800a84d 	.word	0x0800a84d
 800a704:	0800a771 	.word	0x0800a771
 800a708:	0800a82f 	.word	0x0800a82f
 800a70c:	0800a6bd 	.word	0x0800a6bd
 800a710:	0800a6bd 	.word	0x0800a6bd
 800a714:	0800a86f 	.word	0x0800a86f
 800a718:	0800a6bd 	.word	0x0800a6bd
 800a71c:	0800a771 	.word	0x0800a771
 800a720:	0800a6bd 	.word	0x0800a6bd
 800a724:	0800a6bd 	.word	0x0800a6bd
 800a728:	0800a837 	.word	0x0800a837
 800a72c:	680b      	ldr	r3, [r1, #0]
 800a72e:	1d1a      	adds	r2, r3, #4
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	600a      	str	r2, [r1, #0]
 800a734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a73c:	2301      	movs	r3, #1
 800a73e:	e0a3      	b.n	800a888 <_printf_i+0x1f4>
 800a740:	6825      	ldr	r5, [r4, #0]
 800a742:	6808      	ldr	r0, [r1, #0]
 800a744:	062e      	lsls	r6, r5, #24
 800a746:	f100 0304 	add.w	r3, r0, #4
 800a74a:	d50a      	bpl.n	800a762 <_printf_i+0xce>
 800a74c:	6805      	ldr	r5, [r0, #0]
 800a74e:	600b      	str	r3, [r1, #0]
 800a750:	2d00      	cmp	r5, #0
 800a752:	da03      	bge.n	800a75c <_printf_i+0xc8>
 800a754:	232d      	movs	r3, #45	; 0x2d
 800a756:	426d      	negs	r5, r5
 800a758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a75c:	485e      	ldr	r0, [pc, #376]	; (800a8d8 <_printf_i+0x244>)
 800a75e:	230a      	movs	r3, #10
 800a760:	e019      	b.n	800a796 <_printf_i+0x102>
 800a762:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a766:	6805      	ldr	r5, [r0, #0]
 800a768:	600b      	str	r3, [r1, #0]
 800a76a:	bf18      	it	ne
 800a76c:	b22d      	sxthne	r5, r5
 800a76e:	e7ef      	b.n	800a750 <_printf_i+0xbc>
 800a770:	680b      	ldr	r3, [r1, #0]
 800a772:	6825      	ldr	r5, [r4, #0]
 800a774:	1d18      	adds	r0, r3, #4
 800a776:	6008      	str	r0, [r1, #0]
 800a778:	0628      	lsls	r0, r5, #24
 800a77a:	d501      	bpl.n	800a780 <_printf_i+0xec>
 800a77c:	681d      	ldr	r5, [r3, #0]
 800a77e:	e002      	b.n	800a786 <_printf_i+0xf2>
 800a780:	0669      	lsls	r1, r5, #25
 800a782:	d5fb      	bpl.n	800a77c <_printf_i+0xe8>
 800a784:	881d      	ldrh	r5, [r3, #0]
 800a786:	4854      	ldr	r0, [pc, #336]	; (800a8d8 <_printf_i+0x244>)
 800a788:	2f6f      	cmp	r7, #111	; 0x6f
 800a78a:	bf0c      	ite	eq
 800a78c:	2308      	moveq	r3, #8
 800a78e:	230a      	movne	r3, #10
 800a790:	2100      	movs	r1, #0
 800a792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a796:	6866      	ldr	r6, [r4, #4]
 800a798:	60a6      	str	r6, [r4, #8]
 800a79a:	2e00      	cmp	r6, #0
 800a79c:	bfa2      	ittt	ge
 800a79e:	6821      	ldrge	r1, [r4, #0]
 800a7a0:	f021 0104 	bicge.w	r1, r1, #4
 800a7a4:	6021      	strge	r1, [r4, #0]
 800a7a6:	b90d      	cbnz	r5, 800a7ac <_printf_i+0x118>
 800a7a8:	2e00      	cmp	r6, #0
 800a7aa:	d04d      	beq.n	800a848 <_printf_i+0x1b4>
 800a7ac:	4616      	mov	r6, r2
 800a7ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7b2:	fb03 5711 	mls	r7, r3, r1, r5
 800a7b6:	5dc7      	ldrb	r7, [r0, r7]
 800a7b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7bc:	462f      	mov	r7, r5
 800a7be:	42bb      	cmp	r3, r7
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	d9f4      	bls.n	800a7ae <_printf_i+0x11a>
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d10b      	bne.n	800a7e0 <_printf_i+0x14c>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	07df      	lsls	r7, r3, #31
 800a7cc:	d508      	bpl.n	800a7e0 <_printf_i+0x14c>
 800a7ce:	6923      	ldr	r3, [r4, #16]
 800a7d0:	6861      	ldr	r1, [r4, #4]
 800a7d2:	4299      	cmp	r1, r3
 800a7d4:	bfde      	ittt	le
 800a7d6:	2330      	movle	r3, #48	; 0x30
 800a7d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7e0:	1b92      	subs	r2, r2, r6
 800a7e2:	6122      	str	r2, [r4, #16]
 800a7e4:	f8cd a000 	str.w	sl, [sp]
 800a7e8:	464b      	mov	r3, r9
 800a7ea:	aa03      	add	r2, sp, #12
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	f7ff fee2 	bl	800a5b8 <_printf_common>
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d14c      	bne.n	800a892 <_printf_i+0x1fe>
 800a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fc:	b004      	add	sp, #16
 800a7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a802:	4835      	ldr	r0, [pc, #212]	; (800a8d8 <_printf_i+0x244>)
 800a804:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	680e      	ldr	r6, [r1, #0]
 800a80c:	061f      	lsls	r7, r3, #24
 800a80e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a812:	600e      	str	r6, [r1, #0]
 800a814:	d514      	bpl.n	800a840 <_printf_i+0x1ac>
 800a816:	07d9      	lsls	r1, r3, #31
 800a818:	bf44      	itt	mi
 800a81a:	f043 0320 	orrmi.w	r3, r3, #32
 800a81e:	6023      	strmi	r3, [r4, #0]
 800a820:	b91d      	cbnz	r5, 800a82a <_printf_i+0x196>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	f023 0320 	bic.w	r3, r3, #32
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	2310      	movs	r3, #16
 800a82c:	e7b0      	b.n	800a790 <_printf_i+0xfc>
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	f043 0320 	orr.w	r3, r3, #32
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	2378      	movs	r3, #120	; 0x78
 800a838:	4828      	ldr	r0, [pc, #160]	; (800a8dc <_printf_i+0x248>)
 800a83a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a83e:	e7e3      	b.n	800a808 <_printf_i+0x174>
 800a840:	065e      	lsls	r6, r3, #25
 800a842:	bf48      	it	mi
 800a844:	b2ad      	uxthmi	r5, r5
 800a846:	e7e6      	b.n	800a816 <_printf_i+0x182>
 800a848:	4616      	mov	r6, r2
 800a84a:	e7bb      	b.n	800a7c4 <_printf_i+0x130>
 800a84c:	680b      	ldr	r3, [r1, #0]
 800a84e:	6826      	ldr	r6, [r4, #0]
 800a850:	6960      	ldr	r0, [r4, #20]
 800a852:	1d1d      	adds	r5, r3, #4
 800a854:	600d      	str	r5, [r1, #0]
 800a856:	0635      	lsls	r5, r6, #24
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	d501      	bpl.n	800a860 <_printf_i+0x1cc>
 800a85c:	6018      	str	r0, [r3, #0]
 800a85e:	e002      	b.n	800a866 <_printf_i+0x1d2>
 800a860:	0671      	lsls	r1, r6, #25
 800a862:	d5fb      	bpl.n	800a85c <_printf_i+0x1c8>
 800a864:	8018      	strh	r0, [r3, #0]
 800a866:	2300      	movs	r3, #0
 800a868:	6123      	str	r3, [r4, #16]
 800a86a:	4616      	mov	r6, r2
 800a86c:	e7ba      	b.n	800a7e4 <_printf_i+0x150>
 800a86e:	680b      	ldr	r3, [r1, #0]
 800a870:	1d1a      	adds	r2, r3, #4
 800a872:	600a      	str	r2, [r1, #0]
 800a874:	681e      	ldr	r6, [r3, #0]
 800a876:	6862      	ldr	r2, [r4, #4]
 800a878:	2100      	movs	r1, #0
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7f5 fcb0 	bl	80001e0 <memchr>
 800a880:	b108      	cbz	r0, 800a886 <_printf_i+0x1f2>
 800a882:	1b80      	subs	r0, r0, r6
 800a884:	6060      	str	r0, [r4, #4]
 800a886:	6863      	ldr	r3, [r4, #4]
 800a888:	6123      	str	r3, [r4, #16]
 800a88a:	2300      	movs	r3, #0
 800a88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a890:	e7a8      	b.n	800a7e4 <_printf_i+0x150>
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	4632      	mov	r2, r6
 800a896:	4649      	mov	r1, r9
 800a898:	4640      	mov	r0, r8
 800a89a:	47d0      	blx	sl
 800a89c:	3001      	adds	r0, #1
 800a89e:	d0ab      	beq.n	800a7f8 <_printf_i+0x164>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	079b      	lsls	r3, r3, #30
 800a8a4:	d413      	bmi.n	800a8ce <_printf_i+0x23a>
 800a8a6:	68e0      	ldr	r0, [r4, #12]
 800a8a8:	9b03      	ldr	r3, [sp, #12]
 800a8aa:	4298      	cmp	r0, r3
 800a8ac:	bfb8      	it	lt
 800a8ae:	4618      	movlt	r0, r3
 800a8b0:	e7a4      	b.n	800a7fc <_printf_i+0x168>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	4649      	mov	r1, r9
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	47d0      	blx	sl
 800a8bc:	3001      	adds	r0, #1
 800a8be:	d09b      	beq.n	800a7f8 <_printf_i+0x164>
 800a8c0:	3501      	adds	r5, #1
 800a8c2:	68e3      	ldr	r3, [r4, #12]
 800a8c4:	9903      	ldr	r1, [sp, #12]
 800a8c6:	1a5b      	subs	r3, r3, r1
 800a8c8:	42ab      	cmp	r3, r5
 800a8ca:	dcf2      	bgt.n	800a8b2 <_printf_i+0x21e>
 800a8cc:	e7eb      	b.n	800a8a6 <_printf_i+0x212>
 800a8ce:	2500      	movs	r5, #0
 800a8d0:	f104 0619 	add.w	r6, r4, #25
 800a8d4:	e7f5      	b.n	800a8c2 <_printf_i+0x22e>
 800a8d6:	bf00      	nop
 800a8d8:	0800b379 	.word	0x0800b379
 800a8dc:	0800b38a 	.word	0x0800b38a

0800a8e0 <memcpy>:
 800a8e0:	440a      	add	r2, r1
 800a8e2:	4291      	cmp	r1, r2
 800a8e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8e8:	d100      	bne.n	800a8ec <memcpy+0xc>
 800a8ea:	4770      	bx	lr
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8f6:	4291      	cmp	r1, r2
 800a8f8:	d1f9      	bne.n	800a8ee <memcpy+0xe>
 800a8fa:	bd10      	pop	{r4, pc}

0800a8fc <_free_r>:
 800a8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8fe:	2900      	cmp	r1, #0
 800a900:	d048      	beq.n	800a994 <_free_r+0x98>
 800a902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a906:	9001      	str	r0, [sp, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f1a1 0404 	sub.w	r4, r1, #4
 800a90e:	bfb8      	it	lt
 800a910:	18e4      	addlt	r4, r4, r3
 800a912:	f000 f8d3 	bl	800aabc <__malloc_lock>
 800a916:	4a20      	ldr	r2, [pc, #128]	; (800a998 <_free_r+0x9c>)
 800a918:	9801      	ldr	r0, [sp, #4]
 800a91a:	6813      	ldr	r3, [r2, #0]
 800a91c:	4615      	mov	r5, r2
 800a91e:	b933      	cbnz	r3, 800a92e <_free_r+0x32>
 800a920:	6063      	str	r3, [r4, #4]
 800a922:	6014      	str	r4, [r2, #0]
 800a924:	b003      	add	sp, #12
 800a926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a92a:	f000 b8cd 	b.w	800aac8 <__malloc_unlock>
 800a92e:	42a3      	cmp	r3, r4
 800a930:	d90b      	bls.n	800a94a <_free_r+0x4e>
 800a932:	6821      	ldr	r1, [r4, #0]
 800a934:	1862      	adds	r2, r4, r1
 800a936:	4293      	cmp	r3, r2
 800a938:	bf04      	itt	eq
 800a93a:	681a      	ldreq	r2, [r3, #0]
 800a93c:	685b      	ldreq	r3, [r3, #4]
 800a93e:	6063      	str	r3, [r4, #4]
 800a940:	bf04      	itt	eq
 800a942:	1852      	addeq	r2, r2, r1
 800a944:	6022      	streq	r2, [r4, #0]
 800a946:	602c      	str	r4, [r5, #0]
 800a948:	e7ec      	b.n	800a924 <_free_r+0x28>
 800a94a:	461a      	mov	r2, r3
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	b10b      	cbz	r3, 800a954 <_free_r+0x58>
 800a950:	42a3      	cmp	r3, r4
 800a952:	d9fa      	bls.n	800a94a <_free_r+0x4e>
 800a954:	6811      	ldr	r1, [r2, #0]
 800a956:	1855      	adds	r5, r2, r1
 800a958:	42a5      	cmp	r5, r4
 800a95a:	d10b      	bne.n	800a974 <_free_r+0x78>
 800a95c:	6824      	ldr	r4, [r4, #0]
 800a95e:	4421      	add	r1, r4
 800a960:	1854      	adds	r4, r2, r1
 800a962:	42a3      	cmp	r3, r4
 800a964:	6011      	str	r1, [r2, #0]
 800a966:	d1dd      	bne.n	800a924 <_free_r+0x28>
 800a968:	681c      	ldr	r4, [r3, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	6053      	str	r3, [r2, #4]
 800a96e:	4421      	add	r1, r4
 800a970:	6011      	str	r1, [r2, #0]
 800a972:	e7d7      	b.n	800a924 <_free_r+0x28>
 800a974:	d902      	bls.n	800a97c <_free_r+0x80>
 800a976:	230c      	movs	r3, #12
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	e7d3      	b.n	800a924 <_free_r+0x28>
 800a97c:	6825      	ldr	r5, [r4, #0]
 800a97e:	1961      	adds	r1, r4, r5
 800a980:	428b      	cmp	r3, r1
 800a982:	bf04      	itt	eq
 800a984:	6819      	ldreq	r1, [r3, #0]
 800a986:	685b      	ldreq	r3, [r3, #4]
 800a988:	6063      	str	r3, [r4, #4]
 800a98a:	bf04      	itt	eq
 800a98c:	1949      	addeq	r1, r1, r5
 800a98e:	6021      	streq	r1, [r4, #0]
 800a990:	6054      	str	r4, [r2, #4]
 800a992:	e7c7      	b.n	800a924 <_free_r+0x28>
 800a994:	b003      	add	sp, #12
 800a996:	bd30      	pop	{r4, r5, pc}
 800a998:	200004ec 	.word	0x200004ec

0800a99c <_malloc_r>:
 800a99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99e:	1ccd      	adds	r5, r1, #3
 800a9a0:	f025 0503 	bic.w	r5, r5, #3
 800a9a4:	3508      	adds	r5, #8
 800a9a6:	2d0c      	cmp	r5, #12
 800a9a8:	bf38      	it	cc
 800a9aa:	250c      	movcc	r5, #12
 800a9ac:	2d00      	cmp	r5, #0
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	db01      	blt.n	800a9b6 <_malloc_r+0x1a>
 800a9b2:	42a9      	cmp	r1, r5
 800a9b4:	d903      	bls.n	800a9be <_malloc_r+0x22>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	6033      	str	r3, [r6, #0]
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9be:	f000 f87d 	bl	800aabc <__malloc_lock>
 800a9c2:	4921      	ldr	r1, [pc, #132]	; (800aa48 <_malloc_r+0xac>)
 800a9c4:	680a      	ldr	r2, [r1, #0]
 800a9c6:	4614      	mov	r4, r2
 800a9c8:	b99c      	cbnz	r4, 800a9f2 <_malloc_r+0x56>
 800a9ca:	4f20      	ldr	r7, [pc, #128]	; (800aa4c <_malloc_r+0xb0>)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	b923      	cbnz	r3, 800a9da <_malloc_r+0x3e>
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f000 f862 	bl	800aa9c <_sbrk_r>
 800a9d8:	6038      	str	r0, [r7, #0]
 800a9da:	4629      	mov	r1, r5
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f000 f85d 	bl	800aa9c <_sbrk_r>
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	d123      	bne.n	800aa2e <_malloc_r+0x92>
 800a9e6:	230c      	movs	r3, #12
 800a9e8:	6033      	str	r3, [r6, #0]
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f000 f86c 	bl	800aac8 <__malloc_unlock>
 800a9f0:	e7e3      	b.n	800a9ba <_malloc_r+0x1e>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	1b5b      	subs	r3, r3, r5
 800a9f6:	d417      	bmi.n	800aa28 <_malloc_r+0x8c>
 800a9f8:	2b0b      	cmp	r3, #11
 800a9fa:	d903      	bls.n	800aa04 <_malloc_r+0x68>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	441c      	add	r4, r3
 800aa00:	6025      	str	r5, [r4, #0]
 800aa02:	e004      	b.n	800aa0e <_malloc_r+0x72>
 800aa04:	6863      	ldr	r3, [r4, #4]
 800aa06:	42a2      	cmp	r2, r4
 800aa08:	bf0c      	ite	eq
 800aa0a:	600b      	streq	r3, [r1, #0]
 800aa0c:	6053      	strne	r3, [r2, #4]
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 f85a 	bl	800aac8 <__malloc_unlock>
 800aa14:	f104 000b 	add.w	r0, r4, #11
 800aa18:	1d23      	adds	r3, r4, #4
 800aa1a:	f020 0007 	bic.w	r0, r0, #7
 800aa1e:	1ac2      	subs	r2, r0, r3
 800aa20:	d0cc      	beq.n	800a9bc <_malloc_r+0x20>
 800aa22:	1a1b      	subs	r3, r3, r0
 800aa24:	50a3      	str	r3, [r4, r2]
 800aa26:	e7c9      	b.n	800a9bc <_malloc_r+0x20>
 800aa28:	4622      	mov	r2, r4
 800aa2a:	6864      	ldr	r4, [r4, #4]
 800aa2c:	e7cc      	b.n	800a9c8 <_malloc_r+0x2c>
 800aa2e:	1cc4      	adds	r4, r0, #3
 800aa30:	f024 0403 	bic.w	r4, r4, #3
 800aa34:	42a0      	cmp	r0, r4
 800aa36:	d0e3      	beq.n	800aa00 <_malloc_r+0x64>
 800aa38:	1a21      	subs	r1, r4, r0
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f000 f82e 	bl	800aa9c <_sbrk_r>
 800aa40:	3001      	adds	r0, #1
 800aa42:	d1dd      	bne.n	800aa00 <_malloc_r+0x64>
 800aa44:	e7cf      	b.n	800a9e6 <_malloc_r+0x4a>
 800aa46:	bf00      	nop
 800aa48:	200004ec 	.word	0x200004ec
 800aa4c:	200004f0 	.word	0x200004f0

0800aa50 <_realloc_r>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	4607      	mov	r7, r0
 800aa54:	4614      	mov	r4, r2
 800aa56:	460e      	mov	r6, r1
 800aa58:	b921      	cbnz	r1, 800aa64 <_realloc_r+0x14>
 800aa5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa5e:	4611      	mov	r1, r2
 800aa60:	f7ff bf9c 	b.w	800a99c <_malloc_r>
 800aa64:	b922      	cbnz	r2, 800aa70 <_realloc_r+0x20>
 800aa66:	f7ff ff49 	bl	800a8fc <_free_r>
 800aa6a:	4625      	mov	r5, r4
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa70:	f000 f830 	bl	800aad4 <_malloc_usable_size_r>
 800aa74:	42a0      	cmp	r0, r4
 800aa76:	d20f      	bcs.n	800aa98 <_realloc_r+0x48>
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	f7ff ff8e 	bl	800a99c <_malloc_r>
 800aa80:	4605      	mov	r5, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d0f2      	beq.n	800aa6c <_realloc_r+0x1c>
 800aa86:	4631      	mov	r1, r6
 800aa88:	4622      	mov	r2, r4
 800aa8a:	f7ff ff29 	bl	800a8e0 <memcpy>
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff ff33 	bl	800a8fc <_free_r>
 800aa96:	e7e9      	b.n	800aa6c <_realloc_r+0x1c>
 800aa98:	4635      	mov	r5, r6
 800aa9a:	e7e7      	b.n	800aa6c <_realloc_r+0x1c>

0800aa9c <_sbrk_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4d06      	ldr	r5, [pc, #24]	; (800aab8 <_sbrk_r+0x1c>)
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	4608      	mov	r0, r1
 800aaa6:	602b      	str	r3, [r5, #0]
 800aaa8:	f7f9 ffc2 	bl	8004a30 <_sbrk>
 800aaac:	1c43      	adds	r3, r0, #1
 800aaae:	d102      	bne.n	800aab6 <_sbrk_r+0x1a>
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	b103      	cbz	r3, 800aab6 <_sbrk_r+0x1a>
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	20001a38 	.word	0x20001a38

0800aabc <__malloc_lock>:
 800aabc:	4801      	ldr	r0, [pc, #4]	; (800aac4 <__malloc_lock+0x8>)
 800aabe:	f000 b811 	b.w	800aae4 <__retarget_lock_acquire_recursive>
 800aac2:	bf00      	nop
 800aac4:	20001a40 	.word	0x20001a40

0800aac8 <__malloc_unlock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	; (800aad0 <__malloc_unlock+0x8>)
 800aaca:	f000 b80c 	b.w	800aae6 <__retarget_lock_release_recursive>
 800aace:	bf00      	nop
 800aad0:	20001a40 	.word	0x20001a40

0800aad4 <_malloc_usable_size_r>:
 800aad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad8:	1f18      	subs	r0, r3, #4
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bfbc      	itt	lt
 800aade:	580b      	ldrlt	r3, [r1, r0]
 800aae0:	18c0      	addlt	r0, r0, r3
 800aae2:	4770      	bx	lr

0800aae4 <__retarget_lock_acquire_recursive>:
 800aae4:	4770      	bx	lr

0800aae6 <__retarget_lock_release_recursive>:
 800aae6:	4770      	bx	lr

0800aae8 <_init>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	bf00      	nop
 800aaec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaee:	bc08      	pop	{r3}
 800aaf0:	469e      	mov	lr, r3
 800aaf2:	4770      	bx	lr

0800aaf4 <_fini>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	bf00      	nop
 800aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafa:	bc08      	pop	{r3}
 800aafc:	469e      	mov	lr, r3
 800aafe:	4770      	bx	lr

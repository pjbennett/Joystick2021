/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ssd1306.h"
#include "ssd1306_tests.h"
#include <string.h>
#include <stdio.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define VER "v2.66"

#define TRUE 1
#define FALSE 0
#define ON 1
#define OFF 0
#define HIGH 1
#define LOW 0

#define ADC_BUF_LEN 1000
#define FOCUS 0
#define ZOOM 1
#define PAN 2
#define TILT 3
#define ROLL 4

#define AVG_PAN 100
#define AVG_TILT 100
#define AVG_ROLL 100

#define AVG_FOCUS 100
#define AVG_ZOOM 100

#define MENU_OFF 0
#define MENU_MAIN 0 //another name for the main page
#define MENU_PAN 1
#define MENU_TILT 2
#define MENU_ROLL 3
#define MENU_ZOOM 4
#define MENU_FOCUS 5
#define MENU_AUX 6

#define TILT_A 0
#define TILT_B 1

#define CAL_OFF 0
#define CAL_START 1
#define CAL_FINISH 2

//BOX1 - Deadbands
#define X1H 2005
#define X1L 1980
#define Y1H 1977
#define Y1L 1957
#define X2H 1975
#define X2L 1956
#define Y2H 1977
#define Y2L 1958

//BOX2 - Deadbands
//#define X1H 1999
//#define X1L 1988
//#define Y1H 1982
//#define Y1L 1968
//#define X2H 1972
//#define X2L 1960
//#define Y2H 1980
//#define Y2L 1965

#define NUM_TICK 25

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

UART_HandleTypeDef huart2;

PCD_HandleTypeDef hpcd_USB_FS;

/* USER CODE BEGIN PV */
char displayBuff[40];
uint16_t adc_buf[ADC_BUF_LEN];
uint16_t adcValue[5];
uint8_t dataTX[15];

uint16_t headData[10];

uint32_t avgPan;
uint16_t avgPanData[AVG_PAN];
uint16_t count_pan;
uint16_t prevPanValue;

uint32_t avgTilt;
uint16_t avgTiltData[AVG_TILT];
uint16_t count_tilt;
uint16_t prevTiltValue;

uint32_t avgRoll;
uint16_t avgRollData[AVG_ROLL];
uint16_t count_roll;
uint16_t prevRollValue;

uint32_t avgZoom;
uint16_t avgZoomData[AVG_ZOOM];
uint16_t count_zoom;
uint16_t prevZoomValue;

uint32_t avgFocus;
uint16_t avgFocusData[AVG_FOCUS];
uint16_t count_focus;
uint16_t prevFocusValue;

uint16_t panRawValue;
uint16_t panAvgValue;
int16_t panCalValue;
uint16_t tiltRawValue;
uint16_t tiltAvgValue;
int16_t tiltCalValue;
uint16_t rollRawValue;
uint16_t rollAvgValue;
int16_t rollCalValue;
uint16_t zoomRawValue;
uint16_t zoomAvgValue;
int16_t zoomCalValue;

uint16_t focusRawValue;
uint16_t focusAvgValue;
int16_t focusCalValue;

int16_t zoomValue;
int16_t panValue;
int16_t tiltValue;
int16_t rollValue;


uint8_t rollStatus;
uint8_t focusBarValue;
uint8_t zoomBarValue;
int8_t zoomOffset;
uint8_t zoomEncoderReset;

int8_t panOffset;
int8_t panEncoderPinAPrev;

int8_t tiltOffset;

int16_t zoomValue;
int16_t panValue;
int16_t tiltValue;
int16_t rollValue;

int16_t panDisplayValue;
int16_t tiltDisplayValue;
int16_t rollDisplayValue;
int16_t zoomDisplayValue;
int16_t focusDisplayValue;

uint8_t menuPage;
uint8_t tiltPressed;
uint8_t tiltSense;

int8_t PTSetting;
float PTRgain;


uint16_t state=0,counter=0;

uint8_t prevNextCode = 0;
uint16_t store=0;
int8_t c,val;

uint8_t auxPressed;

uint16_t calibrationStart;
uint16_t calCount;
uint8_t calStatus;

uint16_t joystickMin;
uint16_t joystickMax;
uint16_t joystickCenter;

int8_t gainSetting;

float zoomCalFactor;

uint16_t testBuffer[100];
uint32_t testValue;

uint16_t rawTick[100];
uint16_t avgTick[100];
uint8_t tickCount;

uint32_t channel1 = 0;
uint32_t channel2 = 0;
uint32_t channel3 = 0;
uint32_t channel4 = 0;
uint32_t channel5 = 0;

uint16_t samplingCount = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI2_Init(void);
static void MX_ADC2_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM8_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
static void MX_USB_PCD_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void updateZoomOffset (void);
void updateDisplay (void);
void sendCameraData(void);
void updatePanEncoder (void);
int8_t read_rotary(void);
void menuOff (void);
void menuTilt (void);
void menuAux (void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */




  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI2_Init();
  MX_ADC2_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_TIM8_Init();
  MX_TIM3_Init();
  MX_TIM1_Init();
  MX_USB_PCD_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
  ssd1306_Init();
  //ssd1306_TestAll();

  ssd1306_Fill(Black);
  ssd1306_SetCursor(2, 0);
  ssd1306_WriteString("SUPRACAM - CAMERA OP", Font_6x8, White);
  ssd1306_SetCursor(2, 10);
  ssd1306_WriteString("CONTROL PANEL", Font_6x8, White);
  ssd1306_SetCursor(2, 20);
  ssd1306_WriteString("VERSION 1.14", Font_6x8, White);

  ssd1306_DrawRectangle(8,40,112,50,White);
  ssd1306_DrawRectangle(8,53,112,63,White);

  ssd1306_UpdateScreen();

  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf, ADC_BUF_LEN);
  HAL_TIM_Base_Start_IT(&htim2);

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);

  headData[FOCUS] = 2500;
  headData[ZOOM] = 2048;
  headData[PAN] = 1024;
  headData[TILT] = 1024;
  headData[ROLL] = 1024;

  gainSetting = 10;
  TIM1->CNT = 40;

  //PTRgain = 2.0; //range is 0.2 to 2.0

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  updatePanEncoder();



		//=== FOCUS POT ===
	  /*
		avgFocusData[count_focus] = adcValue[4];
		count_focus++;
		if (count_focus >= AVG_FOCUS)
			count_focus = 0;

		avgFocus = 0;
		for (int i = 0; i<AVG_FOCUS; i++)
		{
			avgFocus = avgFocus + avgFocusData[i];
		}
		avgFocus = avgFocus/AVG_FOCUS;


		avgFocus = (avgFocus/2)+1024;

		if (avgFocus > 3024)
			avgFocus = 3024;
		if (avgFocus < 1024)
			avgFocus = 1024;

		*/

		//focusDisplayValue = (avgFocus-1024)/10;
		//focusBarValue = (avgFocus-1024)/20;


		/*
		//EWMA test code
		float a = 0.20;
		uint32_t previousValue;
		uint32_t i;
		float ewma;
		for (i=0;i<200;i++)
		{
			ewma = (1-a)*previousValue+(a*adcValue[4]);
			previousValue = ewma;
		}
		*/

		  //test code for focus averaging
		  //uint16_t i = ADC_BUF_LEN;
		  //uint16_t *dma = adc_buf;

		  channel1 = 0;
		  channel2 = 0;
		  channel3 = 0;
		  channel4 = 0;
		  channel5 = 0;


		  //samplingCount = ADC_BUF_LEN;
		  samplingCount = 200;

		  uint16_t j,k;
			k = 0;
		  for (j=0; j<samplingCount; j++)
		  {
			  channel1 += adc_buf[k];
			  channel2 += adc_buf[k+1];
			  channel3 += adc_buf[k+2];
			  channel4 += adc_buf[k+3];
			  channel5 += adc_buf[k+4];
		  	  k+=5;
		  }

		  channel1 /= samplingCount;
		  channel2 /= samplingCount;
		  channel3 /= samplingCount;
		  channel4 /= samplingCount;
		  channel5 /= samplingCount;



		  /*
		  channel5 += adc_buf[4];
		  channel5 += adc_buf[9];
		  channel5 += adc_buf[14];
		  channel5 += adc_buf[19];
		  channel5 += adc_buf[24];
		  channel5 += adc_buf[29];
		  channel5 /= 6;
			*/


			/*
		  do {
			  channel1 += *dma++;
			  channel2 += *dma++;
			  channel3 += *dma++;
			  channel4 += *dma++;
			  channel5 += *dma++;
		  } while (--i > 0);
			*/


		  /*
		  //mini test
		  channel5 = 0;
		  channel5 = testBuffer[0];
		  channel5 += testBuffer[1];
		  channel5 += testBuffer[2];
		  channel5 += testBuffer[3];
		  channel5 += testBuffer[4];
		  channel5 /= 5;
		  */

			focusRawValue = adcValue[4];

			focusAvgValue = (uint16_t)(channel5>>1); //divide by 2 for a range of 0 to 2000ish


			avgFocusData[count_focus] = focusAvgValue;
			count_focus++;
			if (count_focus >= AVG_FOCUS)
				count_focus = 0;

			avgFocus = 0;
			for (int i = 0; i<AVG_FOCUS; i++)
			{
				avgFocus = avgFocus + avgFocusData[i];
			}
			avgFocus = avgFocus/AVG_FOCUS;


			if (avgFocus > 2000) //limit top end of the range
				avgFocus = 2000;


			focusDisplayValue = avgFocus/10; //display range is 0 to 200ish

			//test display support
			rawTick[tickCount] = focusRawValue;
			avgTick[tickCount] = avgFocus;
			tickCount++;
			if (tickCount > NUM_TICK)
				tickCount = 0;

			headData[FOCUS] = avgFocus + 1024; //range is 1024 to 3024



		//=== ZOOM JOYSTICK ===
		avgZoomData[count_zoom] = adcValue[1];
		count_zoom++;
		if (count_zoom >= AVG_ZOOM)
			count_zoom = 0;

		avgZoom = 0;
		for (int i = 0; i<AVG_ZOOM; i++)
		{
			avgZoom = avgZoom + avgZoomData[i];
		}
		avgZoom = avgZoom/AVG_ZOOM;
		zoomValue = avgZoom;

		zoomRawValue = adcValue[1];
		zoomAvgValue = avgZoom;

		//calibrate zoom
		//including deadband
		zoomCalValue = 0;
		if (zoomAvgValue > Y1H)
		{
			zoomCalValue = zoomAvgValue - Y1H;
		}

		if (zoomAvgValue < Y1L)
		{
			zoomCalValue = zoomAvgValue - Y1L;
		}

		if (zoomCalValue > 500)
			zoomCalValue = 500;
		if (zoomCalValue < -500)
			zoomCalValue = -500;

	  headData[ZOOM] = (zoomCalValue*2)+2048+zoomOffset;
	  zoomDisplayValue = zoomCalValue;



	//=== PAN JOYSTICK ===
	avgPanData[count_pan] = adcValue[2];
	count_pan++;
	if (count_pan >= AVG_PAN)
		count_pan = 0;

	avgPan = 0;
	for (int i = 0; i<AVG_PAN; i++)
	{
		avgPan = avgPan + avgPanData[i];
	}
	avgPan = avgPan/AVG_PAN;
	panAvgValue = avgPan;

	//calibrate
	//including deadband
	panCalValue = 0;
	if (panAvgValue > X2H)
	{
		panCalValue = panAvgValue - X2H;
	}

	if (panAvgValue < X2L)
	{
		panCalValue = panAvgValue - X2L;
	}

	if (panCalValue > 500)
		panCalValue = 500;
	if (panCalValue < -500)
		panCalValue = -500;

	panCalValue = (panCalValue/10)*10;  //filter

	headData[PAN] = (int16_t)((float)panCalValue*PTRgain)+1024+panOffset;
	panDisplayValue = panCalValue;


	//=== TILT JOYSTICK ===
	avgTiltData[count_tilt] = adcValue[3];
	count_tilt++;
	if (count_tilt >= AVG_TILT)
		count_tilt = 0;

	avgTilt = 0;
	for (int i = 0; i<AVG_TILT; i++)
	{
		avgTilt = avgTilt + avgTiltData[i];
	}
	avgTilt = avgTilt/AVG_TILT;
	tiltValue = avgTilt;
	tiltAvgValue = avgTilt;

	//calibrate zoom to -1000 to +1000
	//including deadband
	tiltCalValue = 0;
	if (tiltAvgValue > Y2H)
	{
		tiltCalValue = tiltAvgValue - Y2H;
	}

	if (tiltAvgValue < Y2L)
	{
		tiltCalValue = tiltAvgValue - Y2L;
	}

	if (tiltCalValue > 500)
		tiltCalValue = 500;
	if (tiltCalValue < -500)
		tiltCalValue = -500;

	tiltCalValue = (tiltCalValue/10)*10; //filter

	  if (tiltSense == TILT_A)
	  {
		  tiltCalValue = tiltCalValue *-1; //airplane - stick up is tilt down
	  }

	  headData[TILT] = (int16_t)((float)tiltCalValue*PTRgain)+1024+tiltOffset;
	  tiltDisplayValue = tiltCalValue;


	  // === ROLL JOYSTICK ===
	  if (HAL_GPIO_ReadPin(SERVO_SW_GPIO_Port, SERVO_SW_Pin))
	  {
		  rollStatus = 0;
	  }
	  else
	  {
		  rollStatus = 1;
	  }

	  avgRollData[count_roll] = adcValue[0];
	  count_roll++;
	  if (count_roll >= AVG_ROLL)
		  count_roll = 0;

		avgRoll = 0;
		for (int i = 0; i<AVG_ROLL; i++)
		{
			avgRoll = avgRoll + avgRollData[i];
		}
		avgRoll = avgRoll/AVG_ROLL;
		rollValue = avgRoll;
		rollAvgValue = avgRoll;


		//calibrate zoom to -1000 to +1000
		//including deadband
		rollCalValue = 0;
		if (rollAvgValue > X1H)
		{
			rollCalValue = rollAvgValue - X1H;
		}

		if (rollAvgValue < X1L)
		{
			rollCalValue = rollAvgValue - X1L;
		}

		if (rollCalValue > 500)
			rollCalValue = 500;
		if (rollCalValue < -500)
			rollCalValue = -500;


	  if (rollStatus == 0)
	  {
		  rollCalValue = 0;
	  }

	  headData[ROLL] = (int16_t)((float)rollCalValue*PTRgain)+1024;
	  rollDisplayValue = rollCalValue;




	  //ZOOM OFFSET ADJUSTMENT
	  zoomOffset = ((TIM8->CNT)>>2);
	  if (zoomOffset > 100)
	  {
		  zoomOffset = 100;
		  TIM8->CNT = 400;
	  }
	  if (zoomOffset < -100)
	  {
		  zoomOffset = -100;
	  	  TIM8->CNT = -400;
	  }


	  //TILT OFFSET ADJUSTMENT
	  tiltOffset = ((TIM3->CNT)>>2);
	  if (tiltOffset > 100)
	  {
		  tiltOffset = 100;
		  TIM3->CNT = 400;
	  }
	  if (tiltOffset < -100)
	  {
		  tiltOffset = -100;
	  	  TIM3->CNT = -400;
	  }


	  //PTR GAIN ADJUSTMENT
	  gainSetting = ((TIM1->CNT)>>2);
	  if (gainSetting > 10)
	  {
		  gainSetting = 10;
		  TIM1->CNT = 40;
	  }
	  if (gainSetting < -9)
	  {
		  gainSetting = -9;
	  	  TIM1->CNT = -36;
	  }

	  gainSetting += 10; //gain from 1 to 20
	  PTRgain = (float)(gainSetting)/20.0; //sets actual gain range (twenty steps on encoder)

	 //TILT MENU
	 if ((HAL_GPIO_ReadPin(TILT_SW_GPIO_Port, TILT_SW_Pin) == 0) && (tiltPressed == FALSE))
	 	 	  {
	 	 		  tiltPressed = TRUE;
	 	 		  if (menuPage == MENU_TILT)
	 	 			  menuPage = MENU_OFF;
	 	 		  else
	 	 		  {
	 	 			  menuPage = MENU_TILT;
		 	 		  if (tiltSense == TILT_A)
		 	 			  TIM3->CNT = 0; //set tilt encoder count to 0;
		 	 		  else
		 	 			  TIM3->CNT = 4;
	 	 		  }
	 	 	  }
	if (HAL_GPIO_ReadPin(TILT_SW_GPIO_Port, TILT_SW_Pin))
	 	 	  {
	 	 		 tiltPressed = FALSE;
	 	 	  }


	//AUX MENU
	if ((HAL_GPIO_ReadPin(AUX_SW_GPIO_Port, AUX_SW_Pin) == 0) && (auxPressed == FALSE))
		{
		auxPressed = TRUE;
	 	if (menuPage == MENU_AUX)
	 		menuPage = MENU_OFF;
	 	else
	 		{
	 	 	menuPage = MENU_AUX;
	 		calCount = ((TIM1->CNT)>>2);
			calStatus = CAL_OFF;
	 	 	}
		}
	if (HAL_GPIO_ReadPin(AUX_SW_GPIO_Port, AUX_SW_Pin))
		{
	 	auxPressed = FALSE;
	 	}



	//TILT SENSE
	 if (menuPage == MENU_TILT)
	 {
		 uint8_t encoderValue = (TIM3->CNT)>>2;
		 if (encoderValue%2 == 0)
		 {
			 tiltSense = TILT_A;
		 }
		 else
		 {
			 tiltSense = TILT_B;
		 }
	 }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV4;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc2.Init.ContinuousConvMode = ENABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 5;
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_5;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 10;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 47999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 33;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 10;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 65535;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 10;
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{

  /* USER CODE BEGIN USB_Init 0 */

  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STAT_GPIO_Port, LED_STAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SERVO_Pin|OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_STAT_Pin */
  GPIO_InitStruct.Pin = LED_STAT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_STAT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : AUX_SW_Pin ZOOM_SW_Pin SERVO_SW_Pin */
  GPIO_InitStruct.Pin = AUX_SW_Pin|ZOOM_SW_Pin|SERVO_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_SERVO_Pin OLED_CS_Pin OLED_DC_Pin OLED_RST_Pin */
  GPIO_InitStruct.Pin = LED_SERVO_Pin|OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : TILT_SW_Pin PAN_A_Pin PAN_B_Pin PAN_SW_Pin */
  GPIO_InitStruct.Pin = TILT_SW_Pin|PAN_A_Pin|PAN_B_Pin|PAN_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
	adcValue[0] = adc_buf[0];
	adcValue[1] = adc_buf[1];
	adcValue[2] = adc_buf[2];
	adcValue[3] = adc_buf[3];
	adcValue[4] = adc_buf[4];




	  /*
	testBuffer[0] = adc_buf[4];
	testBuffer[1] = adc_buf[9];
	testBuffer[2] = adc_buf[14];
	testBuffer[3] = adc_buf[19];
	testBuffer[4] = adc_buf[24];

	uint16_t i;
	testValue = 0;
	for (i=0; i<128; i++)
	{
		testValue += adc_buf[4+(i*5)];
	}
	testValue /= 128;
	*/

}

void updatePanEncoder (void)
{

	val = read_rotary();
	panOffset += val;

	if (panOffset > 100)
		panOffset = 100;
	if (panOffset < -100)
		panOffset = -100;


/*
	uint8_t pinClock = HAL_GPIO_ReadPin(PAN_A_GPIO_Port, PAN_A_Pin);
	uint8_t pinData = HAL_GPIO_ReadPin(PAN_B_GPIO_Port, PAN_B_Pin);

	state=(state<<1) | pinClock | 0xe000;

	    if (state==0xf000){
	       state=0x0000;
	       if(pinData)
	    	  panOffset++;
	       else
	    	  panOffset--;
	    }
*/


/*
	uint8_t n = HAL_GPIO_ReadPin(PAN_A_GPIO_Port, PAN_A_Pin);
	if ((panEncoderPinAPrev == LOW) && (n == HIGH))
	{
		if (HAL_GPIO_ReadPin(PAN_B_GPIO_Port, PAN_B_Pin) == LOW)
		{
			panOffset--;
		}
		else
		{
			panOffset++;
		}
	}
	panEncoderPinAPrev = n;
*/

}

int8_t read_rotary(void)
{

  static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};


  prevNextCode <<= 2;

	uint8_t pinClock = HAL_GPIO_ReadPin(PAN_A_GPIO_Port, PAN_A_Pin);
	uint8_t pinData = HAL_GPIO_ReadPin(PAN_B_GPIO_Port, PAN_B_Pin);


  if (pinData) prevNextCode |= 0x02;
  if (pinClock) prevNextCode |= 0x01;
  prevNextCode &= 0x0f;

   // If valid then store as 16 bit data.
   if  (rot_enc_table[prevNextCode] ) {
      store <<= 4;
      store |= prevNextCode;
      //if (store==0xd42b) return 1;
      //if (store==0xe817) return -1;
      if ((store&0xff)==0x2b) return -1;
      if ((store&0xff)==0x17) return 1;
   }
   return 0;
}

void updateZoomOffset (void)
{
	zoomOffset++;
	if (zoomOffset > 50)
		zoomOffset = 50;
}


void updateDisplay (void)
{
	//display header
	ssd1306_Fill(Black);
	ssd1306_SetCursor(2, 0);
	sprintf(displayBuff,"SUPRA   CAM OP  %s", VER);
	ssd1306_WriteString(displayBuff, Font_6x8, White);
	//ssd1306_WriteString("SUPRA   CAM OP  %s", Font_6x8, White);
	ssd1306_Line(1,8,127,8,White);


	switch (menuPage)
	{
	case MENU_OFF:
		menuOff();
		break;

	case MENU_TILT:
		menuTilt();
		break;

	case MENU_AUX:
		menuAux();
		break;

	default:
		menuOff();
	}



	ssd1306_UpdateScreen();

}

void menuOff (void)
{

	ssd1306_SetCursor(2, 10);
	//sprintf(displayBuff,"X1:%04d  X2:%04d", adcValue[0], adcValue[2]);
	sprintf(displayBuff,"PAN:%04d   TILT:%04d", panDisplayValue, tiltDisplayValue);
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	ssd1306_SetCursor(2, 20);


		  if (rollStatus)
		  {
			  sprintf(displayBuff,"ROLL:%04d  FOCUS:%03d", rollDisplayValue, focusDisplayValue);
		  }
		  else
		  {
			  sprintf(displayBuff,"ROLL: OFF  FOCUS:%03d", focusDisplayValue);
		  }
		  ssd1306_WriteString(displayBuff, Font_6x8, White);
		  ssd1306_SetCursor(2, 30);
		  //sprintf(displayBuff,"ZOOM:%04d  OFFST:%3d", zoomDisplayValue, zoomOffset);
		  sprintf(displayBuff,"ZOOM:%04d T%04d P%04d", zoomDisplayValue, tiltOffset, panOffset);
		  ssd1306_WriteString(displayBuff, Font_6x8, White);

		  // ZOOM OFFSET DISPLAY
		  ssd1306_SetCursor(2, 42);
		  sprintf(displayBuff,"Z");
		  ssd1306_WriteString(displayBuff, Font_6x8, White);
		  ssd1306_DrawRectangle(8,40,114,50,White);
		  for (int i = 1; i < 10; i++)
		  {
			  int j = (i*10)+10;
			  ssd1306_Line(j,40,j,41,White);
			  ssd1306_Line(j,49,j,50,White);
		  }
		  ssd1306_Line(60,44,60,46,White);
		  ssd1306_DrawRectangle((zoomOffset/2)+59,44,(zoomOffset/2)+61,46,White);
		  ssd1306_Line((zoomOffset/2)+60,43,(zoomOffset/2)+60,47,White);
		  //ssd1306_DrawRectangle((focusAvgValue/2)+10,44,(focusAvgValue/2)+12,46,White);
		  //ssd1306_Line((focusAvgValue/2)+11,43,(focusAvgValue/2)+11,47,White);

		  //GAIN DISPLAY
		  ssd1306_SetCursor(2, 55);
		  sprintf(displayBuff,"PTR Gain");
		  ssd1306_WriteString(displayBuff, Font_6x8, White);

		  ssd1306_SetCursor(90, 55);
		  sprintf(displayBuff,"%3d%%", (uint8_t)(gainSetting*5));
		  ssd1306_WriteString(displayBuff, Font_6x8, White);

		  ssd1306_Line(60,60,80,60,White);

		  //ssd1306_DrawRectangle(58,53,84,63,White);
		  for (int i = 5; i < 8; i++)
		  {
			  int j = (i*10)+10;
			  //ssd1306_Line(j,53,j,54,White);
			  ssd1306_Line(j,59,j,61,White);
		  }
		  //ssd1306_Line(70,57,70,59,White);

		  uint16_t PTRgainDisplay = (uint16_t)(PTRgain * 20);

		  //ssd1306_DrawRectangle((panOffset/2)+59,57,(panOffset/2)+61,59,White);
		  //ssd1306_Line((panOffset/2)+60,56,(panOffset/2)+60,60,White);

		  uint16_t p = PTRgainDisplay+60;

		  ssd1306_Line(p-3,54,p+3,54,White);
		  ssd1306_Line(p-2,55,p+2,55,White);
		  ssd1306_Line(p-1,56,p+1,56,White);
		  ssd1306_Line(p,57, p,57,White);


		  //ssd1306_DrawRectangle(PTRgainDisplay+59,57,PTRgainDisplay+61,59,White);
		  //ssd1306_Line(PTRgainDisplay+60,56,PTRgainDisplay+60,60,White);

			//update screen command is in update display function

}

void menuTilt (void)
{
	ssd1306_SetCursor(40, 15);
	sprintf(displayBuff,"TILT MENU");
	ssd1306_WriteString(displayBuff, Font_6x8, White);
	ssd1306_SetCursor(25, 35);
	if (tiltSense == TILT_A)
		sprintf(displayBuff,"TILT = NORMAL");
	else
		sprintf(displayBuff,"TILT = REVERSED");
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	//update screen command is in update display function
}


void menuAux (void)
{
	ssd1306_SetCursor(1, 15);
	sprintf(displayBuff,"F  RAW:%04d AVG:%04d", focusRawValue, focusAvgValue);
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	//ssd1306_SetCursor(40,15);
	//sprintf(displayBuff,"AUX MENU");
	//ssd1306_WriteString(displayBuff, Font_6x8, White);

	ssd1306_SetCursor(1, 25);
	if (rollStatus)
		sprintf(displayBuff,"X1 RAW:%04d CAL:%04d", rollAvgValue, rollCalValue);
	else
		sprintf(displayBuff,"X1 RAW:%04d CAL: OFF", rollAvgValue);
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	ssd1306_SetCursor(1, 35);
	sprintf(displayBuff,"Y1 RAW:%04d CAL:%04d", zoomAvgValue, zoomCalValue);
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	ssd1306_SetCursor(1, 45);
	sprintf(displayBuff,"X2 RAW:%04d CAL:%04d", panAvgValue, panCalValue);
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	ssd1306_SetCursor(1, 55);
	sprintf(displayBuff,"Y2 RAW:%04d CAL:%04d", tiltAvgValue, tiltCalValue);
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	for (uint8_t i=0;i<NUM_TICK;i++)
	{
		ssd1306_Line((rawTick[i]/2)+1,9,(rawTick[i]/2)+1,10,White);
		ssd1306_Line((avgTick[i]/2)+1,12,(avgTick[i]/2)+1,13,White);
	}




	return;

	ssd1306_SetCursor(5, 25);
	sprintf(displayBuff,"RAW:%04d  AVG:%04d  CAL:%04d",zoomRawValue, zoomAvgValue, zoomCalValue);
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	ssd1306_SetCursor(5, 35);
	sprintf(displayBuff,"CAL:%04d", zoomCalValue);
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	if (((TIM1->CNT)>>2) > (calCount+2))
		{
			calStatus = CAL_START;
			calCount = (TIM1->CNT)>>2;
			joystickCenter = zoomAvgValue;
			joystickMin = joystickCenter;
			joystickMax = joystickCenter;
		}

	if (((TIM1->CNT)>>2) < (calCount-2))
		{
			calStatus = CAL_FINISH;
			calCount = (TIM1->CNT)>>2;
		}


	ssd1306_SetCursor(5, 45);
	if (calStatus == CAL_START)
	{
		sprintf(displayBuff,"Calibrating...");
	}
	else if (calStatus == CAL_FINISH)
	{
		sprintf(displayBuff,"Done Calibrating...");
	}
	else
	sprintf(displayBuff,"   ");
	ssd1306_WriteString(displayBuff, Font_6x8, White);

	if (calStatus == CAL_START)
	{
		if (zoomAvgValue < joystickMin)
			joystickMin = zoomAvgValue;
		if (zoomAvgValue > joystickMax)
			joystickMax = zoomAvgValue;
		ssd1306_SetCursor(5, 55);
		sprintf(displayBuff,"M:%04d X:%04d C:%04d",joystickMin, joystickMax, joystickCenter);
		ssd1306_WriteString(displayBuff, Font_6x8, White);
	}
	if (calStatus == CAL_FINISH)
	{
		zoomCalFactor = (float)(joystickMax - joystickMin)/200.0;

			}



	//update screen command is in update display function
}


void sendCameraData (void)
{

	//dataTX[1] = (uint8_t)(headData[ZOOM] >> 8);
	//dataTX[2] = (uint8_t)headData[ZOOM];
	//dataTX[3] = (uint8_t)(headData[FOCUS] >> 8);
	//dataTX[4] = (uint8_t)headData[FOCUS];



	dataTX[0] = 0xAA;
	dataTX[1] = (uint8_t)(headData[FOCUS] >> 8);
	dataTX[2] = (uint8_t)headData[FOCUS];
	dataTX[3] = (uint8_t)(headData[ZOOM] >> 8);
	dataTX[4] = (uint8_t)headData[ZOOM];
	dataTX[5] = (uint8_t)(headData[PAN] >> 8);
	dataTX[6] = (uint8_t)headData[PAN];
	dataTX[7] = (uint8_t)(headData[TILT] >> 8);
	dataTX[8] = (uint8_t)headData[TILT];
	dataTX[9] = (uint8_t)(headData[ROLL] >> 8);
	dataTX[10] = (uint8_t)headData[ROLL];
	dataTX[11] = 0x55;

	HAL_UART_Transmit_IT(&huart2, dataTX , 12);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
